{"docstore/metadata": {"62292d3d-6dfb-47a6-8672-97994e29a88b": {"doc_hash": "add74410383d9fd078d087aacb794e23f0d5f7900a194aee3e78d3f0c7cb9e8b"}, "1ce00663-4b34-4e25-85a0-106a7d6f8585": {"doc_hash": "7faa21098a028c6f3ff824be7039353d1b4484afefba15577b33df08224c5018"}, "634d89cf-bdb8-4480-9e7b-4f59bc812013": {"doc_hash": "da93f05e1e4d18aa2a7e10fc3f4979c615661ee65fc733e26a6767773370baef"}, "629746ad-ca05-4c67-a8e9-8c19f1b6171d": {"doc_hash": "4938c56c27af60a57ab32971f9e46081c28a981bde875c5e7610ac68b35bdff4"}, "ce155f47-3783-4a98-b7b5-f9f9b2b3a6ec": {"doc_hash": "929238c9a83de0048f1f0e1ce0f9e5aff7a4d3cf2628ee48e5835d9818e3bbc0"}, "41a7b73e-0278-4127-ba1f-f2782a76ddda": {"doc_hash": "d2665e2a957bfe1613b947ddce1242fc12ece214ef2efe1e7471a108afe42657"}, "77cbdfbe-704b-4676-b9d8-df4def9ed487": {"doc_hash": "5e76a6dd7bf4ee94b37cd7237b85eee1c493338f3584288e71126dcbca94a1c2"}, "2e5dd0a5-5ea7-4188-923c-2dc0322e8f68": {"doc_hash": "8dbb865b565f9436a4e5ac2138eb2831c19d7a5481ee62f404bc6f471fa0b008"}, "3cbd9aaa-09dc-4177-95bf-0f621fd18189": {"doc_hash": "b4ad3f9c154cad1f1119ae5c9b8669def1217a2a84483229859a155f25c56495"}, "b6b4e85c-c40a-44c1-bcb4-3bb62c562763": {"doc_hash": "a1462eb84056455e3b7ccc5f584d451a9b98747186843b1cd0766846e17c5e0e"}, "3c94c228-2755-4cce-be30-67517eec57cf": {"doc_hash": "947e8f5cc94b84abc01bc44a78bb28608fcf35a96a5ae311d13c7e16a0c3ef4c"}, "7a99b43d-add6-4e9f-8e2a-a0cf7e105095": {"doc_hash": "7924dd0e8b068ccdb1687efc2115cf79925ef86bd52ed928e77d352cb41526a5"}, "d95d53f3-0f4c-40fa-87be-e48996de68fd": {"doc_hash": "1942a2bda56564bb60ab408ad53e11c417cf64d8ddff2d5340dfefd4e8dfe54f"}, "ad13863b-6cb2-4901-b344-cc617bc6dc2a": {"doc_hash": "cd1cd178fb9283647eb215e91fd67f01ffb362725af4813697b0e59d0b4b681d"}, "33e41267-dca6-40a4-b362-014e85e5d5d7": {"doc_hash": "d76763b5c9cf3f6119f644af2da5d2ec5d06bbbec210cf65a3ea434f9a9fb4b9"}, "cf26b344-2d24-453c-92cd-e77bf3dc0b3d": {"doc_hash": "4dce7b3e87707adc26403c32132eec864b2c25946bd43af0fd019eb4902e6c90"}, "cc194e0c-a29d-4672-9b85-68d86d665786": {"doc_hash": "e3d8a27194715ab1ed1be8eab824fe7ef786feb17f6cbcb034d86bd83a7341e4"}, "eed7032e-01d6-449c-a2df-946936576826": {"doc_hash": "b38e94a95d21966a14eacc8e845174d85ea99c0bc5b9792122289d28c6e3da56"}, "48c6d57a-3a0f-4d79-82a2-a7847e300bb8": {"doc_hash": "7e34c9796012401cc726bb0d067fab62360827bfd0a62d0e545b17aa3babc9f6"}, "28da2d70-c12f-420d-bc89-9fbba339a22b": {"doc_hash": "b3942c12824974269ce87c898ac0580a64d89820d3bfd99c74c4234e4f4f1bfa"}, "f9046bcd-00b5-4994-a9ad-4d1a2417bd9d": {"doc_hash": "cec94403cf85d011ed968ed8333870cca84cf929cfca8075d8c770f3b8627899"}, "bc598ef8-fc59-4e3b-95ac-08f9accbc9a8": {"doc_hash": "c5a2fabb413b9c7c8ff1087c7c317bf065c97501e6400447e12de4a67b65f198"}, "f8d6af88-6d1a-413a-be80-52750cf1e7a1": {"doc_hash": "56fd1cbaa930d9b88b8f3d08f65536798820d950a49cca2ba5b5f7fce4dcb4a2"}, "3347180c-7cb4-4c4a-b472-6bf9bcdb8ef2": {"doc_hash": "5c5d92ae7aa07e1311da89e29f9791b53432dc0cf433d7223e985ea18b31fd04"}, "a598a0a6-8300-41c9-90c1-270dbcc78975": {"doc_hash": "8215a3eae543ed1029ab2f5c27b37f4ed40a0fdf0ad4b44c86920369cdd1efdf"}, "b72283b3-a6e4-4331-b90b-2f495d2164ba": {"doc_hash": "f6f5ebd8aec565abd36522d832d8bf07b854c50bab4be3b634822537f2243a71"}, "933e532c-51c8-4ced-a2db-9e661400954a": {"doc_hash": "edc01e81e89f781b98d0df548904cc32ca846f6820bc191785953115889854aa"}, "1af604e2-87fd-4f65-8dec-6d518d60bd23": {"doc_hash": "ebffb4eef3b3907fe6593d2f79c794b7a9b645b4ce6102f2bf8681e238103bcb"}, "e9dc1dfb-eeb9-4e01-87a3-e232c172da05": {"doc_hash": "97e9072fa18fc37afe4f6bd8f2724d1e7a54d1e64d87fee00896089e67f8b8e2"}, "ec1753fe-fe86-4fe0-8ee8-e239516aee64": {"doc_hash": "16139bb65627b16f302a87706e4b61a61a59b598fbef4d5a6131f11582c4d443"}, "895fdd62-ff1a-4f20-a1b4-2a5b140aea2e": {"doc_hash": "80ad598a66249237577cb0ce32f810a83007048fabcd7d4b9e3a01ec4c5958ac"}, "bfd4b5e9-e814-4f1e-8216-68114bfe2cdc": {"doc_hash": "7cccc1711e5aaaa801a0996e6c7cf49528f31de947c214e475bda10930f09cb4"}, "2840d526-0d4f-40e9-8f14-b178f444f9b5": {"doc_hash": "6b3a6a8fd2df4651fa19d9da9d24361f37159e24b087aab54a29d44a51b4b89d"}, "0e8fa5eb-95a3-41ba-9b5e-6f776a12b163": {"doc_hash": "4a8c105918b11be9dd09366d943dd222bba20b24389d17a5d2db49c31564ed9b"}, "a2152512-9749-4732-8060-3b205232a86e": {"doc_hash": "c968686ed5e3318ada7bc1194c88a85abb375d9726dc61fad9e0d99f2ce6c3af"}, "2f279973-4195-4f71-9053-c5f61d583be9": {"doc_hash": "b164430c445ccaa084c872efa92bb1ef6a1b617748a8fb74e993101f129f4f4d"}, "e33c71a6-86a2-4dfb-9e7c-3e091dd7740b": {"doc_hash": "ca3d0cc2f93acc5fadf7e159bf43d1d537a90d2e874403c10308731b57799547"}, "07ccd8fd-1978-4b4e-b098-1c1d01dea81e": {"doc_hash": "279a1719582b94f51e75cbd646bfe002f9866e048e4d7cd4b70bc4af9476cadc"}, "c3e3c03b-41ee-415c-a512-8b828ac06562": {"doc_hash": "b4387a3f5789161d6f6426f66cd3d0624e77f2e6610550a92aed545f9a4fff06"}, "7dd4d62b-40cd-4c4f-8dc8-74d1c25acc55": {"doc_hash": "8d00a039909d0859b698cd43abc37d33c00fd239c46543e61ffaf7230cf9006d"}, "bcb9ef38-67de-4ab4-aed8-147e5762e75f": {"doc_hash": "f682a5d0faedcf1d05a306953b7f3dd5ce9d3941efa4afd79b9e670ef10cecbe"}, "662ec389-15ca-4e52-b8a4-d45d33fb00b7": {"doc_hash": "5a6b6094867c919c5429fb33e521b609697cfd5523ac4b3bc6493d8bfd0298f1"}, "80d4557d-55b2-44c1-9d87-a9d2949a7741": {"doc_hash": "340a2cdeb9497c16eb049c5069a1717da481801af22e47acf81ae468c0ad766a"}, "4e57ad59-c5be-4ec1-aa41-8cf8d31eb74f": {"doc_hash": "add74410383d9fd078d087aacb794e23f0d5f7900a194aee3e78d3f0c7cb9e8b", "ref_doc_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55"}, "f1a9b94d-bd46-4235-a4eb-59ab234bc959": {"doc_hash": "7faa21098a028c6f3ff824be7039353d1b4484afefba15577b33df08224c5018", "ref_doc_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55"}, "713ad29b-889a-4ff8-ac58-96afeaad203a": {"doc_hash": "da93f05e1e4d18aa2a7e10fc3f4979c615661ee65fc733e26a6767773370baef", "ref_doc_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55"}, "9d6c6926-75f5-4963-9288-dc191cbe94ee": {"doc_hash": "4938c56c27af60a57ab32971f9e46081c28a981bde875c5e7610ac68b35bdff4", "ref_doc_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55"}, "d1aae363-1c24-4e1f-82a2-e117b536dadf": {"doc_hash": "929238c9a83de0048f1f0e1ce0f9e5aff7a4d3cf2628ee48e5835d9818e3bbc0", "ref_doc_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55"}, "f202837d-f058-4f4b-addd-fe8b6709b05e": {"doc_hash": "d2665e2a957bfe1613b947ddce1242fc12ece214ef2efe1e7471a108afe42657", "ref_doc_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d"}, "d81e042b-7af5-423e-a049-794c77e2ffd0": {"doc_hash": "5e76a6dd7bf4ee94b37cd7237b85eee1c493338f3584288e71126dcbca94a1c2", "ref_doc_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d"}, "202347b5-5257-46bb-b1d1-d20e3b84111f": {"doc_hash": "8dbb865b565f9436a4e5ac2138eb2831c19d7a5481ee62f404bc6f471fa0b008", "ref_doc_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d"}, "9fd51aba-9b90-4cb2-84db-1581de56a8cb": {"doc_hash": "b4ad3f9c154cad1f1119ae5c9b8669def1217a2a84483229859a155f25c56495", "ref_doc_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d"}, "993c52c6-f359-481f-afef-331b10abf0d9": {"doc_hash": "a1462eb84056455e3b7ccc5f584d451a9b98747186843b1cd0766846e17c5e0e", "ref_doc_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d"}, "efb4eb95-18a8-4217-bab3-6c156daa4868": {"doc_hash": "947e8f5cc94b84abc01bc44a78bb28608fcf35a96a5ae311d13c7e16a0c3ef4c", "ref_doc_id": "726f78ea-a895-431d-b878-6012d776af95"}, "96525962-9cef-48a1-b6e0-67e6879b0e00": {"doc_hash": "7924dd0e8b068ccdb1687efc2115cf79925ef86bd52ed928e77d352cb41526a5", "ref_doc_id": "726f78ea-a895-431d-b878-6012d776af95"}, "266cef67-85d6-4439-8a7c-e151eab9ddd9": {"doc_hash": "1942a2bda56564bb60ab408ad53e11c417cf64d8ddff2d5340dfefd4e8dfe54f", "ref_doc_id": "726f78ea-a895-431d-b878-6012d776af95"}, "5f2a8196-865b-4a25-be7f-14751c4d296c": {"doc_hash": "cd1cd178fb9283647eb215e91fd67f01ffb362725af4813697b0e59d0b4b681d", "ref_doc_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca"}, "e9c56fc3-a720-4bb7-8da9-44bedd294054": {"doc_hash": "d76763b5c9cf3f6119f644af2da5d2ec5d06bbbec210cf65a3ea434f9a9fb4b9", "ref_doc_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca"}, "c414d478-24d3-4e69-b736-11c40dbf5627": {"doc_hash": "4dce7b3e87707adc26403c32132eec864b2c25946bd43af0fd019eb4902e6c90", "ref_doc_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca"}, "ffd8a009-0603-43f8-86ae-491d781dbb9b": {"doc_hash": "e3d8a27194715ab1ed1be8eab824fe7ef786feb17f6cbcb034d86bd83a7341e4", "ref_doc_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca"}, "7afc4b35-2051-496c-9dc6-5ab19c1f6f9c": {"doc_hash": "b38e94a95d21966a14eacc8e845174d85ea99c0bc5b9792122289d28c6e3da56", "ref_doc_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca"}, "7685f0e3-aea1-4286-8940-a076ee1a3b1e": {"doc_hash": "7e34c9796012401cc726bb0d067fab62360827bfd0a62d0e545b17aa3babc9f6", "ref_doc_id": "839d015d-4373-4845-9225-2dfdfda0668f"}, "154c5e33-945d-4535-92f9-2f156e597611": {"doc_hash": "b3942c12824974269ce87c898ac0580a64d89820d3bfd99c74c4234e4f4f1bfa", "ref_doc_id": "839d015d-4373-4845-9225-2dfdfda0668f"}, "7f90d0d7-dddb-4bc3-861a-e3e8d9e1b066": {"doc_hash": "cec94403cf85d011ed968ed8333870cca84cf929cfca8075d8c770f3b8627899", "ref_doc_id": "839d015d-4373-4845-9225-2dfdfda0668f"}, "2093b7c7-9941-4bfb-8374-b96b7cf13118": {"doc_hash": "c5a2fabb413b9c7c8ff1087c7c317bf065c97501e6400447e12de4a67b65f198", "ref_doc_id": "839d015d-4373-4845-9225-2dfdfda0668f"}, "d72eaf60-f15d-4f87-a528-23c8bf81925f": {"doc_hash": "56fd1cbaa930d9b88b8f3d08f65536798820d950a49cca2ba5b5f7fce4dcb4a2", "ref_doc_id": "839d015d-4373-4845-9225-2dfdfda0668f"}, "b6052773-ca0f-43cc-80a0-aa1d18100ee5": {"doc_hash": "5c5d92ae7aa07e1311da89e29f9791b53432dc0cf433d7223e985ea18b31fd04", "ref_doc_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1"}, "e4566292-9640-4c65-b4ce-1894f6ade08e": {"doc_hash": "8215a3eae543ed1029ab2f5c27b37f4ed40a0fdf0ad4b44c86920369cdd1efdf", "ref_doc_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1"}, "ba4c0e99-d6dd-426a-8a59-778ed4689a93": {"doc_hash": "f6f5ebd8aec565abd36522d832d8bf07b854c50bab4be3b634822537f2243a71", "ref_doc_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1"}, "f2be3dbb-9f85-40ce-aa6d-1a15be47da85": {"doc_hash": "edc01e81e89f781b98d0df548904cc32ca846f6820bc191785953115889854aa", "ref_doc_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1"}, "84905517-e5de-41e9-9b2e-3101069d5c6a": {"doc_hash": "ebffb4eef3b3907fe6593d2f79c794b7a9b645b4ce6102f2bf8681e238103bcb", "ref_doc_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43"}, "0c16548b-5780-4920-88e5-86d47e953f6f": {"doc_hash": "97e9072fa18fc37afe4f6bd8f2724d1e7a54d1e64d87fee00896089e67f8b8e2", "ref_doc_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43"}, "bbf061b9-8b1d-40e7-a362-2e4c6cc10482": {"doc_hash": "16139bb65627b16f302a87706e4b61a61a59b598fbef4d5a6131f11582c4d443", "ref_doc_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43"}, "45faa1dd-da6d-44bc-af05-483bc9eec234": {"doc_hash": "80ad598a66249237577cb0ce32f810a83007048fabcd7d4b9e3a01ec4c5958ac", "ref_doc_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0"}, "604e711a-856b-4297-9b82-aa683d59377f": {"doc_hash": "7cccc1711e5aaaa801a0996e6c7cf49528f31de947c214e475bda10930f09cb4", "ref_doc_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0"}, "988709bd-2347-47e6-b24e-ae2bc04b5bfe": {"doc_hash": "6b3a6a8fd2df4651fa19d9da9d24361f37159e24b087aab54a29d44a51b4b89d", "ref_doc_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0"}, "1cfe1e31-fb0c-4f43-84f9-8d43c18bbc04": {"doc_hash": "4a8c105918b11be9dd09366d943dd222bba20b24389d17a5d2db49c31564ed9b", "ref_doc_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0"}, "8e3e35fe-0c33-46da-a6d8-4a545836e180": {"doc_hash": "c968686ed5e3318ada7bc1194c88a85abb375d9726dc61fad9e0d99f2ce6c3af", "ref_doc_id": "ef468583-d539-4770-880b-c426c78c263a"}, "acebcc30-9af9-4538-ac34-ccc1a1f654dc": {"doc_hash": "b164430c445ccaa084c872efa92bb1ef6a1b617748a8fb74e993101f129f4f4d", "ref_doc_id": "ef468583-d539-4770-880b-c426c78c263a"}, "9de92264-9892-4ae5-b780-f02ebcc4cd18": {"doc_hash": "ca3d0cc2f93acc5fadf7e159bf43d1d537a90d2e874403c10308731b57799547", "ref_doc_id": "ef468583-d539-4770-880b-c426c78c263a"}, "fbbcd86c-e9f6-4c37-b866-9497aed7c341": {"doc_hash": "279a1719582b94f51e75cbd646bfe002f9866e048e4d7cd4b70bc4af9476cadc", "ref_doc_id": "5fc83925-7212-411a-a019-d68c8b498218"}, "58c00a9a-4e41-4f4c-83b0-4ce4de92f14d": {"doc_hash": "b4387a3f5789161d6f6426f66cd3d0624e77f2e6610550a92aed545f9a4fff06", "ref_doc_id": "5fc83925-7212-411a-a019-d68c8b498218"}, "f3174ecc-dc75-49df-9f86-6928eefdcedd": {"doc_hash": "8d00a039909d0859b698cd43abc37d33c00fd239c46543e61ffaf7230cf9006d", "ref_doc_id": "5fc83925-7212-411a-a019-d68c8b498218"}, "8bb1640e-c28b-4c7c-ae35-b0600d35f9b3": {"doc_hash": "f682a5d0faedcf1d05a306953b7f3dd5ce9d3941efa4afd79b9e670ef10cecbe", "ref_doc_id": "faac2a9d-906a-461e-ad8f-53521de60526"}, "025ae9aa-6cd2-4fb0-95f0-c95a57035c08": {"doc_hash": "5a6b6094867c919c5429fb33e521b609697cfd5523ac4b3bc6493d8bfd0298f1", "ref_doc_id": "faac2a9d-906a-461e-ad8f-53521de60526"}, "7f19ed60-711a-4de9-9cd9-b333128f8092": {"doc_hash": "340a2cdeb9497c16eb049c5069a1717da481801af22e47acf81ae468c0ad766a", "ref_doc_id": "faac2a9d-906a-461e-ad8f-53521de60526"}}, "docstore/ref_doc_info": {"d9ddd2dc-30d9-4337-933e-b831cb9c7b55": {"node_ids": ["4e57ad59-c5be-4ec1-aa41-8cf8d31eb74f", "f1a9b94d-bd46-4235-a4eb-59ab234bc959", "713ad29b-889a-4ff8-ac58-96afeaad203a", "9d6c6926-75f5-4963-9288-dc191cbe94ee", "d1aae363-1c24-4e1f-82a2-e117b536dadf"], "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d": {"node_ids": ["f202837d-f058-4f4b-addd-fe8b6709b05e", "d81e042b-7af5-423e-a049-794c77e2ffd0", "202347b5-5257-46bb-b1d1-d20e3b84111f", "9fd51aba-9b90-4cb2-84db-1581de56a8cb", "993c52c6-f359-481f-afef-331b10abf0d9"], "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "726f78ea-a895-431d-b878-6012d776af95": {"node_ids": ["efb4eb95-18a8-4217-bab3-6c156daa4868", "96525962-9cef-48a1-b6e0-67e6879b0e00", "266cef67-85d6-4439-8a7c-e151eab9ddd9"], "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "33caa5a1-013a-4a0f-b5f4-8beed73c71ca": {"node_ids": ["5f2a8196-865b-4a25-be7f-14751c4d296c", "e9c56fc3-a720-4bb7-8da9-44bedd294054", "c414d478-24d3-4e69-b736-11c40dbf5627", "ffd8a009-0603-43f8-86ae-491d781dbb9b", "7afc4b35-2051-496c-9dc6-5ab19c1f6f9c"], "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "839d015d-4373-4845-9225-2dfdfda0668f": {"node_ids": ["7685f0e3-aea1-4286-8940-a076ee1a3b1e", "154c5e33-945d-4535-92f9-2f156e597611", "7f90d0d7-dddb-4bc3-861a-e3e8d9e1b066", "2093b7c7-9941-4bfb-8374-b96b7cf13118", "d72eaf60-f15d-4f87-a528-23c8bf81925f"], "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "a7bce5eb-0717-49fa-a80f-f515e38381d1": {"node_ids": ["b6052773-ca0f-43cc-80a0-aa1d18100ee5", "e4566292-9640-4c65-b4ce-1894f6ade08e", "ba4c0e99-d6dd-426a-8a59-778ed4689a93", "f2be3dbb-9f85-40ce-aa6d-1a15be47da85"], "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43": {"node_ids": ["84905517-e5de-41e9-9b2e-3101069d5c6a", "0c16548b-5780-4920-88e5-86d47e953f6f", "bbf061b9-8b1d-40e7-a362-2e4c6cc10482"], "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0": {"node_ids": ["45faa1dd-da6d-44bc-af05-483bc9eec234", "604e711a-856b-4297-9b82-aa683d59377f", "988709bd-2347-47e6-b24e-ae2bc04b5bfe", "1cfe1e31-fb0c-4f43-84f9-8d43c18bbc04"], "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "ef468583-d539-4770-880b-c426c78c263a": {"node_ids": ["8e3e35fe-0c33-46da-a6d8-4a545836e180", "acebcc30-9af9-4538-ac34-ccc1a1f654dc", "9de92264-9892-4ae5-b780-f02ebcc4cd18"], "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "5fc83925-7212-411a-a019-d68c8b498218": {"node_ids": ["fbbcd86c-e9f6-4c37-b866-9497aed7c341", "58c00a9a-4e41-4f4c-83b0-4ce4de92f14d", "f3174ecc-dc75-49df-9f86-6928eefdcedd"], "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}, "faac2a9d-906a-461e-ad8f-53521de60526": {"node_ids": ["8bb1640e-c28b-4c7c-ae35-b0600d35f9b3", "025ae9aa-6cd2-4fb0-95f0-c95a57035c08", "7f19ed60-711a-4de9-9cd9-b333128f8092"], "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}}}, "docstore/data": {"4e57ad59-c5be-4ec1-aa41-8cf8d31eb74f": {"__data__": {"id_": "4e57ad59-c5be-4ec1-aa41-8cf8d31eb74f", "embedding": null, "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55", "node_type": "4", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "1ddbdbf7e821d358af42f4d1d3b3cb78d8cd4de77fa7ca5430bcdf7cea32f25f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "HTML & CSS \u2014 Complete Notes\r\nOverview (short)\r\n\r\nHTML (HyperText Markup Language) \u2014 the structure and semantic content of web pages: headings, paragraphs, lists, links, images, forms, sections, etc.\r\n\r\nCSS (Cascading Style Sheets) \u2014 the presentation: layout, colors, typography, responsive behavior, animations.\r\nTogether they form the front-end foundation for web pages (HTML = semantics/content; CSS = visual layer).\r\n\r\nContents (what\u2019s inside these notes)\r\n\r\nHTML fundamentals & document anatomy\r\n\r\nSemantic HTML & accessibility (a11y)\r\n\r\nCommon HTML elements (text, lists, images, media, links, forms)\r\n\r\nMetadata, SEO basics & social meta tags\r\n\r\nCSS fundamentals: syntax, cascade, specificity, box model\r\n\r\nSelectors & combinators, pseudo-classes/elements\r\n\r\nLayout: display types, floats (legacy), Flexbox, Grid, positioning\r\n\r\nResponsive design, media queries, images, & responsive typography\r\n\r\nStyling techniques: variables, functions, units, color systems\r\n\r\nTransitions, transforms, animations, and performance tips\r\n\r\nForms styling, validation & progressive enhancement\r\n\r\nAccessibility best practices (keyboard, ARIA, focus, contrast)\r\n\r\nTools & workflows: preprocessors, build tools, linters, dev tools\r\n\r\nPerformance & optimisation checklist (critical CSS, fonts, images)\r\n\r\nCSS architectures & naming conventions (BEM, OOCSS, Atomic, Utility-first)\r\n\r\nExample project (HTML + CSS skeleton + responsive layout)\r\n\r\nLearning resources & next steps\r\n\r\n1 \u2014 HTML fundamentals & document anatomy\r\n\r\nMinimal valid HTML5 document:\r\n\r\nhtml\r\nCopy\r\nEdit\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n  <title>Page Title</title>\r\n  <link rel=\"stylesheet\" href=\"styles.css\" />\r\n</head>\r\n<body>\r\n  <!-- content -->\r\n</body>\r\n</html>\r\n<!doctype html> \u2014 triggers standards mode (HTML5).\r\n\r\n<html lang=\"xx\"> \u2014 set language for accessibility & search engines.\r\n\r\n<meta charset=\"utf-8\"> \u2014 character encoding.\r\n\r\n<meta name=\"viewport\" ...> \u2014 essential for responsive on mobile.\r\n\r\n<title> \u2014 required for SEO and browser tabs.\r\n\r\n<link rel=\"stylesheet\"> and <script src=\"\"> for external resources.\r\n\r\n2 \u2014 Semantic HTML & accessibility (why it matters)\r\n\r\nSemantic tags (e.g., <header>, <nav>, <main>, <article>, <section>, <aside>, <footer>) improve:\r\n\r\nMachine readability (search engines),\r\n\r\nAccessibility (screen readers),\r\n\r\nMaintainability and developer clarity.\r\n\r\nUse headings <h1>\u2192<h6> in a hierarchical order (don\u2019t skip levels arbitrarily).\r\n\r\nLandmark regions allow screen readers / AT to navigate (e.g., <main>, <nav>).\r\n\r\nPrefer semantic tags over generic <div>s where possible.\r\n\r\n3 \u2014 Common HTML elements (quick catalog)\r\n\r\nText content: <p>, <h1>\u2026<h6>, <blockquote>, <cite>, <q>, <small>, <strong>, <em>, <mark>.\r\n\r\nInline vs block: <span> (inline) vs <div> (block).\r\n\r\nLinks: <a href=\"...\"> \u2014 use rel=\"noopener noreferrer\" on external links opened in new tabs (target=\"_blank\").\r\n\r\nLists: <ul>, <ol>, <li>.\r\n\r\nImages & responsive images:\r\n\r\nBasic: <img src=\"photo.jpg\" alt=\"description\"> \u2014 ALWAYS include meaningful alt.\r\n\r\nSrcset/picture (responsive): use srcset/sizes or <picture> with <source media=...> to serve different images per viewport/resolution.\r\n\r\nMedia: <audio>, <video>, with controls, autoplay (be careful), preload, muted.\r\n\r\nTables: <table>, <thead>, <tbody>, <tfoot>, <tr>, <th>, <td> \u2014 use for tabular data only. Include captions and summaries where helpful.\r\n\r\nForms: <form>, <input>, <textarea>, <select>, <label>, <button>, input types (email, tel, url, number, date, search, file, password, etc.). Use <label for=\"id\"> or wrap <input> inside <label>.\r\n\r\n4 \u2014 Metadata, SEO basics & social meta tags\r\n\r\nImportant meta tags:\r\n\r\nmeta name=\"description\" content=\"...\" \u2014 short page summary.\r\n\r\nlink rel=\"canonical\" href=\"...\" \u2014 canonical URL to prevent duplicate content issues.\r\n\r\nSocial/Open Graph (example):\r\n\r\nhtml\r\nCopy\r\nEdit\r\n<meta property=\"og:title\" content=\"Page title\">\r\n<meta property=\"og:description\" content=\"Short description\">\r\n<meta property=\"og:image\" content=\"https://example.com/preview.png\">\r\n<meta name=\"twitter:card\" content=\"summary_large_image\">\r\nRobots & indexing: meta name=\"robots\" content=\"index,follow\" or use noindex for dev pages.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4291, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1a9b94d-bd46-4235-a4eb-59ab234bc959": {"__data__": {"id_": "f1a9b94d-bd46-4235-a4eb-59ab234bc959", "embedding": null, "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55", "node_type": "4", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "1ddbdbf7e821d358af42f4d1d3b3cb78d8cd4de77fa7ca5430bcdf7cea32f25f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e57ad59-c5be-4ec1-aa41-8cf8d31eb74f", "node_type": "1", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "add74410383d9fd078d087aacb794e23f0d5f7900a194aee3e78d3f0c7cb9e8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Social/Open Graph (example):\r\n\r\nhtml\r\nCopy\r\nEdit\r\n<meta property=\"og:title\" content=\"Page title\">\r\n<meta property=\"og:description\" content=\"Short description\">\r\n<meta property=\"og:image\" content=\"https://example.com/preview.png\">\r\n<meta name=\"twitter:card\" content=\"summary_large_image\">\r\nRobots & indexing: meta name=\"robots\" content=\"index,follow\" or use noindex for dev pages.\r\n\r\nStructured data (JSON-LD) can help SERPs: embed application/ld+json for recipes, articles, events.\r\n\r\n5 \u2014 CSS fundamentals: syntax, cascade, specificity, box model\r\n\r\nCSS syntax: selector { property: value; }\r\n\r\nCascade & source order: later rules override earlier ones of same specificity.\r\n\r\nSpecificity basics:\r\n\r\nInline styles = highest (e.g., style=\"...\")\r\n\r\nIDs #id (100) > classes .class / attributes [attr] / pseudo-classes :hover (10) > element selectors div / pseudo-elements ::before (1)\r\n\r\n!important overrides specificity \u2014 avoid it except for emergencies.\r\n\r\nBox model:\r\n\r\ncontent \u2192 padding \u2192 border \u2192 margin.\r\n\r\nbox-sizing: border-box; is recommended (makes width include padding + border).\r\n\r\ncss\r\nCopy\r\nEdit\r\n* { box-sizing: border-box; }\r\n6 \u2014 Selectors & combinators, pseudo-classes/elements\r\n\r\nBasic selectors: element div, class .btn, id #main, attribute [type=\"text\"].\r\n\r\nCombinators:\r\n\r\nDescendant: nav a\r\n\r\nChild: ul > li\r\n\r\nAdjacent sibling: h1 + p\r\n\r\nGeneral sibling: h1 ~ p\r\n\r\nPseudo-classes: :hover, :focus, :active, :checked, :nth-child(n), :first-of-type, :last-child.\r\n\r\nPseudo-elements: ::before, ::after, ::first-letter, ::selection.\r\n\r\nModern selectors: :not(), :is(), :where() \u2014 :where() has zero specificity. Newer ones include :has() (container/parent selector \u2014 support can vary by browser; check compatibility when using).\r\n\r\n7 \u2014 Layout techniques\r\n\r\ndisplay types: block, inline, inline-block, none, flex, grid, table, flow-root.\r\n\r\nLegacy layout:\r\n\r\nFloats & clears \u2014 historically used for multi-column layouts; now largely replaced by Flexbox/Grid.\r\n\r\nposition: static (default), relative, absolute, fixed, sticky.\r\n\r\nFlexbox (one-dimensional, row or column):\r\n\r\nContainer: display: flex; flex-direction: row|column; justify-content; align-items; flex-wrap; gap;\r\n\r\nItems: flex: 1 1 auto; order; align-self;\r\n\r\nCSS Grid (two-dimensional):\r\n\r\nContainer: display: grid; grid-template-columns; grid-template-rows; gap; grid-auto-flow;\r\n\r\nPlace items explicitly with grid-column and grid-row or use named areas.\r\n\r\nWhen to use which:\r\n\r\nFlexbox for single-axis layouts: navbars, center alignment, small component arrangement.\r\n\r\nGrid for full-page or two-dimensional layouts: dashboards, complex cards grids.\r\n\r\n8 \u2014 Responsive design & images\r\n\r\nUse mobile-first CSS (styles for small screens first, then media queries for larger).\r\n\r\nExample breakpoints: min-width queries: 480px, 768px, 1024px, 1280px (tailor to your project).\r\n\r\ncss\r\nCopy\r\nEdit\r\n/* mobile-first */\r\n.container { padding: 1rem; }\r\n@media (min-width: 768px) {\r\n  .container { padding: 2rem; }\r\n}\r\nResponsive images:\r\n\r\nsrcset + sizes:\r\n\r\nhtml\r\nCopy\r\nEdit\r\n<img src=\"small.jpg\"\r\n     srcset=\"small.jpg 480w, medium.jpg 800w, large.jpg 1200w\"\r\n     sizes=\"(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 33vw\"\r\n     alt=\"...\">\r\n<picture> for art-direction: choose totally different crops per viewport.\r\n\r\nResponsive typography:\r\n\r\nUse fluid sizes with clamp() and vw units:\r\n\r\ncss\r\nCopy\r\nEdit\r\nh1 {\r\n  font-size: clamp(1.5rem, 3vw + 1rem, 3rem);\r\n}\r\n9 \u2014 Styling techniques: variables, units, color\r\n\r\nCSS variables (custom properties):\r\n\r\ncss\r\nCopy\r\nEdit\r\n:root {\r\n  --brand: #0b5fff;\r\n  --padding: 1rem;\r\n}\r\n.button { background: var(--brand); padding: var(--padding); }\r\nUnits:\r\n\r\nAbsolute: px (device pixel units)\r\n\r\nRelative: em, rem (root/em based), %, vh/vw, fr (Grid fractional unit)\r\n\r\nUse rem for consistent scalable typography; em for component-relative sizing.\r\n\r\nColors:\r\n\r\nHex #RRGGBB, #RGB, rgba rgba(255,0,0,0.5), hex8 with alpha, hsl() & hsla() \u2014 hsl often easier for harmonious themes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3993, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "713ad29b-889a-4ff8-ac58-96afeaad203a": {"__data__": {"id_": "713ad29b-889a-4ff8-ac58-96afeaad203a", "embedding": null, "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55", "node_type": "4", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "1ddbdbf7e821d358af42f4d1d3b3cb78d8cd4de77fa7ca5430bcdf7cea32f25f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1a9b94d-bd46-4235-a4eb-59ab234bc959", "node_type": "1", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "7faa21098a028c6f3ff824be7039353d1b4484afefba15577b33df08224c5018", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Colors:\r\n\r\nHex #RRGGBB, #RGB, rgba rgba(255,0,0,0.5), hex8 with alpha, hsl() & hsla() \u2014 hsl often easier for harmonious themes.\r\n\r\nDark mode: prefers-color-scheme media query:\r\n\r\ncss\r\nCopy\r\nEdit\r\n@media (prefers-color-scheme: dark) {\r\n  :root { --bg: #111; --text: #eee; }\r\n}\r\n10 \u2014 Transitions, transforms & animations\r\n\r\nTransforms: transform: translateX(), translateY(), scale(), rotate(), skew().\r\n\r\nTransitions (smooth property changes):\r\n\r\ncss\r\nCopy\r\nEdit\r\n.button { transition: background-color 0.2s ease, transform 0.2s ease; }\r\n.button:hover { transform: translateY(-4px); }\r\nKeyframe animations:\r\n\r\ncss\r\nCopy\r\nEdit\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(10px); }\r\n  to { opacity: 1; transform: none; }\r\n}\r\n.fade-in { animation: fadeIn 0.6s ease both; }\r\nPerformance tip: animate transform & opacity where possible (GPU-accelerated) rather than animating layout-changing properties like width, height, top, left (these cause reflow & are more expensive).\r\n\r\n11 \u2014 Forms: styling, validation & UX\r\n\r\nNative validation attributes: required, min, max, pattern, type=\"email\", type=\"url\", inputmode.\r\n\r\nCustom validation: Constraint Validation API (checkValidity(), setCustomValidity()) and reportValidity().\r\n\r\nUX best practices:\r\n\r\nAlways pair <label> with <input> (and use aria-describedby for help/error text).\r\n\r\nUse proper input types for mobile keyboards.\r\n\r\nUse autocomplete, autofocus sparingly.\r\n\r\nInline error messages and accessible alerts for screen readers.\r\n\r\nStyling form controls: browsers render form controls differently \u2014 consider normalized base styles or use custom controls for consistent look.\r\n\r\n12 \u2014 Accessibility (a11y) practical checklist\r\n\r\nUse semantic HTML where possible.\r\n\r\nProvide alt for images (decorative images use alt=\"\").\r\n\r\nEnsure keyboard navigability (tab order, visible focus states).\r\n\r\nUse aria-* attributes only when semantics cannot be expressed in native HTML (e.g., complex widgets).\r\n\r\nProvide skip links: <a class=\"skip-link\" href=\"#main\">Skip to main content</a>.\r\n\r\nColor contrast: follow WCAG contrast ratios (text contrast at least 4.5:1 for normal text ideally).\r\n\r\nLabel form fields and associate errors with aria-describedby.\r\n\r\nTest with screen readers (NVDA, VoiceOver) and keyboard-only navigation.\r\n\r\nDon\u2019t rely only on color to convey information.\r\n\r\n13 \u2014 Tools & developer workflow\r\n\r\nDevTools (Chrome/Firefox/Edge/Safari): Elements inspector, styles, layout, performance profiler, network throttling.\r\n\r\nLive reloading servers: Live Server, Vite, Parcel, Webpack Dev Server.\r\n\r\nBuild tools: npm scripts, Webpack, Rollup, Parcel, Vite (modern, fast).\r\n\r\nCSS preprocessors: Sass (SCSS), LESS, Stylus \u2014 add variables, nesting, mixins; but modern CSS variables reduce some needs.\r\n\r\nPostCSS + Autoprefixer \u2014 automatically add vendor prefixes.\r\n\r\nLinters & formatters: stylelint (CSS linter), prettier (formatting).\r\n\r\nAccessibility testing: axe-core, Lighthouse Accessibility audits.\r\n\r\n14 \u2014 Performance & optimization (practical)\r\n\r\nCritical path & render optimization:\r\n\r\nInline critical CSS for above-the-fold content; defer the rest. (Be careful \u2014 keep inline CSS small.)\r\n\r\nMinify and compress CSS & HTML.\r\n\r\nUse rel=\"preload\" for fonts and critical assets, rel=\"preconnect\" for external origins.\r\n\r\nFonts:\r\n\r\nUse font-display: swap; to avoid invisible text. Limit custom font weights & subsets. Consider variable fonts.\r\n\r\nImages:\r\n\r\nUse modern formats (WebP, AVIF) where possible; compress & serve responsive sizes.\r\n\r\nLazy-load images: <img loading=\"lazy\" src=\"...\">.\r\n\r\nReduce CSS bloat:\r\n\r\nDon\u2019t ship unused styles; tree-shake or use purge tools for utility frameworks (e.g., Tailwind purge).\r\n\r\nHTTP/2 and server optimizations (concatenate requests less important on HTTP/2; prefer many small files in dev, use caching).\r\n\r\nAudit with Lighthouse to find render-blocking resources and layout shifts (CLS).\r\n\r\n15 \u2014 CSS architectures & naming conventions\r\n\r\nBEM (Block__Element--Modifier): .card, .card__title, .card--featured \u2014 predictable & explicit.\r\n\r\nOOCSS: separate structure from skin, reuse classes.\r\n\r\nSMACSS: categorizes styles into base, layout, module, state, theme.\r\n\r\nUtility-first / Atomic CSS: small utility classes (Tailwind CSS) \u2014 very productive but requires discipline on naming & purge.\r\nChoose a style and be consistent across the project.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4359, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d6c6926-75f5-4963-9288-dc191cbe94ee": {"__data__": {"id_": "9d6c6926-75f5-4963-9288-dc191cbe94ee", "embedding": null, "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55", "node_type": "4", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "1ddbdbf7e821d358af42f4d1d3b3cb78d8cd4de77fa7ca5430bcdf7cea32f25f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "713ad29b-889a-4ff8-ac58-96afeaad203a", "node_type": "1", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "da93f05e1e4d18aa2a7e10fc3f4979c615661ee65fc733e26a6767773370baef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "15 \u2014 CSS architectures & naming conventions\r\n\r\nBEM (Block__Element--Modifier): .card, .card__title, .card--featured \u2014 predictable & explicit.\r\n\r\nOOCSS: separate structure from skin, reuse classes.\r\n\r\nSMACSS: categorizes styles into base, layout, module, state, theme.\r\n\r\nUtility-first / Atomic CSS: small utility classes (Tailwind CSS) \u2014 very productive but requires discipline on naming & purge.\r\nChoose a style and be consistent across the project.\r\n\r\n16 \u2014 Example project skeleton (simple responsive page)\r\n\r\nindex.html\r\n\r\nhtml\r\nCopy\r\nEdit\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n  <title>Demo Page</title>\r\n  <link rel=\"stylesheet\" href=\"styles.css\" />\r\n</head>\r\n<body>\r\n  <a class=\"skip-link\" href=\"#main\">Skip to main content</a>\r\n  <header class=\"site-header\">\r\n    <div class=\"container\">\r\n      <a class=\"logo\" href=\"/\">MySite</a>\r\n      <nav class=\"site-nav\" aria-label=\"Main navigation\">\r\n        <ul>\r\n          <li><a href=\"#features\">Features</a></li>\r\n          <li><a href=\"#pricing\">Pricing</a></li>\r\n          <li><a href=\"#contact\">Contact</a></li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </header>\r\n\r\n  <main id=\"main\">\r\n    <section class=\"hero\">\r\n      <div class=\"container\">\r\n        <h1>Welcome to MySite</h1>\r\n        <p>Short pitch.</p>\r\n        <a class=\"btn\" href=\"#contact\">Get started</a>\r\n      </div>\r\n    </section>\r\n\r\n    <section id=\"features\" class=\"features container\">\r\n      <article class=\"feature\">...</article>\r\n      <article class=\"feature\">...</article>\r\n      <article class=\"feature\">...</article>\r\n    </section>\r\n  </main>\r\n\r\n  <footer class=\"site-footer\">\r\n    <div class=\"container\">\u00a9 2025 MySite</div>\r\n  </footer>\r\n</body>\r\n</html>\r\nstyles.css (high-level)\r\n\r\ncss\r\nCopy\r\nEdit\r\n:root{\r\n  --gap: 1rem;\r\n  --container-max: 1100px;\r\n  --brand: #0b5fff;\r\n  --bg: #fff;\r\n  --text: #222;\r\n}\r\n*{box-sizing:border-box}\r\nbody{margin:0;font-family:system-ui,-apple-system,\"Segoe UI\",Roboto,Arial; color:var(--text); background:var(--bg); line-height:1.45}\r\n.container{max-width:var(--container-max); margin:0 auto; padding:0 1rem}\r\n.site-header{background:#fff; border-bottom:1px solid #eee}\r\n.site-nav ul{display:flex; gap:1rem; list-style:none; margin:0; padding:0}\r\n.hero{padding:4rem 0; text-align:center; background:linear-gradient(180deg,#f6f8ff,#fff)}\r\n.features{display:grid; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); gap:var(--gap)}\r\n.btn{display:inline-block;padding:.6rem 1rem;background:var(--brand);color:#fff;border-radius:6px;text-decoration:none}\r\n@media (min-width:768px){\r\n  .site-nav ul{gap:2rem}\r\n  .hero{padding:6rem 0}\r\n}\r\nThis gives a responsive grid for the .features section and a mobile-first layout.\r\n\r\n17 \u2014 Accessibility & testing quick checklist\r\n\r\nUse Lighthouse / axe to test pages.\r\n\r\nKeyboard test: Tab through interactive elements, ensure focus styles visible, no traps.\r\n\r\nContrast test: ensure readable colors.\r\n\r\nScreen reader test: check landmark roles and reading order.\r\n\r\nHTML validation: run validators (W3C validator) during development.\r\n\r\n18 \u2014 Modern & emerging CSS features to be aware of\r\n\r\nCSS Grid Level 2 (subgrid support in some browsers).\r\n\r\nContainer queries \u2014 let styles depend on the container size (useful for components that adapt independent of viewport).\r\n\r\n:has() \u2014 parent/relational selector that enables styles when a child matches a selector.\r\n\r\nCSS logical properties (margin-inline-start, padding-block) \u2014 useful for internationalization and writing modes.\r\n\r\nCSS accent-color, color-scheme, system color integration, and @layer / @scope for layering and cascade control.\r\n\r\nNote: these are powerful but browser support can vary. Check current compatibility before use in production (polyfills or progressive enhancement can help).\r\n\r\n19 \u2014 Performance & SEO checklist (practical)\r\n\r\nKeep HTML semantic & minimal.\r\n\r\nDefer non-essential scripts (async/defer) and put scripts at end of body if synchronous.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4037, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d1aae363-1c24-4e1f-82a2-e117b536dadf": {"__data__": {"id_": "d1aae363-1c24-4e1f-82a2-e117b536dadf", "embedding": null, "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ddd2dc-30d9-4337-933e-b831cb9c7b55", "node_type": "4", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "1ddbdbf7e821d358af42f4d1d3b3cb78d8cd4de77fa7ca5430bcdf7cea32f25f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d6c6926-75f5-4963-9288-dc191cbe94ee", "node_type": "1", "metadata": {"file_path": "data\\notes\\html & css.txt", "file_name": "html & css.txt", "file_type": "text/plain", "file_size": 19058, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "4938c56c27af60a57ab32971f9e46081c28a981bde875c5e7610ac68b35bdff4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CSS accent-color, color-scheme, system color integration, and @layer / @scope for layering and cascade control.\r\n\r\nNote: these are powerful but browser support can vary. Check current compatibility before use in production (polyfills or progressive enhancement can help).\r\n\r\n19 \u2014 Performance & SEO checklist (practical)\r\n\r\nKeep HTML semantic & minimal.\r\n\r\nDefer non-essential scripts (async/defer) and put scripts at end of body if synchronous.\r\n\r\nCritical CSS optimization for above-the-fold.\r\n\r\nCompress images & use responsive images.\r\n\r\nUse caching headers and CDNs for assets.\r\n\r\nUse semantic tags & headings properly for SEO.\r\n\r\nProvide structured data for rich snippets where appropriate.\r\n\r\n20 \u2014 Common mistakes & pitfalls\r\n\r\nOverusing !important \u2014 leads to brittle CSS.\r\n\r\nDeeply nested selectors \u2014 makes override hard and specificity complicated.\r\n\r\nUsing <div>/<span> when semantic tags exist.\r\n\r\nLarge monolithic CSS files with unused styles \u2014 use modularization or purge approaches.\r\n\r\nNot testing across screen sizes and assistive tech.\r\n\r\n21 \u2014 Advanced topics & integrations\r\n\r\nCSS-in-JS: styled-components, Emotion \u2014 useful in React ecosystems but think about performance and SSR.\r\n\r\nUtility frameworks: Tailwind CSS \u2014 atomic utility classes and build-time purging.\r\n\r\nComponent libraries: Bootstrap, Material UI, Bulma \u2014 accelerate development.\r\n\r\nWeb Components: <my-element> with Shadow DOM \u2014 encapsulated styles and templates. Use :host, ::slotted, and shadow-piercing selectors.\r\n\r\nProgressive Web Apps (PWA): manifests, service workers, offline caching (styles and HTML play a role in initial UX).\r\n\r\n22 \u2014 Learning path & exercises\r\n\r\nBeginner: build static pages \u2014 landing page, responsive nav, blog post template.\r\n\r\nIntermediate: build small component library (buttons, cards) with theming using CSS variables. Add accessibility features.\r\n\r\nAdvanced: build a responsive dashboard layout using CSS Grid, use container queries, and optimize loading & critical CSS. Add animations that don't jank (using transform & opacity).\r\n\r\n23 \u2014 Useful CLI / dev commands & tips\r\n\r\nnpx live-server or npx vite for a dev server with hot reload.\r\n\r\nnpx prettier --write . to format HTML/CSS.\r\n\r\nnpx stylelint \"**/*.css\" to lint styles.\r\n\r\nUse browser DevTools to edit CSS live, measure layout & paint times, and test various network conditions.\r\n\r\n24 \u2014 Quick reference cheat-sheet (common tags & CSS properties)\r\n\r\nHTML (common):\r\n\r\n<!doctype html>, <html lang=\"\">, <head>, <meta>, <title>, <link>, <script>, <header>, <nav>, <main>, <article>, <section>, <aside>, <footer>, <img alt=\"\">, <a href=\"\">, <form>, <input>, <button>, <label>, <ul>, <ol>, <li>, <table>, <figure>, <figcaption>\r\n\r\nCSS core:\r\n\r\nBox model: box-sizing, width, height, padding, border, margin\r\n\r\nLayout: display, position, top/right/bottom/left, float, clear\r\n\r\nFlex: display:flex, flex-direction, justify-content, align-items, gap\r\n\r\nGrid: display:grid, grid-template-columns, grid-template-rows, gap, grid-area\r\n\r\nTypo: font-family, font-size, line-height, font-weight, text-align\r\n\r\nColors: color, background, background-image, linear-gradient\r\n\r\nEffects: box-shadow, border-radius, transform, transition, animation\r\n\r\n25 \u2014 What I can make for you next (options)\r\n\r\nA printable one-page cheat sheet / PDF summarizing the essentials.\r\n\r\nA step-by-step responsive landing page tutorial (full code + Git repo layout + build (Vite) + deployment notes).\r\n\r\nA deep dive into a topic: CSS Grid + container queries examples, or accessibility checklist with tests and screen reader examples.\r\n\r\nA set of practical exercises with solutions (beginner \u2192 advanced).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f202837d-f058-4f4b-addd-fe8b6709b05e": {"__data__": {"id_": "f202837d-f058-4f4b-addd-fe8b6709b05e", "embedding": null, "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d", "node_type": "4", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "fa81a15607a6e7b1b85ed5181bd609d08bd7a567f5f7af7190b26e6f21273785", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "JavaScript \u2014 Complete Detailed Notes\r\n1. What is JavaScript (short)\r\nJavaScript (JS) is a high-level, dynamic, single-threaded (conceptually) language originally designed for the browser.\r\n\r\nIt\u2019s standardized as ECMAScript (ES) and runs in many environments (browsers, Node.js, Deno, embedded).\r\n\r\nMulti-paradigm: procedural, object-oriented (prototype-based), and functional.\r\n\r\n2. History & Standards\r\nCreated by Brendan Eich (Netscape) in 1995.\r\n\r\nStandardized by ECMA International as ECMAScript (ES). Major milestones: ES5 (2009), ES6/ES2015 (huge feature set), then yearly releases (ES2016, ES2017, \u2026).\r\n\r\nThe spec (ECMAScript) defines syntax, semantics, built-in objects and algorithms. Browser and runtime engines (V8, SpiderMonkey, JavaScriptCore, Chakra) implement it.\r\n\r\n3. JavaScript environments / engines\r\nV8 (Chrome, Node.js) \u2014 high-performance engine with JIT.\r\n\r\nSpiderMonkey (Firefox), JavaScriptCore (Safari), Chakra (older Edge).\r\n\r\nNode.js \u2014 runtime built on V8 + libuv (I/O).\r\n\r\nDeno \u2014 secure modern runtime (also built on V8), uses ES modules & TypeScript first-class.\r\n\r\n4. Language fundamentals & syntax\r\nHello world\r\njs\r\nCopy\r\nEdit\r\nconsole.log(\"Hello, JavaScript!\");\r\nDeclarations\r\nvar (function-scoped, hoisted \u2014 avoid in modern code).\r\n\r\nlet (block-scoped).\r\n\r\nconst (block-scoped, immutable binding; object contents can still change).\r\n\r\nData types (primitive vs objects)\r\nPrimitive: undefined, null, boolean, number, bigint, string, symbol.\r\n\r\nObject: arrays, functions, plain objects, Dates, RegExp, Map, Set, WeakMap, WeakSet, etc.\r\n\r\nOperators\r\nArithmetic: + - * / % **\r\n\r\nComparison: === !== == != < > <= >= (prefer ===)\r\n\r\nLogical: && || !\r\n\r\nNullish coalescing: ??\r\n\r\nOptional chaining: ?.\r\n\r\nTernary: condition ? a : b\r\n\r\nSpread/rest: ... (used in arrays, function args, object shallow copy)\r\n\r\n5. Hoisting, scope & closures\r\nHoisting\r\nFunction declarations and var declarations are hoisted (declarations moved to top); let/const are hoisted but in a Temporal Dead Zone (TDZ) until initialized.\r\n\r\njs\r\nCopy\r\nEdit\r\nconsole.log(a); // undefined (var)\r\nvar a = 1;\r\n\r\nconsole.log(b); // ReferenceError (let)\r\nlet b = 2;\r\nScope\r\nGlobal, function, and block scope (with let/const). Arrow functions do not create their own this or arguments.\r\n\r\nClosures\r\nA function remembers the environment where it was created.\r\n\r\njs\r\nCopy\r\nEdit\r\nfunction makeCounter() {\r\n  let count = 0;\r\n  return function() { return ++count; };\r\n}\r\nconst c = makeCounter();\r\nc(); // 1\r\nc(); // 2\r\nClosures are powerful for encapsulation but can hold references and cause memory to persist.\r\n\r\n6. this and call/apply/bind\r\nthis depends on how a function is called:\r\n\r\nSimple call: this -> global object (or undefined in strict mode).\r\n\r\nMethod call obj.method(): this \u2192 obj.\r\n\r\nConstructor new Foo(): this \u2192 newly created object.\r\n\r\ncall/apply/bind allow explicit binding.\r\n\r\nArrow functions: lexical this (inherits this from the surrounding scope).\r\n\r\njs\r\nCopy\r\nEdit\r\nconst o = { x: 1, getX() { return this.x; } };\r\no.getX(); // 1\r\n\r\nfunction f() { return this; }\r\nf.call({a: 10}); // {a:10}\r\n\r\nconst arrow = () => this; // lexical\r\n7. Objects, prototypes, and inheritance\r\nJS uses prototype-based inheritance. Each object has an internal [[Prototype]] (often accessible via __proto__ or Object.getPrototypeOf()).\r\n\r\nObject.create(proto) creates an object with a specified prototype.\r\n\r\nFunctions used with new are constructors; their prototype property becomes the created object's [[Prototype]].\r\n\r\njs\r\nCopy\r\nEdit\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\nPerson.prototype.greet = function(){ console.log(`Hi ${this.name}`); }\r\nconst p = new Person('Riva');\r\np.greet();\r\nES6 class syntax is syntactic sugar over prototypes:\r\n\r\njs\r\nCopy\r\nEdit\r\nclass Person {\r\n  constructor(name) { this.name = name; }\r\n  greet() { console.log(`Hi ${this.name}`); }\r\n}\r\n8.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3868, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d81e042b-7af5-423e-a049-794c77e2ffd0": {"__data__": {"id_": "d81e042b-7af5-423e-a049-794c77e2ffd0", "embedding": null, "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d", "node_type": "4", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "fa81a15607a6e7b1b85ed5181bd609d08bd7a567f5f7af7190b26e6f21273785", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f202837d-f058-4f4b-addd-fe8b6709b05e", "node_type": "1", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "d2665e2a957bfe1613b947ddce1242fc12ece214ef2efe1e7471a108afe42657", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "js\r\nCopy\r\nEdit\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\nPerson.prototype.greet = function(){ console.log(`Hi ${this.name}`); }\r\nconst p = new Person('Riva');\r\np.greet();\r\nES6 class syntax is syntactic sugar over prototypes:\r\n\r\njs\r\nCopy\r\nEdit\r\nclass Person {\r\n  constructor(name) { this.name = name; }\r\n  greet() { console.log(`Hi ${this.name}`); }\r\n}\r\n8. Functions \u2014 forms and features\r\nFunction declaration (hoisted)\r\n\r\nFunction expression (anonymous or named)\r\n\r\nArrow function (shorter, lexical this)\r\n\r\nDefault parameters, rest parameters, named params via destructuring\r\n\r\nIIFE (Immediately Invoked Function Expression)\r\n\r\nGenerator functions with function* and yield\r\n\r\nAsync functions return promises (async / await)\r\n\r\nExamples:\r\n\r\njs\r\nCopy\r\nEdit\r\n// default & rest\r\nfunction sum(a=0, ...rest) { return rest.reduce((s,x) => s+x, a) }\r\n\r\n// arrow\r\nconst add = (a,b) => a+b;\r\n\r\n// generator\r\nfunction* idMaker() { let id=0; while(true) yield ++id; }\r\n9. Arrays & common operations\r\nArray creation: [], new Array()\r\n\r\nUseful methods: map, filter, reduce, forEach, find, findIndex, some, every, flat, flatMap, sort, slice, splice.\r\n\r\nIteration: for, for...of, forEach, for...in (use carefully, for...in iterates keys).\r\n\r\njs\r\nCopy\r\nEdit\r\nconst arr = [1,2,3];\r\nconst doubled = arr.map(x => x*2);\r\nconst filtered = arr.filter(x => x%2===1);\r\nconst sum = arr.reduce((s,x) => s + x, 0);\r\n10. Maps, Sets, WeakMap, WeakSet\r\nMap \u2013 key-value store allowing any key types.\r\n\r\nSet \u2013 unique value collection.\r\n\r\nWeakMap / WeakSet \u2013 keys are weakly referenced (helpful for avoiding memory leaks; keys must be objects).\r\n\r\njs\r\nCopy\r\nEdit\r\nconst m = new Map();\r\nm.set({id:1}, \"meta\");\r\nconst s = new Set([1,2,3]);\r\n11. Modules \u2014 ESM vs CommonJS\r\nES Modules (ESM): import/export (static), used in browsers natively and in modern Node (with .mjs or type: \"module\"). Support for tree-shaking by bundlers.\r\n\r\njs\r\nCopy\r\nEdit\r\n// util.js\r\nexport function add(a,b){ return a+b }\r\nexport default 42\r\n\r\n// main.js\r\nimport val, { add } from './util.js'\r\nCommonJS (CJS): require / module.exports (synchronous, dynamic), Node\u2019s traditional module system.\r\n\r\njs\r\nCopy\r\nEdit\r\nconst mod = require('./util')\r\nmodule.exports = ...\r\nDifferences: syntax, static analysis (ESM static), module caching, circular dependency behaviors, top-level this differences, import is async-capable (dynamic import() returns a promise), Node supports top-level await in ESM.\r\n\r\n12. Asynchronous JavaScript & the event loop (core)\r\nConcurrency model: single-threaded event loop + asynchronous I/O (non-blocking) via underlying system (libuv in Node).\r\n\r\nEvent loop basics (simplified): tasks (macrotasks) and microtasks queues.\r\n\r\nMacrotasks: setTimeout, setInterval, I/O callbacks, setImmediate (Node).\r\n\r\nMicrotasks: Promise callbacks (.then), queueMicrotask, process.nextTick (Node).\r\n\r\nMicrotasks run after current task completes but before the next macrotask.\r\n\r\nExample showing microtask priority:\r\n\r\njs\r\nCopy\r\nEdit\r\nconsole.log('start');\r\nsetTimeout(()=>console.log('timeout'), 0);\r\nPromise.resolve().then(()=>console.log('promise'));\r\nconsole.log('end');\r\n// start, end, promise, timeout\r\nPromises\r\nRepresent eventual result of async operation; can chain .then() and .catch(). Prefer async/await for readability.\r\n\r\njs\r\nCopy\r\nEdit\r\nfetch('/data').then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\r\nAsync/await\r\njs\r\nCopy\r\nEdit\r\nasync function getData(){\r\n  try {\r\n    const res = await fetch('/data');\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (e) { console.error(e); }\r\n}\r\nGenerators + async iterators\r\nGenerators (yield) allow pause/resume. With for await (const item of asyncIterable) you can iterate async streams.\r\n\r\n13. Error handling\r\ntry { } catch (e) { } finally { } for synchronous and awaited async errors.\r\n\r\nUnhandled promise rejections: Node may emit warnings or terminate depending on settings \u2014 always .catch promises.\r\n\r\n14. Browser APIs & DOM\r\nDOM (Document Object Model): document, querySelector, createElement, appendChild, classList, attributes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4100, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "202347b5-5257-46bb-b1d1-d20e3b84111f": {"__data__": {"id_": "202347b5-5257-46bb-b1d1-d20e3b84111f", "embedding": null, "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d", "node_type": "4", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "fa81a15607a6e7b1b85ed5181bd609d08bd7a567f5f7af7190b26e6f21273785", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d81e042b-7af5-423e-a049-794c77e2ffd0", "node_type": "1", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "5e76a6dd7bf4ee94b37cd7237b85eee1c493338f3584288e71126dcbca94a1c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "With for await (const item of asyncIterable) you can iterate async streams.\r\n\r\n13. Error handling\r\ntry { } catch (e) { } finally { } for synchronous and awaited async errors.\r\n\r\nUnhandled promise rejections: Node may emit warnings or terminate depending on settings \u2014 always .catch promises.\r\n\r\n14. Browser APIs & DOM\r\nDOM (Document Object Model): document, querySelector, createElement, appendChild, classList, attributes.\r\n\r\nEvents: addEventListener, event propagation (capturing \u2192 target \u2192 bubbling), stopPropagation, preventDefault.\r\n\r\nEvent delegation for performance: attach handler to parent and inspect event.target.\r\n\r\nFetch API: modern Promise-based HTTP client (better than XMLHttpRequest).\r\n\r\njs\r\nCopy\r\nEdit\r\nconst res = await fetch('/api');\r\nconst json = await res.json();\r\nImportant Web APIs: localStorage, sessionStorage, IndexedDB, History API, Service Workers, WebSockets, WebRTC, WebGL, Canvas, Notification, Geolocation, IntersectionObserver, ResizeObserver, Performance APIs.\r\n\r\n15. DOM manipulation example & event delegation\r\nhtml\r\nCopy\r\nEdit\r\n<ul id=\"list\">\r\n  <li data-id=\"1\">A</li><li data-id=\"2\">B</li>\r\n</ul>\r\n<script>\r\ndocument.getElementById('list').addEventListener('click', (e) => {\r\n  const li = e.target.closest('li');\r\n  if(!li) return;\r\n  console.log('clicked', li.dataset.id);\r\n});\r\n</script>\r\n16. Templates, shadow DOM & web components\r\nTemplate tag <template> holds inert DOM to clone later.\r\n\r\nShadow DOM provides encapsulated styling & markup for web components.\r\n\r\nCustom Elements (class MyEl extends HTMLElement) let you create reusable components with lifecycle callbacks.\r\n\r\n17. Performance & rendering\r\nBrowser render pipeline: DOM \u2192 CSSOM \u2192 render tree \u2192 layout (reflow) \u2192 paint \u2192 composite.\r\n\r\nAvoid layout thrashing (reading layout properties like offsetTop after writes causes reflow). Batch DOM reads/writes and use requestAnimationFrame for animations.\r\n\r\nPrefer transform and opacity for animations (GPU-accelerated), avoid animating costly properties.\r\n\r\nUse virtualization (windowing) for long lists, lazy loading, code-splitting, tree-shaking, and caching.\r\n\r\n18. Memory & common leaks\r\nClosures holding large objects, forgotten timers (setInterval), detached DOM nodes referenced by JS, global variables.\r\n\r\nFixes: clear timers, remove event listeners, avoid global caches, use WeakMap/WeakSet where appropriate, reuse nodes.\r\n\r\n19. Tooling \u2014 build, test, lint, format\r\nPackage managers: npm, yarn, pnpm.\r\n\r\nBundlers & tools: Webpack, Rollup, Parcel, esbuild, Vite (dev server + build).\r\n\r\nTranspilation & polyfills: Babel (use with @babel/preset-env and core-js for polyfills).\r\n\r\nLinters & formatters: ESLint (rules), Prettier (formatter), Stylelint (CSS).\r\n\r\nTesting: Jest (unit), Mocha + Chai, Jasmine, AVA, Karma, Cypress (E2E), Playwright (E2E).\r\n\r\nType checking: TypeScript (superset), JSDoc + // @ts-check, Flow (less common now).\r\n\r\nExample package.json scripts:\r\n\r\njson\r\nCopy\r\nEdit\r\n{\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"build\": \"vite build\",\r\n    \"test\": \"jest\",\r\n    \"lint\": \"eslint src --fix\"\r\n  }\r\n}\r\n20. Frameworks & libraries (ecosystem)\r\nUI frameworks: React, Vue, Angular, Svelte.\r\n\r\nFull-stack/meta frameworks: Next.js (React SSR/SSG), Nuxt (Vue), Remix, Sapper/SvelteKit.\r\n\r\nState management: Redux, MobX, Zustand, Recoil, Pinia.\r\n\r\nServer frameworks: Express, Koa, Fastify, Hapi (Node). Deno uses native ES modules and different web APIs.\r\n\r\nBundler-less modern dev: Vite + ESM + ESM-powered tools.\r\n\r\n21. Server-side JS (Node.js fundamentals)\r\nNode.js is event-driven, non-blocking I/O. Core modules: fs, http, path, crypto, stream, events, process, child_process.\r\n\r\nBuild a minimal HTTP server:\r\n\r\njs\r\nCopy\r\nEdit\r\nimport http from 'http'; // ESM in Node\r\nconst server = http.createServer((req, res) => {\r\n  res.writeHead(200, {'Content-Type':'text/plain'});\r\n  res.end('Hello Node');\r\n});\r\nserver.listen(3000);\r\nStreams: Readable, Writable, Transform for efficient I/O.\r\n\r\nClustering and worker threads for CPU-bound tasks (Worker Threads API).\r\n\r\nNative addons via N-API or node-gyp (C/C++). Use node:worker_threads for parallelism.\r\n\r\n22.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4126, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9fd51aba-9b90-4cb2-84db-1581de56a8cb": {"__data__": {"id_": "9fd51aba-9b90-4cb2-84db-1581de56a8cb", "embedding": null, "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d", "node_type": "4", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "fa81a15607a6e7b1b85ed5181bd609d08bd7a567f5f7af7190b26e6f21273785", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "202347b5-5257-46bb-b1d1-d20e3b84111f", "node_type": "1", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "8dbb865b565f9436a4e5ac2138eb2831c19d7a5481ee62f404bc6f471fa0b008", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Clustering and worker threads for CPU-bound tasks (Worker Threads API).\r\n\r\nNative addons via N-API or node-gyp (C/C++). Use node:worker_threads for parallelism.\r\n\r\n22. Security (web)\r\nXSS (Cross-Site Scripting): sanitize untrusted HTML, avoid innerHTML, use textContent, Trusted Types, CSP (Content Security Policy).\r\n\r\nCSRF: use SameSite cookies, CSRF tokens, double-submit cookies.\r\n\r\nCORS: configure server\u2019s Access-Control-Allow-* headers; browsers enforce cross-origin restrictions.\r\n\r\nHTTPS/TLS, secure cookies (Secure, HttpOnly).\r\n\r\nInput validation on server-side (never trust client).\r\n\r\nAvoid eval-like APIs, sanitize user content, use parameterized DB queries (prevent injection).\r\n\r\n23. Modern language features (ES6+ highlights)\r\nlet/const, arrow functions, classes, template literals, destructuring, default params, rest/spread, Promise, Symbol, Map/Set, WeakMap, Proxy, Reflect, async/await, optional chaining (?.), nullish coalescing (??), BigInt, globalThis, Intl i18n APIs, BigInt, String/Array/Object helpers.\r\n\r\n24. Best practices & style tips\r\nPrefer const for values that don\u2019t rebind; let otherwise \u2014 avoid var.\r\n\r\nUse strict equality ===.\r\n\r\nKeep functions small and pure when possible; favor immutability.\r\n\r\nAvoid deeply nested callbacks \u2014 use Promises/async-await.\r\n\r\nDocument types: adopt TypeScript or JSDoc for large projects.\r\n\r\nLint and format (ESLint, Prettier) in CI.\r\n\r\nAdd tests (unit + integration + end-to-end).\r\n\r\nUse semantic HTML + ARIA for accessibility in the UI.\r\n\r\n25. Debugging & profiling\r\nBrowser DevTools: breakpoints, watch expressions, call stack, network, performance profiling, memory snapshots, coverage.\r\n\r\nconsole.* (log, warn, error, table, time/timeEnd).\r\n\r\nNode inspector (node --inspect + Chrome DevTools).\r\n\r\nProfilers: Chrome DevTools profiler, clinic.js, 0x, node --prof.\r\n\r\nHeap snapshot analysis to find memory leaks.\r\n\r\n26. Deployment & production concerns\r\nBuild for production (minify, tree-shake, compress).\r\n\r\nUse source maps for debugging (but protect them in production).\r\n\r\nCDN for static assets, caching headers, long-term caching with hashed filenames.\r\n\r\nUse environment variables (not in client code) \u2014 vendors like Netlify, Vercel, Heroku, and cloud providers make deployments simple.\r\n\r\nMonitor (Sentry, Datadog), logs, health checks, graceful shutdowns, rate limiting.\r\n\r\n27. Interview topics & study checklist\r\nScopes, closures, hoisting.\r\n\r\nEvent loop, microtasks vs macrotasks.\r\n\r\nthis, call/apply/bind.\r\n\r\nPrototypes & inheritance, Object.create().\r\n\r\nPromises, async/await, error handling.\r\n\r\nES6 features: destructuring, rest/spread, arrow functions, classes.\r\n\r\nDOM manipulation & event delegation.\r\n\r\nPerformance: reflow/paint, debouncing/throttling, virtualization.\r\n\r\nNode.js basics: streams, events, buffers.\r\n\r\nSecurity basics (XSS, CSRF, CORS).\r\n\r\nTooling: bundlers, transpilers, eslint, testing frameworks.\r\n\r\n28. Quick code snippets & recipes\r\nDebounce / Throttle\r\njs\r\nCopy\r\nEdit\r\n// debounce\r\nfunction debounce(fn, wait){\r\n  let t;\r\n  return (...args) => { clearTimeout(t); t = setTimeout(()=>fn(...args), wait); };\r\n}\r\n\r\n// throttle\r\nfunction throttle(fn, wait){\r\n  let last = 0;\r\n  return (...args) => {\r\n    const now = Date.now();\r\n    if(now - last >= wait){ last = now; fn(...args); }\r\n  };\r\n}\r\nPromise \u2192 async\r\njs\r\nCopy\r\nEdit\r\n// promise\r\nfetch('/data').then(r => r.json()).then(console.log).catch(console.error);\r\n\r\n// async\r\nasync function run(){ try { const r = await fetch('/data'); console.log(await r.json()); } catch(e){ console.error(e); } }\r\nEvent loop demo\r\njs\r\nCopy\r\nEdit\r\nconsole.log('script start');\r\nsetTimeout(() => console.log('timeout'), 0);\r\nPromise.resolve().then(() => console.log('promise'));\r\nconsole.log('script end');\r\n// start, end, promise, timeout\r\nSimple Node server (Express)\r\njs\r\nCopy\r\nEdit\r\nimport express from 'express';\r\nconst app = express();\r\napp.get('/', (req, res) => res.send('Hello'));\r\napp.listen(3000);\r\n29. Learning path & resources\r\nStart: fundamentals (variables, control flow, functions, arrays, objects).\r\n\r\nIntermediate: closures, prototype, this, async patterns, DOM. Build small projects (todo app, fetch API).\r\n\r\nAdvanced: event loop, performance, Node.js, bundling, SSR, TypeScript, testing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4245, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "993c52c6-f359-481f-afef-331b10abf0d9": {"__data__": {"id_": "993c52c6-f359-481f-afef-331b10abf0d9", "embedding": null, "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d67b423e-f0ce-4cec-b9bb-2b6c67eb348d", "node_type": "4", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "fa81a15607a6e7b1b85ed5181bd609d08bd7a567f5f7af7190b26e6f21273785", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9fd51aba-9b90-4cb2-84db-1581de56a8cb", "node_type": "1", "metadata": {"file_path": "data\\notes\\java script.txt", "file_name": "java script.txt", "file_type": "text/plain", "file_size": 15870, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "b4ad3f9c154cad1f1119ae5c9b8669def1217a2a84483229859a155f25c56495", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Learning path & resources\r\nStart: fundamentals (variables, control flow, functions, arrays, objects).\r\n\r\nIntermediate: closures, prototype, this, async patterns, DOM. Build small projects (todo app, fetch API).\r\n\r\nAdvanced: event loop, performance, Node.js, bundling, SSR, TypeScript, testing.\r\n\r\nResources: MDN Web Docs (canonical), ECMAScript spec (for deep dives), You Don\u2019t Know JS (book series), Frontend Masters / Udemy / freeCodeCamp.\r\n\r\n30. Cheatsheet \u2014 Commands & tips\r\nnode file.js run Node script.\r\n\r\nnpx create-react-app myapp or use npm init vite@latest for modern scaffolding.\r\n\r\nnpm init -y, npm install <pkg>, npm run <script>.\r\n\r\nnpx eslint . --fix to lint/auto-fix.\r\n\r\ngit + CI for code quality.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 713, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "efb4eb95-18a8-4217-bab3-6c156daa4868": {"__data__": {"id_": "efb4eb95-18a8-4217-bab3-6c156daa4868", "embedding": null, "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "726f78ea-a895-431d-b878-6012d776af95", "node_type": "4", "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c0daff00ed61d996213136235ee45e07b39fdd4afe35c733977fe2c3b87e65ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "What is Java \u2014 quick definition\r\nJava is a high-level, class-based, object-oriented programming language and a platform (specification + tools + runtime) designed for portability and reliability: \u201cWrite Once, Run Anywhere\u201d \u2014 Java source \u2192 bytecode \u2192 JVM executes bytecode on any OS with a compatible JVM. The platform consists of the language, the JDK (development kit), the JRE (runtime), and the JVM (virtual machine). \r\nWikipedia\r\nOracle Documentation\r\n\r\nShort history & release model (important)\r\nJava was created at Sun Microsystems (led by James Gosling) in the early 1990s (project names: Green \u2192 Oak \u2192 Java) and publicly released in 1995. It quickly grew into a dominant platform for enterprise, web, mobile (Android uses Java-like bytecode), and embedded systems. \r\nWikipedia\r\nBaeldung on Kotlin\r\n\r\nSince Java 9, the JDK moved to a time-based release cadence: a new feature release every 6 months and a Long-Term-Support (LTS) release roughly every 2 years (LTS examples: Java 8, 11, 17, 21). This steady cadence lets new features arrive faster while LTS releases provide stability for production. \r\nOracle\r\njava.com\r\n\r\nThe Java platform (editions & components)\r\nJava SE (Standard Edition): core language + libraries (collections, concurrency, IO, NIO, security, JDBC, etc.).\r\n\r\nJakarta EE (formerly Java EE): enterprise APIs/specs (servlets, JPA/Hibernate, JAX-RS, JMS). Enterprise Java was moved to the Eclipse Foundation and rebranded as Jakarta EE. \r\njakarta.ee\r\n\r\nJava ME: for constrained devices/embedded.\r\n\r\nJDK vs JRE vs JVM:\r\n\r\nJDK = Java Development Kit (javac, tools, libraries).\r\n\r\nJRE = Java Runtime Environment (JVM + runtime libs).\r\n\r\nJVM = executes bytecode; provides memory management, class loading, JIT compilation. \r\nOracle Documentation\r\nDigitalOcean\r\n\r\nLanguage evolution \u2014 major language features (timeline & why they matter)\r\nJava evolved steadily to reduce verbosity, improve concurrency, and add modern language constructs:\r\n\r\nJava 5: generics, enhanced for-each, annotations, enum.\r\n\r\nJava 7: try-with-resources, Strings in switch (limited), NIO.2 (filesystem).\r\n\r\nJava 8: lambda expressions, Streams API, java.time (new date/time), major functional-style additions. (This was the biggest productivity jump for many.)\r\n\r\nJava 9: module system (JPMS) \u2014 modular JDK and module descriptors (module-info.java). (Project Jigsaw / JEP 261.) \r\nopenjdk.org\r\n\r\nJava 10+: var for local-type inference, many small improvements.\r\n\r\nJava 14\u201321: records, pattern matching, sealed classes, text blocks, switch expressions, virtual threads (Project Loom \u2014 finalized as JEP 444 in JDK 21), structured concurrency (preview/incubator stages), and more. Virtual threads are a major change for concurrent programming (lightweight threads managed by the JVM). \r\nopenjdk.org\r\nOracle\r\n\r\nCode playground \u2014 short, useful examples\r\nHello world, OOP, lambda/streams, generics, simple concurrency:\r\n\r\nHello world\r\n\r\njava\r\nCopy\r\nEdit\r\npublic class Hello {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, Java!\");\r\n    }\r\n}\r\nClass + record (Java 16+)\r\n\r\njava\r\nCopy\r\nEdit\r\npublic class Person {\r\n    private final String name;\r\n    public Person(String name) { this.name = name; }\r\n    public String getName() { return name; }\r\n}\r\n\r\n// record (shorter)\r\npublic record PersonRec(String name) {}\r\nLambda + Streams (Java 8+)\r\n\r\njava\r\nCopy\r\nEdit\r\nList<String> names = List.of(\"Riva\",\"Alex\",\"Sam\");\r\nList<String> sorted = names.stream()\r\n                           .filter(s -> s.length() > 3)\r\n                           .map(String::toUpperCase)\r\n                           .sorted()\r\n                           .toList();\r\nThreads (classic)\r\n\r\njava\r\nCopy\r\nEdit\r\nThread t = new Thread(() -> System.out.println(\"hi\"));\r\nt.start();\r\nExecutorService + CompletableFuture\r\n\r\njava\r\nCopy\r\nEdit\r\nExecutorService es = Executors.newFixedThreadPool(4);\r\nCompletableFuture.supplyAsync(() -> fetchData(), es)\r\n                 .thenApply(this::process)\r\n                 .thenAccept(System.out::println);\r\nVirtual threads (JDK 21+)\r\n\r\njava\r\nCopy\r\nEdit\r\ntry (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\r\n    executor.submit(() -> { /* lightweight concurrent task */ });\r\n}\r\n(virtual threads let you create very many concurrent tasks cheaply).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4281, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96525962-9cef-48a1-b6e0-67e6879b0e00": {"__data__": {"id_": "96525962-9cef-48a1-b6e0-67e6879b0e00", "embedding": null, "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "726f78ea-a895-431d-b878-6012d776af95", "node_type": "4", "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c0daff00ed61d996213136235ee45e07b39fdd4afe35c733977fe2c3b87e65ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efb4eb95-18a8-4217-bab3-6c156daa4868", "node_type": "1", "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "947e8f5cc94b84abc01bc44a78bb28608fcf35a96a5ae311d13c7e16a0c3ef4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "openjdk.org\r\n\r\nJVM internals (high level)\r\nThe JVM is where most of the \u201cmagic\u201d happens:\r\n\r\nClass loader subsystem: loads bytecode .class files into the JVM; supports hierarchical classloaders (bootstrap, platform, application), enabling dynamic loading and modularity.\r\n\r\nBytecode & Class file: Java source \u2192 javac \u2192 .class bytecode (platform independent). The JVM specification defines the class file format and bytecode semantics. \r\nOracle Documentation\r\n\r\nMemory areas: heap (objects; young & old generations), stack (per-thread frames/local vars), method area (class metadata \u2014 metaspace in modern JVMs), native memory for JVM internals.\r\n\r\nExecution engine: interpreter + JIT compilers (HotSpot\u2019s C1/C2 historically, and Graal as an alternative JIT/compile option). JIT compiles hot methods to native code for speed.\r\n\r\nGC (Garbage Collector): multiple algorithms (see next section). The JVM provides many tunable flags (e.g., -Xms, -Xmx, -XX:+UseG1GC, -XX:+UseZGC). \r\nGeeksforGeeks\r\n\r\nGarbage collectors (GC) \u2014 practical overview & modern choices\r\nGC is huge; here are the common HotSpot collectors and what they\u2019re used for:\r\n\r\nG1 (Garbage-First) \u2014 default in modern Java (made default around Java 9). Good balance of throughput and pause-time control for large heaps. Use when you want predictable pauses and good throughput. \r\nopenjdk.org\r\nOracle Documentation\r\n\r\nParallel / ParallelOld (Throughput collector) \u2014 focuses on throughput; longer pauses acceptable.\r\n\r\nZGC (Z Garbage Collector) \u2014 low-latency GC designed to keep pause times tiny (under a few ms) even with very large heaps. Good for latency-sensitive services. Introduced experimentally and matured in later JDKs (JEP 333). \r\nopenjdk.org\r\nOracle Documentation\r\n\r\nShenandoah \u2014 another low-pause GC (from Red Hat / OpenJDK).\r\n\r\nCMS (concurrent mark-sweep) \u2014 older; largely superseded by G1/ZGC.\r\n\r\nGC tuning basics: choose appropriate collector, set heap sizes (-Xms -Xmx), use -XX:MaxGCPauseMillis for G1, profile with JFR/VisualVM/async-profiler to find allocation hotspots, tune survivor spaces and tenuring if needed. \r\nOracle Documentation\r\n+1\r\n\r\nPerformance & observability tools\r\nJava Flight Recorder (JFR) and Java Mission Control (JMC) \u2014 low-overhead event recording built into the JDK (excellent for production profiling). \r\nOracle Documentation\r\n+1\r\n\r\nVisualVM \u2014 GUI profiler + heap/CPU analysis. \r\nvisualvm.github.io\r\n\r\nasync-profiler, YourKit, JProfiler \u2014 powerful profilers for CPU/allocations/lock contention.\r\n\r\nUse jcmd, jmap, jstack, jstat for diagnostics on running JVMs.\r\n\r\nEcosystem: frameworks, languages, build & test tools\r\nFrameworks:\r\n\r\nSpring (Spring Boot) \u2014 the dominant enterprise framework for building web apps, microservices, dependency injection, data access. (Spring Boot accelerates production apps.) \r\nHome\r\n\r\nJakarta EE (enterprise specs), Quarkus, Micronaut, Vert.x, Play \u2014 modern choices focused on microservices, cloud-native, or reactive performance (Quarkus & Micronaut emphasize fast startup + Graal native image support). \r\nquarkus.io\r\nMicronaut Framework\r\n\r\nBuild tools: Maven (pom.xml) and Gradle (Groovy/Kotlin DSL) \u2014 most projects use one of these. \r\nmaven.apache.org\r\nGradle\r\n\r\nTesting: JUnit (5), Mockito, AssertJ, Testcontainers for integration tests. \r\ndocs.junit.org\r\nsite.mockito.org\r\n\r\nIDEs: IntelliJ IDEA (most Java devs), Eclipse, NetBeans, and VS Code (with Java extensions). \r\nJetBrains\r\neclipseide.org\r\n\r\nNative images & GraalVM\r\nIf you need very fast startup and low memory for serverless/microservices, GraalVM Native Image compiles ahead-of-time to a native binary (AOT). This removes the JVM JIT warmup cost and reduces runtime memory but requires dealing with reflection/config metadata and has different tradeoffs. Many frameworks (Quarkus, Micronaut) provide Graal-friendly modes. \r\ngraalvm.org\r\nguides.micronaut.io\r\n\r\nModern concurrency (Project Loom) \u2014 why it matters\r\nClassic Java concurrency used OS threads (heavy for many-blocking I/O tasks). Virtual threads (Project Loom \u2192 JEP 444) introduce extremely lightweight threads managed by the JVM so you can use simple blocking style code at huge scale (e.g., millions of virtual threads) without complex asynchronous callback code. JDK 21 finalized virtual threads as a production-ready feature. This simplifies code and improves scalability for IO-bound apps.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4350, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "266cef67-85d6-4439-8a7c-e151eab9ddd9": {"__data__": {"id_": "266cef67-85d6-4439-8a7c-e151eab9ddd9", "embedding": null, "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "726f78ea-a895-431d-b878-6012d776af95", "node_type": "4", "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c0daff00ed61d996213136235ee45e07b39fdd4afe35c733977fe2c3b87e65ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96525962-9cef-48a1-b6e0-67e6879b0e00", "node_type": "1", "metadata": {"file_path": "data\\notes\\java.txt", "file_name": "java.txt", "file_type": "text/plain", "file_size": 11864, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "7924dd0e8b068ccdb1687efc2115cf79925ef86bd52ed928e77d352cb41526a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Virtual threads (Project Loom \u2192 JEP 444) introduce extremely lightweight threads managed by the JVM so you can use simple blocking style code at huge scale (e.g., millions of virtual threads) without complex asynchronous callback code. JDK 21 finalized virtual threads as a production-ready feature. This simplifies code and improves scalability for IO-bound apps. \r\nopenjdk.org\r\nOracle\r\n\r\nModules (JPMS) \u2014 packing and strong encapsulation\r\nThe Java Platform Module System (JPMS, JEP 261) introduced modules (module-info.java) to provide strong encapsulation and avoid \u201cclasspath hell\u201d. Modules help large apps and make smaller runtime images possible (useful for native images and smaller container images). Adoption across the ecosystem was gradual because many libraries had to adapt. \r\nopenjdk.org\r\n\r\nBest practices (practical)\r\nUse an LTS JDK for production (e.g., Java 17 or 21) unless you need a feature in non-LTS. \r\nOracle\r\n\r\nPrefer immutability and small, focused classes; use records for value carriers.\r\n\r\nUse modern concurrency primitives: Executors, CompletableFuture, and (on JDK 21+) virtual threads where suitable. \r\nopenjdk.org\r\n\r\nProfile, don\u2019t guess: use JFR + async-profiler to find hotspots before tuning GC. \r\nOracle Documentation\r\n\r\nFor microservices: favor frameworks tailored for cloud (Quarkus, Micronaut, Spring Boot), containerize, and use health checks/metrics/tracing (Micrometer/OpenTelemetry). \r\nquarkus.io\r\nMicronaut Framework\r\n\r\nCommon interview / learning topics to master\r\nOOP principles, collections, generics, streams.\r\n\r\nConcurrency basics: threads, synchronization, volatile, memory model, ExecutorService, CompletableFuture.\r\n\r\nJVM internals: classloaders, heap/stack/metaspace, GC types and tuning.\r\n\r\nDesign patterns, SOLID, testing with JUnit/Mockito.\r\n\r\nBuild tools (Maven/Gradle), CI/CD basics.\r\n\r\nFramework basics: Spring Boot, JPA/Hibernate, REST.\r\n\r\nModern topics: JPMS, records, sealed classes, virtual threads, GraalVM native images.\r\n\r\nQuick cheat-sheet: useful commands & JVM options\r\nCompile & run: javac Hello.java && java Hello\r\n\r\nCreate JAR: jar --create --file app.jar -C out/ .\r\n\r\nRun with G1: java -XX:+UseG1GC -Xms512m -Xmx2g -jar app.jar\r\n\r\nUse ZGC: java -XX:+UseZGC -Xmx4g -jar app.jar\r\n\r\nStart Flight Recorder (simple): java -XX:StartFlightRecording=duration=60s,filename=recording.jfr -jar app.jar\r\n\r\nRun with virtual threads (JDK 21 example code uses Executors.newVirtualThreadPerTaskExecutor()).\r\n\r\nRecommended books & learning resources\r\nEffective Java \u2014 Joshua Bloch (must-read).\r\n\r\nJava Concurrency in Practice \u2014 Brian Goetz (classic concurrency text).\r\n\r\nOracle/OpenJDK docs and JEP pages (for official spec & release notes). \r\nOracle\r\nopenjdk.org\r\n\r\nOnline: Baeldung, InfoQ, official docs (Oracle, OpenJDK), framework docs (Spring, Quarkus, Micronaut).\r\n\r\nWant to go deeper? (pick one)\r\nI covered a lot \u2014 but each of these can be expanded into full tutorials. Tell me which you want next and I\u2019ll produce hands-on content (code + commands + examples + troubleshooting):\r\n\r\nJVM internals deep dive (classloading, bytecode, JIT, HotSpot internals).\r\n\r\nGC tuning & production troubleshooting (how to read GC logs, JFR examples).\r\n\r\nPractical concurrency patterns with virtual threads (migrating blocking code to virtual threads).\r\n\r\nSpring Boot microservice example (with tests, Dockerfile, Prometheus metrics).\r\n\r\nGraalVM native image guide (build a native app and handle reflection).\r\n\r\nA compact PDF cheat-sheet or a 1-hour learning plan", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3510, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f2a8196-865b-4a25-be7f-14751c4d296c": {"__data__": {"id_": "5f2a8196-865b-4a25-be7f-14751c4d296c", "embedding": null, "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca", "node_type": "4", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "191cb8a8ea3aad190190a55462e7224d2b865102a692bdfd33e0455571cfe5d1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "What is Machine Learning (ML)\r\nMachine Learning is the field of designing algorithms that learn patterns from data to make predictions, decisions, or represent data structure. ML sits at the intersection of statistics, optimization, and computer science, and it includes supervised, unsupervised, semi-supervised and reinforcement learning.\r\n\r\n1. High-level taxonomy\r\nSupervised learning \u2014 learn mapping x \u2192 y from labeled examples. Tasks: regression (continuous y), classification (discrete y).\r\n\r\nUnsupervised learning \u2014 find structure in unlabeled data: clustering, density estimation, dimensionality reduction.\r\n\r\nSemi-supervised learning \u2014 small labeled + large unlabeled data.\r\n\r\nSelf-supervised learning \u2014 create labels from data itself (e.g., masked tokens) to pretrain models.\r\n\r\nReinforcement learning (RL) \u2014 agents learn via interaction with an environment, optimizing cumulative reward.\r\n\r\nProbabilistic / Bayesian ML \u2014 models uncertainty explicitly, posterior inference.\r\n\r\nCausal inference \u2014 estimating cause/effect, different from correlation-based ML.\r\n\r\n2. ML project lifecycle / pipeline (practical)\r\nProblem definition \u2014 business objective, metrics, constraints.\r\n\r\nData collection \u2014 sources, sampling, instrumentation, logging.\r\n\r\nExploratory Data Analysis (EDA) \u2014 distributions, missing values, correlations, value ranges, data quality.\r\n\r\nData preprocessing \u2014 cleaning, imputing, encoding, scaling, deduplication.\r\n\r\nFeature engineering \u2014 domain features, interactions, aggregations, embeddings.\r\n\r\nModel selection & training \u2014 baseline models \u2192 more complex ones.\r\n\r\nValidation & evaluation \u2014 cross-validation, holdout, testing on future/time split for time series.\r\n\r\nHyperparameter tuning \u2014 grid/random/Bayesian search, early stopping.\r\n\r\nModel interpretation & fairness checks \u2014 feature importance, bias tests.\r\n\r\nDeployment \u2014 package model + inference API, latency/throughput SLAs.\r\n\r\nMonitoring & maintenance \u2014 data & concept drift detection, metrics, retraining cadence.\r\n\r\nGovernance & reproducibility \u2014 version data/model/code, lineage, audits.\r\n\r\n3. Core ML concepts & math (concise formulas)\r\nLoss functions\r\nMSE (regression):\r\nMSE = (1/n) * \u03a3 (y_i - \u0177_i)^2\r\n\r\nMAE (regression):\r\nMAE = (1/n) * \u03a3 |y_i - \u0177_i|\r\n\r\nBinary Cross-Entropy / Logistic loss:\r\nL = - (1/n) * \u03a3 [ y_i * log(p_i) + (1 - y_i) * log(1 - p_i) ]\r\n\r\nCategorical Cross-Entropy (softmax):\r\nL = - (1/n) * \u03a3 \u03a3 y_{i,c} log( p_{i,c} )\r\n\r\nHinge loss (SVM):\r\nL = \u03a3 max(0, 1 - y_i * (w\u00b7x_i + b))\r\n\r\nRegularization\r\nL2 (Ridge) adds \u03bb * ||w||_2^2 to loss.\r\n\r\nL1 (Lasso) adds \u03bb * ||w||_1 \u2014 promotes sparsity.\r\n\r\nGradient descent (batch)\r\nUpdate: w \u2190 w - \u03b7 * \u2207_w L(w)\r\n\r\nSGD uses mini-batches. Optimizers: SGD, Momentum, RMSProp, Adam (adaptive learning rates).\r\n\r\nLinear regression closed form\r\nNormal equation: w = (X^T X)^{-1} X^T y (works if invertible, small datasets).\r\n\r\n4. Supervised learning algorithms (how & when)\r\n4.1 Linear models\r\nLinear Regression \u2014 interpretable, baseline for regression. Fast, sensitive to outliers and multicollinearity.\r\n\r\nLogistic Regression \u2014 classification using logit link and cross-entropy. Regularizable and explainable.\r\n\r\nWhen to use: quick baseline, when relationships are approximately linear or for interpretability.\r\n\r\n4.2 K-Nearest Neighbors (kNN)\r\nNon-parametric, lazy learner: predict by majority/vote or average over k nearest points (distance metric important). Scales poorly with large data/many features.\r\n\r\n4.3 Support Vector Machines (SVM)\r\nMaximize margin; kernel trick enables nonlinear boundaries. Good for medium-sized datasets and text (with proper kernels).\r\n\r\n4.4 Decision Trees\r\nTree splits on features; intuitive, interpretable, but overfits easily. Prune or set constraints (max_depth, min_samples_leaf).\r\n\r\n4.5 Ensemble methods\r\nBagging (Random Forests) \u2014 average many trees trained on bootstrap samples; reduces variance.\r\n\r\nBoosting (AdaBoost, Gradient Boosting, XGBoost, LightGBM, CatBoost) \u2014 sequentially combine weak learners to reduce bias/variance; excellent tabular performance.\r\n\r\nStacking \u2014 combine diverse models via meta-learner.\r\n\r\nWhen to use: tabular data \u2014 boosted trees are often state-of-the-art. RandomForest for robustness.\r\n\r\n5. Unsupervised learning\r\n5.1 Clustering\r\nK-means \u2014 partition into K clusters minimizing within-cluster variance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9c56fc3-a720-4bb7-8da9-44bedd294054": {"__data__": {"id_": "e9c56fc3-a720-4bb7-8da9-44bedd294054", "embedding": null, "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca", "node_type": "4", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "191cb8a8ea3aad190190a55462e7224d2b865102a692bdfd33e0455571cfe5d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f2a8196-865b-4a25-be7f-14751c4d296c", "node_type": "1", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "cd1cd178fb9283647eb215e91fd67f01ffb362725af4813697b0e59d0b4b681d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Boosting (AdaBoost, Gradient Boosting, XGBoost, LightGBM, CatBoost) \u2014 sequentially combine weak learners to reduce bias/variance; excellent tabular performance.\r\n\r\nStacking \u2014 combine diverse models via meta-learner.\r\n\r\nWhen to use: tabular data \u2014 boosted trees are often state-of-the-art. RandomForest for robustness.\r\n\r\n5. Unsupervised learning\r\n5.1 Clustering\r\nK-means \u2014 partition into K clusters minimizing within-cluster variance. Sensitive to initialization; use kmeans++ initialisation.\r\n\r\nGaussian Mixture Models (GMM) \u2014 soft clustering with probabilistic membership.\r\n\r\nDBSCAN \u2014 density-based; finds arbitrarily shaped clusters and outliers.\r\n\r\nHierarchical clustering \u2014 agglomerative/divisive; good for dendrograms and small datasets.\r\n\r\n5.2 Dimensionality reduction\r\nPCA (Principal Component Analysis) \u2014 linear orthogonal projection maximizing variance. Useful for noise reduction and visualization.\r\n\r\nt-SNE / UMAP \u2014 nonlinear embeddings for visualization (local structure preserved).\r\n\r\nAutoencoders \u2014 NN-based compression; can be used for denoising or representation learning.\r\n\r\n5.3 Density estimation & anomaly detection\r\nOne-class SVM, Isolation Forest, statistical models, KDE.\r\n\r\n6. Deep Learning \u2014 foundations\r\nPerceptron \u2192 MLP\r\nPerceptron: linear classifier with step function.\r\n\r\nMulti-layer perceptron (MLP): fully connected layers, nonlinearity (ReLU, tanh, sigmoid).\r\n\r\nActivation functions\r\nsigmoid(x), tanh(x), ReLU(x) = max(0,x), LeakyReLU, ELU, GELU. ReLU/GELU are common for deep nets.\r\n\r\nBackpropagation\r\nUse chain rule to compute gradients efficiently layer by layer. Automatic differentiation (autograd) frameworks handle this.\r\n\r\nBatchNorm, LayerNorm\r\nNormalize activations to stabilize training, allow higher learning rates.\r\n\r\nDropout\r\nRandomly drop units during training to prevent co-adaptation (regularization).\r\n\r\n7. Modern architectures (high level)\r\n7.1 Convolutional Neural Networks (CNNs)\r\nLocal receptive fields, weight sharing via convolution kernels. Used for images, audio, some sequences. Key concepts: strides, padding, pooling, transposed convs.\r\n\r\nImportant models: LeNet, AlexNet, VGG, ResNet (skip connections), EfficientNet.\r\n\r\n7.2 Recurrent Neural Networks (RNNs) & variants\r\nRNNs for sequences; suffer from vanishing/exploding gradients. LSTM & GRU solve long-term dependence problems.\r\n\r\n7.3 Attention & Transformers\r\nSelf-attention computes pairwise token interactions: Attention(Q, K, V) = softmax(QK^T / sqrt(d_k)) V.\r\n\r\nTransformers replaced recurrence with attention, enabling parallelism and scalability. Key models: Transformer (Vaswani), BERT (bidirectional encoder), GPT (decoder-only autoregressive), T5 (encoder-decoder).\r\n\r\n7.4 Graph Neural Networks (GNNs)\r\nFor graph-structured data: message passing, GraphSAGE, GAT, GCN.\r\n\r\n8. Generative models\r\nAutoencoders (AE) and Variational Autoencoders (VAE) \u2014 encode to latent space and decode; VAE learns probabilistic latent distributions.\r\n\r\nGenerative Adversarial Networks (GANs) \u2014 generator vs discriminator min/max game. Issues: instability, mode collapse.\r\n\r\nDiffusion models \u2014 noise addition + learned denoising; strong recent results in image generation (and audio/text generation pipelines built on it).\r\n\r\nLanguage models \u2014 autoregressive models (GPT family) and encoder models (BERT for masked modeling).\r\n\r\n9. Reinforcement Learning (brief)\r\nMDP (Markov Decision Process): states S, actions A, transition P, reward R, discount \u03b3.\r\n\r\nValue-based: Q-learning, DQN (deep Q networks).\r\n\r\nPolicy-based: REINFORCE, PPO, A2C/A3C.\r\n\r\nActor-Critic: actor (policy) + critic (value function).\r\n\r\nChallenges: sample efficiency, exploration vs exploitation, reward shaping, stability.\r\n\r\n10. Evaluation metrics & model diagnostics\r\nClassification\r\nConfusion matrix: TP, TN, FP, FN\r\n\r\nAccuracy = (TP+TN)/(TP+TN+FP+FN)\r\n\r\nPrecision = TP/(TP+FP)\r\n\r\nRecall (Sensitivity) = TP/(TP+FN)\r\n\r\nF1 = 2 * (precision * recall) / (precision + recall)\r\n\r\nROC curve \u2014 TPR vs FPR; AUC = area under ROC\r\n\r\nPrecision-Recall curve \u2014 more informative for imbalanced classes\r\n\r\nRegression\r\nMSE, RMSE, MAE, R\u00b2 (coefficient of determination)\r\n\r\nClustering\r\nSilhouette score, Davies-Bouldin, Adjusted Rand Index (if ground truth exists)\r\n\r\nModel calibration\r\nCheck if predicted probabilities correspond to true likelihoods (reliability diagrams, calibration loss).\r\n\r\n11.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4357, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c414d478-24d3-4e69-b736-11c40dbf5627": {"__data__": {"id_": "c414d478-24d3-4e69-b736-11c40dbf5627", "embedding": null, "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca", "node_type": "4", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "191cb8a8ea3aad190190a55462e7224d2b865102a692bdfd33e0455571cfe5d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9c56fc3-a720-4bb7-8da9-44bedd294054", "node_type": "1", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "d76763b5c9cf3f6119f644af2da5d2ec5d06bbbec210cf65a3ea434f9a9fb4b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "11. Model selection, validation & hyperparameter tuning\r\nCross-validation\r\nk-fold CV (stratified for class imbalance).\r\n\r\nTime series CV (no shuffling \u2014 use expanding window / rolling window).\r\n\r\nNested CV for unbiased hyperparameter tuning estimate.\r\n\r\nSearch methods\r\nGrid search, random search, Bayesian optimization (e.g., Optuna, Hyperopt), Hyperband, Population-based training (PBT).\r\n\r\nEarly stopping\r\nMonitor validation metric; stop training when performance plateaus to avoid overfitting.\r\n\r\n12. Feature engineering & data preprocessing\r\nCommon transforms\r\nScaling: StandardScaler (zero mean unit var), MinMaxScaler (0\u20131), RobustScaler.\r\n\r\nEncoding categorical: One-hot, ordinal, target/mean encoding, embeddings.\r\n\r\nImputation: mean/median/mode, KNN imputation, model-based imputation.\r\n\r\nFeature interaction: polynomial features, cross features.\r\n\r\nDatetime features: day-of-week, hour, cyclical transforms (sin/cos).\r\n\r\nText: tokenization, stemming/lemmatization, TF-IDF, word embeddings (word2vec/GloVe), contextual embeddings (BERT).\r\n\r\nImages: normalization, resizing, augmentation (flip, crop, color jitter).\r\n\r\nFeature selection\r\nFilter methods: correlation, mutual information.\r\n\r\nWrapper methods: recursive feature elimination (RFE).\r\n\r\nEmbedded: feature importance from tree models, L1 regularization.\r\n\r\n13. Regularization & generalization\r\nL1/L2 penalties.\r\n\r\nDropout, data augmentation, early stopping, ensembling.\r\n\r\nLabel smoothing (in classification) to improve generalization.\r\n\r\nBatch size & learning rate trade-offs: larger batches can require learning-rate scaling.\r\n\r\n14. Interpretability & explainability\r\nGlobal vs local interpretability.\r\n\r\nTools & methods:\r\n\r\nPermutation importance (model-agnostic).\r\n\r\nFeature importance (tree models).\r\n\r\nSHAP (Shapley values) \u2014 theoretically grounded local explanations.\r\n\r\nLIME \u2014 local linear surrogate models.\r\n\r\nPartial dependence plots (PDP) and ICE plots.\r\n\r\nBe careful: explanations are approximations; they can be misleading if used blindly.\r\n\r\n15. Production & MLOps (operationalizing models)\r\nModel packaging: pickle/ONNX/TensorFlow SavedModel/TorchScript. Avoid untrusted pickle usage.\r\n\r\nServing:\r\n\r\nLightweight: Flask/FastAPI + uvicorn/gunicorn (synchronous or async).\r\n\r\nDedicated servers: TensorFlow Serving, TorchServe, Triton Inference Server.\r\n\r\nServerless: AWS Lambda/Google Cloud Functions \u2014 good for low-traffic or event-driven functions.\r\n\r\nScaling: containerize (Docker), orchestrate (Kubernetes), autoscaling, GPU nodes for heavy inference.\r\n\r\nMonitoring: input data drift, model performance (prediction distribution, accuracy on known checks), latency/throughput, resource usage. Tools: Prometheus, Grafana, Sentry, Evidently, WhyLabs.\r\n\r\nCI/CD for models: automated testing for model code, data validation, model regression tests, canary rollouts / shadow testing.\r\n\r\nModel registry & lineage: MLflow, Kubeflow, Sagemaker Model Registry.\r\n\r\n16. Reproducibility & governance\r\nVersion control for code (git) and datasets (DVC, Quilt, Delta Lake).\r\n\r\nSeed management for deterministic training where possible.\r\n\r\nEnvironment management: conda/npm/pip + container images.\r\n\r\nDocumentation: model cards, datasheets for datasets (proposed by Gebru et al.) \u2014 capture intended use, limitations, fairness considerations.\r\n\r\n17. Bias, fairness, privacy & ethics\r\nFairness definitions: group fairness, individual fairness, equalized odds, demographic parity \u2014 tradeoffs exist.\r\n\r\nPrivacy: de-identification is not foolproof. Techniques: differential privacy, federated learning, encrypted inference (homomorphic encryption, secure MPC).\r\n\r\nAdversarial robustness: adversarial examples (small perturbations can fool models). Consider robustness testing.\r\n\r\nEthical considerations: misuse potential, feedback loops, transparency, human-in-the-loop for high-stakes decisions.\r\n\r\n18. Scaling & distributed training\r\nData parallelism \u2014 replicate model on multiple GPUs/nodes, split mini-batches, synchronize gradients (AllReduce).\r\n\r\nModel parallelism \u2014 partition model across devices (useful for very large models).\r\n\r\nMixed precision (FP16) \u2014 faster training + memory saving using AMP (automatic mixed precision).\r\n\r\nFrameworks: PyTorch Distributed, Horovod, DeepSpeed, FairScale, TensorFlow MirroredStrategy.\r\n\r\n19. Hardware & performance tips\r\nUse GPUs (NVIDIA) or TPUs for deep learning. For CPUs, use optimized BLAS (MKL, OpenBLAS).\r\n\r\nI/O: ensure data pipeline is not the bottleneck \u2014 use prefetching, efficient data loaders, TFRecords or WebDataset for large-scale training.\r\n\r\nUse profiling tools: NVIDIA Nsight, PyTorch profiler, TensorBoard profiler, cProfile for Python overhead.\r\n\r\n20.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4679, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ffd8a009-0603-43f8-86ae-491d781dbb9b": {"__data__": {"id_": "ffd8a009-0603-43f8-86ae-491d781dbb9b", "embedding": null, "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca", "node_type": "4", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "191cb8a8ea3aad190190a55462e7224d2b865102a692bdfd33e0455571cfe5d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c414d478-24d3-4e69-b736-11c40dbf5627", "node_type": "1", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "4dce7b3e87707adc26403c32132eec864b2c25946bd43af0fd019eb4902e6c90", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19. Hardware & performance tips\r\nUse GPUs (NVIDIA) or TPUs for deep learning. For CPUs, use optimized BLAS (MKL, OpenBLAS).\r\n\r\nI/O: ensure data pipeline is not the bottleneck \u2014 use prefetching, efficient data loaders, TFRecords or WebDataset for large-scale training.\r\n\r\nUse profiling tools: NVIDIA Nsight, PyTorch profiler, TensorBoard profiler, cProfile for Python overhead.\r\n\r\n20. Popular libraries & ecosystem\r\nPython: NumPy, pandas, scikit-learn, matplotlib/seaborn/plotly.\r\n\r\nDeep learning: PyTorch, TensorFlow + Keras, JAX (research/high performance).\r\n\r\nGradient boosting: XGBoost, LightGBM, CatBoost.\r\n\r\nNLP: Hugging Face Transformers, spaCy.\r\n\r\nCV: OpenCV, torchvision, albumentations.\r\n\r\nMLOps & tools: MLflow, Airflow, Prefect, DVC, Kubeflow, Seldon, Triton.\r\n\r\n21. Practical code recipes (short)\r\n21.1 scikit-learn classification pipeline\r\npython\r\nCopy\r\nEdit\r\n# baseline: sklearn pipeline\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.model_selection import train_test_split, cross_val_score\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)\r\n\r\nnum_cols = [...]\r\ncat_cols = [...]\r\n\r\npreproc = ColumnTransformer([\r\n    ('num', Pipeline([('impute', SimpleImputer(strategy='median')), ('scale', StandardScaler())]), num_cols),\r\n    ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols)\r\n])\r\n\r\nclf = Pipeline([('pre', preproc), ('model', RandomForestClassifier(n_estimators=200, random_state=42))])\r\nclf.fit(X_train, y_train)\r\nprint(clf.score(X_test, y_test))\r\n21.2 PyTorch training loop (simple)\r\npython\r\nCopy\r\nEdit\r\nimport torch\r\nfrom torch import nn, optim\r\nfrom torch.utils.data import DataLoader, TensorDataset\r\n\r\nmodel = nn.Sequential(nn.Linear(784, 256), nn.ReLU(), nn.Linear(256, 10))\r\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\r\nloss_fn = nn.CrossEntropyLoss()\r\n\r\nfor epoch in range(epochs):\r\n    model.train()\r\n    for xb, yb in DataLoader(train_ds, batch_size=64, shuffle=True):\r\n        optimizer.zero_grad()\r\n        preds = model(xb)\r\n        loss = loss_fn(preds, yb)\r\n        loss.backward()\r\n        optimizer.step()\r\n22. Debugging & common pitfalls\r\nData leakage \u2014 features that leak future / label info into training (fatal).\r\n\r\nImbalanced classes \u2014 use stratified splits, resampling, class weights, appropriate metrics.\r\n\r\nOverfitting \u2014 high train accuracy, low test accuracy. Use regularization & more data.\r\n\r\nPoor baseline \u2014 always compare to simple models (mean predictor, logistic regression).\r\n\r\nSilent model degradation \u2014 monitor in production for drift.\r\n\r\n23. Practical guidelines & checklist (before deployment)\r\nClean/test data pipelines with unit tests.\r\n\r\nTrain/validate/test splits representative of production distribution.\r\n\r\nBaseline model + complexity justified.\r\n\r\nCalibration & uncertainty estimates if required (predictive probability reliability).\r\n\r\nInterpretability checks & fairness audits for sensitive domains.\r\n\r\nPerformance (latency) and memory profiling for serving.\r\n\r\nAdd logging / feature tracking for inputs to detect drift.\r\n\r\n24. Research directions & hot topics (brief)\r\nSelf-supervised learning & foundation models (pretraining on large unlabeled datasets).\r\n\r\nEfficient training & inference (quantization, distillation, sparsity).\r\n\r\nCausal ML & counterfactual reasoning.\r\n\r\nFederated learning & private ML.\r\n\r\nMultimodal models (text+image+audio).\r\n\r\nDiffusion models & generative modeling advances.\r\n\r\n25. Recommended books & papers\r\nBooks\r\n\r\nPattern Recognition and Machine Learning \u2014 Christopher Bishop\r\n\r\nMachine Learning: A Probabilistic Perspective \u2014 Kevin Murphy\r\n\r\nDeep Learning \u2014 Ian Goodfellow, Yoshua Bengio, Aaron Courville\r\n\r\nHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow \u2014 Aur\u00e9lien G\u00e9ron\r\n\r\nReinforcement Learning: An Introduction \u2014 Sutton & Barto\r\n\r\nSeminal papers & topics\r\n\r\nAlexNet (deep CNNs), ResNet (skip connections), Attention Is All You Need (Transformer), BERT, GAN (Goodfellow), DQN / PPO (RL), Adam optimizer paper.\r\n\r\n26. Project ideas (beginner \u2192 advanced)\r\nBeginner: Titanic classifier, house price regression, spam detection, image classifier on CIFAR-10.\r\n\r\nIntermediate: sentiment analysis with pretrained transformers; object detection (YOLO/Detectron); recommender system (collaborative + content).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7afc4b35-2051-496c-9dc6-5ab19c1f6f9c": {"__data__": {"id_": "7afc4b35-2051-496c-9dc6-5ab19c1f6f9c", "embedding": null, "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33caa5a1-013a-4a0f-b5f4-8beed73c71ca", "node_type": "4", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "191cb8a8ea3aad190190a55462e7224d2b865102a692bdfd33e0455571cfe5d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffd8a009-0603-43f8-86ae-491d781dbb9b", "node_type": "1", "metadata": {"file_path": "data\\notes\\ML.txt", "file_name": "ML.txt", "file_type": "text/plain", "file_size": 19239, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "e3d8a27194715ab1ed1be8eab824fe7ef786feb17f6cbcb034d86bd83a7341e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "26. Project ideas (beginner \u2192 advanced)\r\nBeginner: Titanic classifier, house price regression, spam detection, image classifier on CIFAR-10.\r\n\r\nIntermediate: sentiment analysis with pretrained transformers; object detection (YOLO/Detectron); recommender system (collaborative + content).\r\n\r\nAdvanced: build an image captioning pipeline (CNN + transformer), productionize an ML model with CI/CD and monitoring, train a RL agent for a simple environment (Gym), implement model-based RL, implement a diffusion image generation prototype.\r\n\r\n27. Interview & study checklist\r\nProbability & statistics basics (bayes rule, distributions).\r\n\r\nLinear algebra essentials (matrices, eigenvalues, SVD).\r\n\r\nOptimization (gradients, convexity, SGD variants).\r\n\r\nML core algorithms and math behind them.\r\n\r\nBias-variance tradeoff, cross-validation, regularization.\r\n\r\nDeep learning fundamentals & modern architectures (CNNs, Transformers).\r\n\r\nPractical pipeline & debugging skills.\r\n\r\n28. Glossary (short)\r\nEpoch \u2014 one pass over the full dataset.\r\n\r\nBatch size \u2014 number of examples processed before updating weights.\r\n\r\nLearning rate \u2014 step size for gradient updates.\r\n\r\nOverfitting/Underfitting \u2014 model too complex/simple.\r\n\r\nDrift \u2014 change in input or target distribution over time.\r\n\r\nAUC \u2014 area under ROC curve (ranking metric).\r\n\r\n29. Quick reference: metrics & techniques cheat-sheet\r\nUse accuracy only for balanced classes.\r\n\r\nFor imbalanced tasks: use precision/recall/F1, or PR-AUC.\r\n\r\nRegression: MAE is robust to outliers; MSE/RMSE penalize large errors.\r\n\r\nFor time series: use time-aware splits (no leakage), consider drift detection, and evaluate on future windows.\r\n\r\n30. Next steps \u2014 how I can help you further\r\nPick one and I\u2019ll produce runnable content:\r\n\r\nFull end-to-end notebook: data ingestion \u2192 feature engineering \u2192 model training (XGBoost/LightGBM) \u2192 evaluation \u2192 deployment with FastAPI + Docker.\r\n\r\nDeep dive into Transformers: math of attention, positional encodings, code to fine-tune a BERT/GPT model with Hugging Face.\r\n\r\nProduction checklist + MLflow + Kubernetes example.\r\n\r\nMLOps: CI/CD pipeline for model retraining with DVC + GitHub Actions.\r\n\r\nReinforcement learning tutorial: implement DQN / PPO on an OpenAI Gym task.\r\n\r\nCreate a printable 2-page cheat sheet or a slide deck for interview prep.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2318, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7685f0e3-aea1-4286-8940-a076ee1a3b1e": {"__data__": {"id_": "7685f0e3-aea1-4286-8940-a076ee1a3b1e", "embedding": null, "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "839d015d-4373-4845-9225-2dfdfda0668f", "node_type": "4", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "a164cc049645a054569c6f7d3b5abb6099d2376ee7a36d9c541a7eef195a19ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "What is Python (short)\r\nPython is a high-level, interpreted, general-purpose programming language that emphasizes readability, simplicity, and developer productivity. It\u2019s multi-paradigm (procedural, object-oriented, functional), dynamically typed, and comes with a large standard library (\u201cbatteries included\u201d). Python is widely used for scripting, web backends, data science, machine learning, automation, DevOps, embedded devices, and much more.\r\n\r\nQuick history & version notes\r\nCreator: Guido van Rossum; first released in 1991.\r\n\r\nPython 2 \u2192 Python 3: Python 2.7 reached end-of-life in 2020; Python 3 is the modern and supported line.\r\n\r\nRelease cadence: Historically annual/minor releases; many PEPs (Python Enhancement Proposals) define language changes. Because I couldn\u2019t fetch the web just now, I\u2019ll avoid claiming a specific latest microrelease \u2014 if you want the exact newest version and release date I\u2019ll fetch that for you.\r\n\r\nImplementations (reference vs alternatives)\r\nCPython \u2014 the reference and most widely used implementation (written in C). It\u2019s what people usually mean by \u201cPython.\u201d\r\n\r\nPyPy \u2014 a fast implementation with a JIT compiler; great for long-running code where JIT payoff dominates.\r\n\r\nJython \u2014 Python on the JVM (integration with Java).\r\n\r\nIronPython \u2014 Python for .NET.\r\n\r\nMicroPython / CircuitPython \u2014 lightweight Python implementations for microcontrollers/embedded devices.\r\n\r\nStackless Python \u2014 variant with lightweight tasklets for concurrency.\r\n\r\nPhilosophy & culture\r\nReadability, simplicity, and explicitness (PEP 20 \u2014 the Zen of Python: \u201cReadability counts\u201d, \u201cSimple is better than complex\u201d, etc.)\r\n\r\nStrong community, governed in part by the Python Software Foundation (PSF) and the PEP process for language changes.\r\n\r\nLanguage features (essentials \u2192 advanced)\r\nSyntax & readability: indentation-based blocks, clear control flow.\r\n\r\nDynamic typing: variables have types at runtime; easy to prototype.\r\n\r\nDuck typing: \u201cIf it quacks like a duck...\u201d \u2014 emphasis on behavior over explicit interfaces.\r\n\r\nFirst-class functions, closures, generators, coroutines.\r\n\r\nList/Dict/Set comprehensions and generator expressions.\r\n\r\nDecorators for wrapping functions/classes.\r\n\r\nContext managers (with statement) for resource control.\r\n\r\nDataclasses (@dataclass) for boilerplate-free value classes (Python 3.7+).\r\n\r\nType hints / gradual typing via the typing module and tools like mypy / pyright (not enforced at runtime by default).\r\n\r\nf-strings for string interpolation (Python 3.6+).\r\n\r\nasync/await for native coroutines (Python 3.5+).\r\n\r\nStructural pattern matching (match / case) introduced in recent Python 3.x versions.\r\n\r\nMany language improvements have landed across 3.x (walrus operator :=, improved dict ordering semantics, performance improvements, etc.).\r\n\r\nCode playground \u2014 short, useful examples\r\nHello world\r\n\r\npython\r\nCopy\r\nEdit\r\nprint(\"Hello, Python!\")\r\nSimple function + typing\r\n\r\npython\r\nCopy\r\nEdit\r\ndef greet(name: str) -> str:\r\n    return f\"Hello, {name}!\"\r\n\r\nprint(greet(\"Riva\"))\r\nClass + dataclass\r\n\r\npython\r\nCopy\r\nEdit\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass Person:\r\n    name: str\r\n    age: int\r\n\r\np = Person(\"Riva\", 23)\r\nprint(p)\r\nList comprehension, generator\r\n\r\npython\r\nCopy\r\nEdit\r\nsquares = [x*x for x in range(10)]\r\ngen = (x*x for x in range(10))  # generator, lazy\r\nDecorator\r\n\r\npython\r\nCopy\r\nEdit\r\nimport time\r\ndef timeit(fn):\r\n    def wrapper(*a, **k):\r\n        t0 = time.time()\r\n        res = fn(*a, **k)\r\n        print(\"Elapsed\", time.time() - t0)\r\n        return res\r\n    return wrapper\r\n\r\n@timeit\r\ndef work():\r\n    sum(range(100_000))\r\n\r\nwork()\r\nContext manager (file)\r\n\r\npython\r\nCopy\r\nEdit\r\nwith open(\"data.txt\", \"r\", encoding=\"utf-8\") as f:\r\n    text = f.read()\r\nAsyncio example\r\n\r\npython\r\nCopy\r\nEdit\r\nimport asyncio\r\n\r\nasync def say_after(delay, msg):\r\n    await asyncio.sleep(delay)\r\n    print(msg)\r\n\r\nasync def main():\r\n    await asyncio.gather(say_after(1, \"hello\"), say_after(0.5, \"world\"))\r\n\r\nasyncio.run(main())\r\nThreading vs multiprocessing (simple)\r\n\r\npython\r\nCopy\r\nEdit\r\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\r\n\r\ndef cpu_task(x):\r\n    return sum(i*i for i in range(x))\r\n\r\nwith ProcessPoolExecutor() as p:\r\n    print(p.map(cpu_task, [10_000_000, 20_000_000]))\r\nData model & built-in types\r\nNumbers: int (arbitrary precision), float (double), complex.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4376, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "154c5e33-945d-4535-92f9-2f156e597611": {"__data__": {"id_": "154c5e33-945d-4535-92f9-2f156e597611", "embedding": null, "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "839d015d-4373-4845-9225-2dfdfda0668f", "node_type": "4", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "a164cc049645a054569c6f7d3b5abb6099d2376ee7a36d9c541a7eef195a19ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7685f0e3-aea1-4286-8940-a076ee1a3b1e", "node_type": "1", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "7e34c9796012401cc726bb0d067fab62360827bfd0a62d0e545b17aa3babc9f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sequence types: list, tuple, range, str, bytes, bytearray.\r\n\r\nMappings: dict (ordered since Python 3.7 by language spec).\r\n\r\nSets: set, frozenset.\r\n\r\nOther: bool, NoneType.\r\n\r\nSpecial protocol methods: __init__, __repr__, __iter__, __len__, __enter__/__exit__ for context managers, etc.\r\n\r\nStandard library \u2014 highlights\r\nPython\u2019s standard library is large; key modules you\u2019ll use constantly:\r\n\r\nos, sys, pathlib \u2014 filesystem / runtime.\r\n\r\nsubprocess \u2014 spawn processes.\r\n\r\nargparse \u2014 CLI parsing.\r\n\r\njson, csv, xml \u2014 data formats.\r\n\r\ndatetime, time, zoneinfo \u2014 date & time.\r\n\r\ncollections (deque, defaultdict, Counter), itertools, functools.\r\n\r\nconcurrent.futures, threading, multiprocessing, asyncio.\r\n\r\nsocket, selectors \u2014 networking.\r\n\r\nsqlite3 \u2014 embedded DB.\r\n\r\nlogging \u2014 robust logging system.\r\n\r\nunittest \u2014 basic testing framework; but many prefer pytest.\r\n\r\ntyping, dataclasses, contextlib, abc (abstract base classes), pkgutil, importlib.\r\n\r\nRuntime, memory, and garbage collection\r\nCPython memory model: reference counting + cyclic garbage collector (for reference cycles). Reference counting immediately frees objects when refcount drops to zero; the cyclic GC reclaims groups of objects that refer to each other.\r\n\r\nFreelists / arena allocator: CPython reuses memory chunks to avoid frequent OS allocations.\r\n\r\nMemory profiling: tracemalloc, gc module, external tools (e.g., memory_profiler, heapy).\r\n\r\nCaveats: large numbers of small objects can increase memory usage; be mindful with large in-memory data structures (DataFrame, arrays).\r\n\r\nThe Global Interpreter Lock (GIL)\r\nWhat: In CPython, a global mutex (GIL) serializes execution of Python bytecode so only one native thread executes Python-level instructions at a time.\r\n\r\nEffects: threads are excellent for I/O-bound concurrency (network, disk), but not for CPU-bound parallelism (use multiprocessing or native extensions).\r\n\r\nWorkarounds: multiprocessing (separate processes), using C extensions that run outside the GIL, or alternative implementations (PyPy sometimes mitigates, but GIL is present in many). Recent work/research aims to reduce or remove the GIL but compatibility and performance tradeoffs exist.\r\n\r\nConcurrency & asynchronous programming (patterns)\r\nThreading: threading.Thread and concurrent.futures.ThreadPoolExecutor. Good for I/O-bound tasks.\r\n\r\nMultiprocessing: multiprocessing and ProcessPoolExecutor. True parallelism (multiple CPUs) because each process has its own Python interpreter.\r\n\r\nAsyncio: single-threaded, event-loop based concurrency using async/await. Excellent for scalable network servers where tasks are mostly waiting (web servers, bots, etc.).\r\n\r\nLibraries: aiohttp, asyncpg, trio (alternative async library with a different design), curio.\r\n\r\nConcurrency choice: depends on workload: I/O bound \u2192 threads/asyncio; CPU bound \u2192 processes or native extensions.\r\n\r\nPackaging & environment management\r\npip \u2014 standard package installer; installs wheels (.whl) from PyPI.\r\n\r\nPyPI \u2014 Python Package Index, the central repository.\r\n\r\nvirtualenv / venv \u2014 create isolated environments per project (highly recommended).\r\n\r\nconda \u2014 environment + package manager popular in data science; manages binary dependencies.\r\n\r\npoetry / pipenv \u2014 tools that handle dependency resolution and packaging with a modern workflow (pyproject.toml).\r\n\r\npyproject.toml (PEP 517/518) \u2014 the modern standardized metadata & build backend declaration (setuptools/poetry/flit).\r\n\r\nBuilding & distributing: wheel format is preferred; twine to upload artifacts to PyPI.\r\n\r\nWeb ecosystem\r\nDjango \u2014 batteries-included, full-featured web framework (ORM, admin, auth). Great for conventional web apps.\r\n\r\nFlask \u2014 microframework, minimal core, lots of extensions.\r\n\r\nFastAPI \u2014 modern, high-performance ASGI framework for building APIs with type hints; great for async I/O and automatic OpenAPI docs.\r\n\r\nASGI vs WSGI: ASGI supports async (asyncio), WSGI is synchronous.\r\n\r\nServers: Gunicorn, uWSGI (WSGI), uvicorn, hypercorn (ASGI).\r\n\r\nDeployment patterns: Docker + orchestration (Kubernetes), serverless (AWS Lambda, Google Cloud Functions), platform-as-a-service (Heroku-like). Use a process manager and environment variables for config.\r\n\r\nData science & machine learning ecosystem\r\nNumPy \u2014 fundamental ndarray library for numeric computing.\r\n\r\npandas \u2014 DataFrame for tabular data manipulations.\r\n\r\nSciPy \u2014 scientific computing routines (optimization, integration).\r\n\r\nMatplotlib / Seaborn / Plotly \u2014 plotting & visualization.\r\n\r\nscikit-learn \u2014 classic ML algorithms.\r\n\r\nTensorFlow / Keras / PyTorch / JAX \u2014 deep learning libraries (PyTorch is extremely popular for research; TensorFlow still widely used in production).\r\n\r\nHugging Face \u2014 transformers & pretrained language models.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f90d0d7-dddb-4bc3-861a-e3e8d9e1b066": {"__data__": {"id_": "7f90d0d7-dddb-4bc3-861a-e3e8d9e1b066", "embedding": null, "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "839d015d-4373-4845-9225-2dfdfda0668f", "node_type": "4", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "a164cc049645a054569c6f7d3b5abb6099d2376ee7a36d9c541a7eef195a19ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "154c5e33-945d-4535-92f9-2f156e597611", "node_type": "1", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "b3942c12824974269ce87c898ac0580a64d89820d3bfd99c74c4234e4f4f1bfa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "pandas \u2014 DataFrame for tabular data manipulations.\r\n\r\nSciPy \u2014 scientific computing routines (optimization, integration).\r\n\r\nMatplotlib / Seaborn / Plotly \u2014 plotting & visualization.\r\n\r\nscikit-learn \u2014 classic ML algorithms.\r\n\r\nTensorFlow / Keras / PyTorch / JAX \u2014 deep learning libraries (PyTorch is extremely popular for research; TensorFlow still widely used in production).\r\n\r\nHugging Face \u2014 transformers & pretrained language models.\r\n\r\nTools: Jupyter Notebook/Lab and IPython for interactive development, along with Colab for free GPU access.\r\n\r\nPerformance & native interop\r\nWhy Python can be slower: interpreted bytecode and dynamic typing add overhead. Many workloads move heavy numeric work to C via NumPy or C extensions.\r\n\r\nSpeed-up options:\r\n\r\nC extensions (CPython C-API) for hot paths.\r\n\r\nCython \u2014 compile typed Python to C for big speedups.\r\n\r\nNumba \u2014 JIT compiler for numeric Python (works well with NumPy).\r\n\r\nPyPy \u2014 JIT-backed interpreter that can speed certain workloads.\r\n\r\nMultiprocessing / distributed processing for parallelism.\r\n\r\nForeign function interfaces: ctypes, cffi, or writing extension modules in C/C++/Rust (e.g., PyO3 for Rust).\r\n\r\nTesting, linters & quality tools\r\nTests: pytest (most popular), unittest (stdlib), nose.\r\n\r\nMocking: unittest.mock.\r\n\r\nCoverage: coverage.py.\r\n\r\nLinters & formatters: flake8, pylint, black (autoformatter), isort (imports), ruff (fast linter/formatter).\r\n\r\nStatic typing: mypy, pyright for type checking.\r\n\r\nPre-commit hooks (pre-commit) to run linters/formatters in CI automatically.\r\n\r\nDebugging & profiling\r\nDebuggers: pdb (builtin), ipdb/pudb, IDE debuggers (VS Code, PyCharm).\r\n\r\nProfiling: cProfile (builtin), py-spy (sampling profiler), line_profiler, memory_profiler, tracemalloc.\r\n\r\nProduction observability: instrument with metrics (Prometheus), tracing (OpenTelemetry), and structured logging.\r\n\r\nSecurity & best practices\r\nVirtual environments isolate dependencies per project.\r\n\r\nAvoid running untrusted code \u2014 pickle and eval are unsafe on untrusted input.\r\n\r\nDependency scanning: use tools like pip-audit or safety to detect known vulnerabilities.\r\n\r\nPrinciple of least privilege for deployed services.\r\n\r\nKeep secrets out of source (use environment vars / secret stores).\r\n\r\nDeployment & operations\r\nPackaging apps: build wheels, containerize (Dockerfile), use process managers.\r\n\r\nFor web APIs: use ASGI server (uvicorn) for async apps or Gunicorn for sync apps. Add a reverse proxy (Nginx) for static content and TLS termination.\r\n\r\nScaling: horizontal scale via containers & orchestrators (Kubernetes), autoscaling for stateless services, stateful services (databases) separately.\r\n\r\nServerless: AWS Lambda supports Python runtimes (good for event-driven jobs and small APIs). Watch cold-starts and package sizes.\r\n\r\nAdvanced/under-the-hood topics\r\nBytecode & the dis module: you can inspect compiled bytecode.\r\n\r\nImport machinery and packages: importlib, package metadata, and __init__.py.\r\n\r\nDescriptors & metaclasses: powerful mechanisms used by ORMs and frameworks.\r\n\r\nAST manipulation: ast module for programmatic code transformations (linters, formatters).\r\n\r\nExtension writing: implement high-performance parts in C/C++/Rust and expose to Python.\r\n\r\nExample mini-project ideas (practical)\r\nWeb: Build a REST API with FastAPI + PostgreSQL + Alembic + Docker.\r\n\r\nData: ETL pipeline: ingest CSV \u2192 pandas \u2192 transform \u2192 write Parquet \u2192 schedule with Airflow.\r\n\r\nML: Train a classification model with scikit-learn, containerize, and serve with FastAPI.\r\n\r\nAutomation: automate Excel/CSV reports, email notifications, and schedule with cron.\r\n\r\nBest practices & style\r\nFollow PEP 8 for style; use black for formatting.\r\n\r\nUse virtualenvs per project.\r\n\r\nPin exact dependencies in requirements.txt for deployment; use pyproject.toml/poetry.lock for reproducible builds.\r\n\r\nWrite tests and run them in CI.\r\n\r\nPrefer composition over inheritance, small functions, and documentation (docstrings + type hints).\r\n\r\nUse logging (not prints) in production code.\r\n\r\n\r\nPython \u2013 Complete Detailed Notes\r\n1. Introduction to Python\r\nWhat is Python?\r\n\r\nPython is a high-level, interpreted, general-purpose programming language.\r\n\r\nCreated by Guido van Rossum in 1991.\r\n\r\nEmphasizes code readability and simple syntax.\r\n\r\nOpen-source and cross-platform (works on Windows, Mac, Linux, etc.).\r\n\r\nWhy is Python popular?\r\n\r\nEasy to learn and write.\r\n\r\nRich standard library.\r\n\r\nHuge community support.\r\n\r\nSuitable for web development, data science, automation, machine learning, AI, IoT, and more.\r\n\r\nCurrent Versions (as of 2025):\r\n\r\nPython 3.x is the main version (Python 2 is discontinued since Jan 1, 2020).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4676, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2093b7c7-9941-4bfb-8374-b96b7cf13118": {"__data__": {"id_": "2093b7c7-9941-4bfb-8374-b96b7cf13118", "embedding": null, "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "839d015d-4373-4845-9225-2dfdfda0668f", "node_type": "4", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "a164cc049645a054569c6f7d3b5abb6099d2376ee7a36d9c541a7eef195a19ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f90d0d7-dddb-4bc3-861a-e3e8d9e1b066", "node_type": "1", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "cec94403cf85d011ed968ed8333870cca84cf929cfca8075d8c770f3b8627899", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Open-source and cross-platform (works on Windows, Mac, Linux, etc.).\r\n\r\nWhy is Python popular?\r\n\r\nEasy to learn and write.\r\n\r\nRich standard library.\r\n\r\nHuge community support.\r\n\r\nSuitable for web development, data science, automation, machine learning, AI, IoT, and more.\r\n\r\nCurrent Versions (as of 2025):\r\n\r\nPython 3.x is the main version (Python 2 is discontinued since Jan 1, 2020).\r\n\r\nLatest stable version: Python 3.13.\r\n\r\n2. Python Features\r\nSimple and Easy to Learn \u2013 Syntax is close to English.\r\n\r\nInterpreted \u2013 No compilation required.\r\n\r\nObject-Oriented \u2013 Supports OOP concepts (classes, objects, inheritance).\r\n\r\nExtensible \u2013 Can integrate with C, C++, Java, etc.\r\n\r\nPortable \u2013 Works across different operating systems.\r\n\r\nFree & Open Source \u2013 Licensed under OSI-approved open source license.\r\n\r\nHuge Libraries \u2013 NumPy, Pandas, TensorFlow, Flask, Django, etc.\r\n\r\nDynamic Typing \u2013 No need to declare variable types.\r\n\r\nMemory Management \u2013 Automatic garbage collection.\r\n\r\n3. Python Execution Flow\r\nWrite code in .py file.\r\n\r\nPython interpreter reads the code line by line (interpreted language).\r\n\r\nConverts to bytecode.\r\n\r\nBytecode is executed by Python Virtual Machine (PVM).\r\n\r\n4. Python Data Types\r\nPython has several built-in data types:\r\n\r\nBasic Types\r\nint \u2013 Integer values\r\n\r\nfloat \u2013 Decimal numbers\r\n\r\ncomplex \u2013 Complex numbers (e.g., 3+4j)\r\n\r\nbool \u2013 Boolean (True/False)\r\n\r\nstr \u2013 String\r\n\r\nCollection Types\r\nList \u2013 Ordered, mutable ([1, 2, 3])\r\n\r\nTuple \u2013 Ordered, immutable ((1, 2, 3))\r\n\r\nSet \u2013 Unordered, unique values ({1, 2, 3})\r\n\r\nDictionary \u2013 Key-value pairs ({\"name\": \"John\"})\r\n\r\n5. Variables and Constants\r\nVariables: Names that store data.\r\n\r\npython\r\nCopy\r\nEdit\r\nx = 10\r\nname = \"Alice\"\r\nConstants: By convention, uppercase names (PI = 3.14).\r\n\r\n6. Operators in Python\r\nArithmetic: +, -, *, /, // (floor division), % (modulus), ** (exponent)\r\n\r\nComparison: ==, !=, >, <, >=, <=\r\n\r\nLogical: and, or, not\r\n\r\nAssignment: =, +=, -=, etc.\r\n\r\nMembership: in, not in\r\n\r\nIdentity: is, is not\r\n\r\n7. Conditional Statements\r\npython\r\nCopy\r\nEdit\r\nif condition:\r\n    # code\r\nelif condition:\r\n    # code\r\nelse:\r\n    # code\r\n8. Loops\r\nFor loop:\r\n\r\npython\r\nCopy\r\nEdit\r\nfor i in range(5):\r\n    print(i)\r\nWhile loop:\r\n\r\npython\r\nCopy\r\nEdit\r\nwhile x < 5:\r\n    print(x)\r\n    x += 1\r\nLoop control: break, continue, pass\r\n\r\n9. Functions\r\nDefined using def keyword:\r\n\r\npython\r\nCopy\r\nEdit\r\ndef greet(name):\r\n    return f\"Hello, {name}\"\r\nSupports default arguments, keyword arguments, and variable-length arguments.\r\n\r\n10. Object-Oriented Programming (OOP) in Python\r\nClass \u2013 Blueprint for objects.\r\n\r\nObject \u2013 Instance of a class.\r\n\r\nConstructor \u2013 __init__() method.\r\n\r\nExample:\r\n\r\npython\r\nCopy\r\nEdit\r\nclass Person:\r\n    def __init__(self, name):\r\n        self.name = name\r\n    def greet(self):\r\n        print(\"Hello, my name is\", self.name)\r\n\r\np = Person(\"John\")\r\np.greet()\r\nOOP Principles:\r\n\r\nEncapsulation\r\n\r\nInheritance\r\n\r\nPolymorphism\r\n\r\nAbstraction\r\n\r\n11. Python Modules and Packages\r\nModule \u2013 File containing Python code (math, os, sys).\r\n\r\nPackage \u2013 Collection of modules with __init__.py.\r\n\r\npython\r\nCopy\r\nEdit\r\nimport math\r\nprint(math.sqrt(16))\r\n12. Python Libraries\r\nData Science: NumPy, Pandas, Matplotlib, Seaborn\r\n\r\nMachine Learning: TensorFlow, Scikit-learn, PyTorch\r\n\r\nWeb Development: Django, Flask, FastAPI\r\n\r\nAutomation: Selenium, PyAutoGUI\r\n\r\nGame Development: Pygame\r\n\r\n13. File Handling\r\nOpening a file:\r\n\r\npython\r\nCopy\r\nEdit\r\nwith open(\"file.txt\", \"r\") as f:\r\n    content = f.read()\r\nModes: r, w, a, rb, wb\r\n\r\n14. Exception Handling\r\npython\r\nCopy\r\nEdit\r\ntry:\r\n    x = 10 / 0\r\nexcept ZeroDivisionError as e:\r\n    print(\"Error:\", e)\r\nfinally:\r\n    print(\"Done\")\r\n15. Python Advanced Concepts\r\nList comprehensions:\r\n\r\npython\r\nCopy\r\nEdit\r\nsquares = [x**2 for x in range(10)]\r\nLambda functions (anonymous functions):\r\n\r\npython\r\nCopy\r\nEdit\r\nsquare = lambda x: x**2\r\nDecorators \u2013 Modify functions.\r\n\r\nGenerators \u2013 Use yield for lazy evaluation.\r\n\r\n16. Python Memory Management\r\nAutomatic garbage collection.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d72eaf60-f15d-4f87-a528-23c8bf81925f": {"__data__": {"id_": "d72eaf60-f15d-4f87-a528-23c8bf81925f", "embedding": null, "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "839d015d-4373-4845-9225-2dfdfda0668f", "node_type": "4", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "a164cc049645a054569c6f7d3b5abb6099d2376ee7a36d9c541a7eef195a19ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2093b7c7-9941-4bfb-8374-b96b7cf13118", "node_type": "1", "metadata": {"file_path": "data\\notes\\python.txt", "file_name": "python.txt", "file_type": "text/plain", "file_size": 18131, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c5a2fabb413b9c7c8ff1087c7c317bf065c97501e6400447e12de4a67b65f198", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Python Advanced Concepts\r\nList comprehensions:\r\n\r\npython\r\nCopy\r\nEdit\r\nsquares = [x**2 for x in range(10)]\r\nLambda functions (anonymous functions):\r\n\r\npython\r\nCopy\r\nEdit\r\nsquare = lambda x: x**2\r\nDecorators \u2013 Modify functions.\r\n\r\nGenerators \u2013 Use yield for lazy evaluation.\r\n\r\n16. Python Memory Management\r\nAutomatic garbage collection.\r\n\r\nReference counting and cyclic garbage collector.\r\n\r\ndel keyword to delete references.\r\n\r\n17. Python Use Cases\r\nWeb applications\r\n\r\nData analysis & visualization\r\n\r\nMachine learning & AI\r\n\r\nGame development\r\n\r\nIoT devices\r\n\r\nDesktop GUIs\r\n\r\nScripting & automation\r\n\r\n18. Advantages and Disadvantages\r\nAdvantages:\r\nReadable, beginner-friendly.\r\n\r\nVast library support.\r\n\r\nCross-platform.\r\n\r\nStrong community.\r\n\r\nDisadvantages:\r\nSlower than compiled languages like C++.\r\n\r\nHigh memory usage.\r\n\r\nNot great for mobile app development.\r\n\r\n19. Python Syntax vs Other Languages\r\nFeature\tPython\tJava\tC++\r\nSemicolon\tOptional\tRequired\tRequired\r\nBraces\tNo braces (indentation)\tCurly braces {}\tCurly braces {}\r\nCompilation\tInterpreted\tCompiled to bytecode\tCompiled\r\n\r\n20. Career Scope in Python\r\nRoles:\r\n\r\nPython Developer\r\n\r\nData Scientist\r\n\r\nAI Engineer\r\n\r\nWeb Developer\r\n\r\nAutomation Engineer\r\n\r\nSalary: Among the highest-paying programming skills.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1277, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6052773-ca0f-43cc-80a0-aa1d18100ee5": {"__data__": {"id_": "b6052773-ca0f-43cc-80a0-aa1d18100ee5", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "e9e146a4a51ffb72f8de80e6f4bb0b4cc7f425f3149e5da5c62c7cabdc4e4831", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Overview \u2014 what this roadmap gives you\r\nClear skills by level (what to learn and why)\r\n\r\nTooling and libraries to master (SQL, Python, BI tools, cloud)\r\n\r\nProjects to build at each level with measurable deliverables\r\n\r\nTimelines and study plans (12-week, 6-month)\r\n\r\nInterview checklist and typical questions\r\n\r\nCareer paths and soft skills: storytelling, domain knowledge, stakeholder work\r\n\r\nBeginner (0 \u2192 ~3 months) \u2014 foundations & velocity\r\nGoal: read & wrangle data, make useful charts, answer simple business questions.\r\n\r\nCore concepts & why they matter\r\nData literacy: types (numerical, categorical, datetime), missingness, outliers.\r\n\r\nStatistics basics: mean/median/mode, variance/std, percentiles, correlation vs causation.\r\n\r\nSQL fundamentals: SELECT, WHERE, GROUP BY, JOINs \u2014 used for most data slicing.\r\n\r\nSpreadsheets skills (Excel/Google Sheets): filters, pivot tables, basic formulas \u2014 quick exploration & prototyping.\r\n\r\nBasic visualization: bar charts, line charts, histograms \u2014 communicate insights.\r\n\r\nTools & libraries to learn now\r\nSQL engine: PostgreSQL (local) or any cloud workspace (you can start with SQLite or DuckDB).\r\n\r\nPython: core libraries \u2014 pandas, numpy, matplotlib/seaborn (or plotly for interactivity).\r\n\r\nNotebook: Jupyter or VS Code notebooks.\r\n\r\nSpreadsheet: Excel or Google Sheets.\r\n\r\nVersion control: basic Git (commit, branch, push).\r\n\r\nConcrete beginner checklist\r\nWrite SQL queries with joins and group-by aggregations.\r\n\r\nLoad CSV into pandas and do basic cleaning (dropna, fillna, type conversion).\r\n\r\nCreate simple charts and export them for a report.\r\n\r\nSave reproducible analysis in a notebook with explanations.\r\n\r\nSmall projects (week-by-week)\r\nData exploration notebook: pick a public dataset (Kaggle, UCI), produce EDA: missing value table, histograms, correlation heatmap, and 5 key insights.\r\n\r\nSales pivot analysis (spreadsheet + SQL): monthly revenue by region, top products, simple cohort analysis (month of first purchase).\r\n\r\nMini dashboard (static): create a PDF or HTML report with charts and short recommendations.\r\n\r\nExample snippets\r\nSQL \u2014 Sales by product category (Postgres style)\r\nsql\r\nCopy\r\nEdit\r\nSELECT category, \r\n       COUNT(*) AS orders,\r\n       SUM(amount) AS revenue,\r\n       AVG(amount) AS avg_order\r\nFROM orders o\r\nJOIN products p ON o.product_id = p.id\r\nWHERE o.order_date >= '2024-01-01'\r\nGROUP BY category\r\nORDER BY revenue DESC;\r\npandas \u2014 basic EDA\r\npython\r\nCopy\r\nEdit\r\nimport pandas as pd\r\ndf = pd.read_csv(\"sales.csv\", parse_dates=[\"order_date\"])\r\nprint(df.info())\r\nprint(df.describe())\r\n# missingness\r\nmissing = df.isna().mean().sort_values(ascending=False)\r\nIntermediate (3 \u2192 12 months) \u2014 production-ready analytics & automation\r\nGoal: build repeatable pipelines, automated reports, dashboards, and work with real data stores.\r\n\r\nCore skills & why\r\nAdvanced SQL: window functions, CTEs, subqueries, performance (indexes, explain plan). Essential for complex analytics.\r\n\r\nData modeling: star schema, slowly changing dimensions, event tables vs dimension tables. This lets you build reliable analytics models.\r\n\r\nETL/ELT basics: data ingestion, cleaning, transformation, scheduling jobs (cron / Airflow). Automate repetitive tasks.\r\n\r\nPython data engineering: pandas at scale, polars (fast alternative), using database connectors, batching, and robust scripts.\r\n\r\nVisualization & BI: Tableau or Power BI (or Looker / Superset). Build interactive dashboards with filters, drill-downs, and KPIs.\r\n\r\nMetrics & instrumentation: define metrics (DAU/MAU, churn), understand event instrumentation and analytic events.\r\n\r\nExperimentation basics: A/B testing concepts, significance, power, common pitfalls.\r\n\r\nBasic statistics & regression: hypothesis testing, confidence intervals, linear regression for trend analysis.\r\n\r\nTools & platforms\r\nDBs: PostgreSQL, BigQuery, Redshift (learn at least one cloud DW).\r\n\r\nETL orchestration: Airflow (core concepts), Prefect, or cron jobs for simple pipelines.\r\n\r\nBI tools: Tableau, Power BI, Looker \u2014 build production dashboards.\r\n\r\nVersioning: Git + data versioning basics (DVC) or maintaining raw/reprocessed data snapshots.\r\n\r\nContainerization (optional): basic Docker for reproducible runs.\r\n\r\nIntermediate project ideas (deliverables)\r\nAutomated weekly sales dashboard\r\n\r\nData ingestion script (CSV / API) \u2192 staging table \u2192 transform (SQL or Python) \u2192 publish to BI tool.\r\n\r\nDeliverable: working dashboard with filters and automated email summary job.\r\n\r\nCohort analysis & retention model\r\n\r\nImplement cohort definitions in SQL, compute retention curves, produce an executive summary with recommended actions.\r\n\r\nA/B test analysis pipeline\r\n\r\nIngest experiment events, compute variant metrics, apply statistical test, produce readout table and decision recommendation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4792, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e4566292-9640-4c65-b4ce-1894f6ade08e": {"__data__": {"id_": "e4566292-9640-4c65-b4ce-1894f6ade08e", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "e9e146a4a51ffb72f8de80e6f4bb0b4cc7f425f3149e5da5c62c7cabdc4e4831", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6052773-ca0f-43cc-80a0-aa1d18100ee5", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "5c5d92ae7aa07e1311da89e29f9791b53432dc0cf433d7223e985ea18b31fd04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Deliverable: working dashboard with filters and automated email summary job.\r\n\r\nCohort analysis & retention model\r\n\r\nImplement cohort definitions in SQL, compute retention curves, produce an executive summary with recommended actions.\r\n\r\nA/B test analysis pipeline\r\n\r\nIngest experiment events, compute variant metrics, apply statistical test, produce readout table and decision recommendation.\r\n\r\nKey concepts to master with examples\r\nWindow functions (SQL) e.g., running totals:\r\n\r\nsql\r\nCopy\r\nEdit\r\nSELECT order_date,\r\n       SUM(amount) OVER (ORDER BY order_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue\r\nFROM orders;\r\nCTE for modular SQL\r\n\r\nsql\r\nCopy\r\nEdit\r\nWITH daily AS (\r\n  SELECT date_trunc('day', order_date) AS day, sum(amount) AS revenue\r\n  FROM orders\r\n  GROUP BY 1\r\n)\r\nSELECT day, revenue, LAG(revenue) OVER (ORDER BY day) AS prev_day\r\nFROM daily;\r\nIntermediate checklist\r\nBuild at least one automated ETL pipeline with tests.\r\n\r\nPublish and maintain a BI dashboard used by stakeholders.\r\n\r\nDeliver A/B test analyses with correct hypothesis testing and power considerations.\r\n\r\nKnow how to explain metric definitions and potential bias (e.g., sample leakage).\r\n\r\nAdvanced (12+ months \u2192 years) \u2014 strategic analytics, systems, and leadership\r\nGoal: architect data solutions, influence product with data, ensure data quality and governance, mentor others.\r\n\r\nAdvanced competencies\r\nData architecture & warehousing\r\n\r\nDimensional modeling (facts/dimensions), partitioning strategies, incremental ingestion, auditability.\r\n\r\nCloud DW mastery: BigQuery / Redshift / Snowflake \u2014 cost control, partition pruning, slots/compute management.\r\n\r\nAdvanced ETL & streaming\r\n\r\nBatch vs streaming (Kafka, Kinesis), CDC patterns (Debezium), idempotent pipelines, schema evolution.\r\n\r\nData quality & governance\r\n\r\nData contracts, lineage, observability (Great Expectations), monitoring alerts, ownership model.\r\n\r\nPerformance & optimization\r\n\r\nSQL tuning, query plan analysis, index strategy, materialized views, caching layers.\r\n\r\nAdvanced analytics & ML basics\r\n\r\nTime-series forecasting, uplift modeling, survival analysis, propensity models. Not full ML engineer, but be able to prototype and validate models.\r\n\r\nCausal inference\r\n\r\nDifference-in-differences, instrumental variables, regression discontinuity for product/marketing causal questions.\r\n\r\nExperimentation at scale\r\n\r\nExperiment design for complex products, sequential testing, controlling for multiple comparisons.\r\n\r\nData product thinking\r\n\r\nPackaging insights as repeatable products: real-time alerts, feature stores for ML, internal APIs.\r\n\r\nTools & infrastructure\r\nOrchestration & infra: Airflow DAG patterns, Kubernetes basics for scalable pipelines, Terraform for infra as code.\r\n\r\nMonitoring & observability: Datadog, Prometheus/Grafana, Sentry; set up data quality dashboards.\r\n\r\nMLOps basics: Model serving patterns, feature stores, model monitoring for data drift (Evidently).\r\n\r\nPrivacy & security: PII detection, masking, consent/retention policies.\r\n\r\nAdvanced project ideas\r\nEnterprise analytics platform\r\n\r\nBuild global dimensional model, central ETL pipeline, standard set of canonical metrics + access controls.\r\n\r\nImplement lineage and data quality checks; onboard 3 teams to use it.\r\n\r\nReal-time alerting system\r\n\r\nStreaming ingestion of events, materialize near-real-time metrics, trigger alerts on anomaly detection.\r\n\r\nCausal impact study\r\n\r\nDesign and execute a robust causal analysis (instrumental variable or DiD) for a major feature rollout.\r\n\r\nLeadership & soft skills\r\nData storytelling: lead cross-team presentations, craft narratives with executive summaries.\r\n\r\nStakeholder management: align on metric definitions, SLAs for data delivery, and prioritization.\r\n\r\nMentoring & hiring: interview frameworks for analysts, run bootcamps, establish onboarding docs.\r\n\r\nAdvanced checklist\r\nOwn the analytics roadmap for a product area.\r\n\r\nImplement governance: data catalog, lineage, DQ alerts.\r\n\r\nMentor junior analysts; improve team processes (review, documentation, standard SQL patterns).\r\n\r\nCross-cutting skills (applies at all levels)\r\nCommunication & storytelling: write one-page executive summaries, present clear visuals, recommend actions (not just numbers).\r\n\r\nReproducibility: notebooks should run end-to-end; parametrize and script. Use requirements.txt or poetry.\r\n\r\nTesting for analytics: unit tests for SQL (dbt tests or SQLUnit), data validation (Great Expectations), CI for pipelines.\r\n\r\nDocumentation: metric catalog, data dictionary, onboarding guides.\r\n\r\nEthics & privacy: be aware of biases, PII concerns, GDPR/CCPA implications.\r\n\r\nSample study plans\r\n12-week intensive plan (10\u201315 hrs/week)\r\nWeeks 1\u20132: Python basics + pandas; do EDA on a dataset.\r\n\r\nWeeks 3\u20134: SQL fundamentals + joins, group by, window functions.\r\n\r\nWeeks 5\u20136: Data modeling basics + build simple ETL (Python -> DB).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4924, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ba4c0e99-d6dd-426a-8a59-778ed4689a93": {"__data__": {"id_": "ba4c0e99-d6dd-426a-8a59-778ed4689a93", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "e9e146a4a51ffb72f8de80e6f4bb0b4cc7f425f3149e5da5c62c7cabdc4e4831", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4566292-9640-4c65-b4ce-1894f6ade08e", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "8215a3eae543ed1029ab2f5c27b37f4ed40a0fdf0ad4b44c86920369cdd1efdf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Ethics & privacy: be aware of biases, PII concerns, GDPR/CCPA implications.\r\n\r\nSample study plans\r\n12-week intensive plan (10\u201315 hrs/week)\r\nWeeks 1\u20132: Python basics + pandas; do EDA on a dataset.\r\n\r\nWeeks 3\u20134: SQL fundamentals + joins, group by, window functions.\r\n\r\nWeeks 5\u20136: Data modeling basics + build simple ETL (Python -> DB).\r\n\r\nWeeks 7\u20138: BI tool deep dive (Tableau/Power BI) \u2013 build dashboards.\r\n\r\nWeeks 9\u201310: A/B testing & stats basics; analyze a sample experiment.\r\n\r\nWeeks 11\u201312: Build deployable project with scheduled ETL and dashboard; write README and present insights.\r\n\r\n6-month plan (part-time)\r\nMonths 1\u20132: Beginner + intermediate foundations (SQL + pandas + viz).\r\n\r\nMonths 3\u20134: ETL orchestration and BI dashboards; automate pipeline.\r\n\r\nMonths 5\u20136: Learn cloud data warehousing (BigQuery/Snowflake), data quality, and one advanced analytics area (causal or forecasting). Build capstone.\r\n\r\nPortfolio & interview preparation\r\nWhat to show in your portfolio\r\n3\u20136 polished projects with: problem statement, data source, methods, results, dashboard/screenshots, code (clean repo), and live demo if possible.\r\n\r\nA canonical SQL file or notebook per project that reproduces the key result.\r\n\r\nA metrics catalog or documentation page showing metric definitions used.\r\n\r\nTypical interview tasks / questions\r\nSQL challenge: write a query to compute rolling 7-day retention, or find top cohorts.\r\n\r\nCase study: given product data, find 3 growth levers and present how to measure them.\r\n\r\nPython task: clean dataset and produce a specific aggregated CSV.\r\n\r\nStats question: interpret p-value, type I/II errors, power, and what to do when test fails.\r\n\r\nDashboard critique: given a mock dashboard, identify issues and propose improvements.\r\n\r\nExample interview SQL prompt & solution sketch\r\nPrompt: Compute 7-day rolling retention: fraction of users who return within 7 days of first session.\r\n\r\nsql\r\nCopy\r\nEdit\r\nWITH first AS (\r\n  SELECT user_id, MIN(session_date) AS first_date\r\n  FROM sessions\r\n  GROUP BY user_id\r\n),\r\njoined AS (\r\n  SELECT f.user_id, f.first_date, s.session_date\r\n  FROM first f\r\n  LEFT JOIN sessions s ON s.user_id = f.user_id\r\n)\r\nSELECT first_date,\r\n       COUNT(DISTINCT CASE WHEN session_date <= first_date + INTERVAL '7 days' THEN joined.user_id END)::float / COUNT(DISTINCT joined.user_id) AS retention_7d\r\nFROM joined\r\nGROUP BY first_date\r\nORDER BY first_date;\r\nCommon pitfalls & how to avoid them\r\nUndefined metrics: always have a single source-of-truth definition.\r\n\r\nData leakage: be careful with time-based splits and look-ahead bias.\r\n\r\nOverreliance on p-values: check effect sizes and business significance.\r\n\r\nBad instrumentation: poorly defined event taxonomy leads to broken analytics.\r\n\r\nNot validating upstream changes: schema drift breaks pipelines \u2014 add monitoring & alerts.\r\n\r\nTool cheat-sheet & commands\r\nPython environment\r\nbash\r\nCopy\r\nEdit\r\npython -m venv venv\r\nsource venv/bin/activate\r\npip install pandas numpy jupyterlab sqlalchemy psycopg2-binary\r\njupyter lab\r\nDockerize a simple ETL job\r\nDockerfile (simple)\r\n\r\ndockerfile\r\nCopy\r\nEdit\r\nFROM python:3.11-slim\r\nWORKDIR /app\r\nCOPY requirements.txt .\r\nRUN pip install -r requirements.txt\r\nCOPY . .\r\nCMD [\"python\", \"etl.py\"]\r\nQuick DB connection example (SQLAlchemy + pandas)\r\npython\r\nCopy\r\nEdit\r\nfrom sqlalchemy import create_engine\r\nengine = create_engine(\"postgresql://user:pass@localhost:5432/dbname\")\r\ndf = pd.read_sql(\"SELECT * FROM orders LIMIT 1000\", engine)\r\nRecommended books & learning resources\r\nPython for Data Analysis \u2014 Wes McKinney (pandas masterclass).\r\n\r\nStorytelling with Data \u2014 Cole Nussbaumer Knaflic (visualization & communication).\r\n\r\nPractical Statistics for Data Scientists \u2014 for the statistics toolkit.\r\n\r\nCourses: Coursera / DataCamp / Udacity (SQL, analytics, A/B testing).\r\n\r\nTools docs: pandas, dbt (analytics engineering), Airflow, Tableau/Power BI.\r\n\r\nCareer paths & roles\r\nEntry: Junior Data Analyst / Reporting Analyst\r\n\r\nMid: Data Analyst / Analytics Engineer / Product Analyst\r\n\r\nSenior: Senior Data Analyst / Analytics Engineer / Data Scientist (if you gain ML depth)\r\n\r\nLeadership: Analytics Manager, Head of Analytics, Chief Data Officer (requires domain + leadership skill growth)\r\n\r\nFinal advice (from an experienced perspective)\r\nBe outcome-driven. Start every analysis with: \u201cWhat decision will this support?\u201d \u2014 not: \u201cwhat can I compute?\u201d\r\n\r\nAutomate repeatable work.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4415, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2be3dbb-9f85-40ce-aa6d-1a15be47da85": {"__data__": {"id_": "f2be3dbb-9f85-40ce-aa6d-1a15be47da85", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7bce5eb-0717-49fa-a80f-f515e38381d1", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "e9e146a4a51ffb72f8de80e6f4bb0b4cc7f425f3149e5da5c62c7cabdc4e4831", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba4c0e99-d6dd-426a-8a59-778ed4689a93", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\data-analyst-roadmap.txt", "file_name": "data-analyst-roadmap.txt", "file_type": "text/plain", "file_size": 13837, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "f6f5ebd8aec565abd36522d832d8bf07b854c50bab4be3b634822537f2243a71", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Start every analysis with: \u201cWhat decision will this support?\u201d \u2014 not: \u201cwhat can I compute?\u201d\r\n\r\nAutomate repeatable work. Manual Excel manipulations are temporary; build a script or pipeline.\r\n\r\nOver-communicate results. Summaries + 1\u20132 visuals + recommended action = success.\r\n\r\nInvest in instrumentation. Good metrics and events are the analyst\u2019s best tool.\r\n\r\nKeep learning: data tools evolve \u2014 focus on concepts (causality, modeling, engineering) that transfer.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 463, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84905517-e5de-41e9-9b2e-3101069d5c6a": {"__data__": {"id_": "84905517-e5de-41e9-9b2e-3101069d5c6a", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "ddeac658b24314cce01518f142afc2d0249802c501ebda6c1cfe021017ab4f4d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "# Overview & mindset\r\nFrontend dev is both design+engineering: visual UX, browser internals, performance, accessibility, and system design (frontends are distributed systems). Successful frontend engineers combine strong fundamentals, practical tool fluency, product thinking, and communication/leadership.\r\n\r\nCore mindset:\r\n\r\nBuild small, testable pieces; iterate.\r\n\r\nPrioritize user experience: performance, accessibility, reliability.\r\n\r\nLearn the platform (browser) deeply \u2014 it informs good engineering decisions.\r\n\r\nBe pragmatic: choose the right tradeoffs for product constraints.\r\n\r\n# Fundamental layer (must master first)\r\nThese are non-negotiable \u2014 absolute foundation.\r\n\r\nHTML\r\nSemantic elements: headings, landmarks (<main>, <nav>, <article>), forms, tables (only for tabular data).\r\n\r\nAccessibility basics: aria-*, labelling inputs, alt text, roles, focus management.\r\n\r\nDocument structure & meta: charset, viewport, SEO meta, canonical links.\r\n\r\nCSS\r\nBox model, cascade, specificity, box-sizing.\r\n\r\nLayout:\r\n\r\nFlexbox (one-dimensional layout).\r\n\r\nGrid (two-dimensional layout) \u2014 responsive grid systems.\r\n\r\nResponsive design: mobile-first, media queries, clamp(), fluid typography.\r\n\r\nModern features: CSS variables, :is(), :where(), container queries, @supports.\r\n\r\nStyling strategies: BEM, Utility-first (Tailwind), CSS modules, CSS-in-JS tradeoffs.\r\n\r\nAnimations & transforms \u2014 preferred properties (transform, opacity) and performance.\r\n\r\nJavaScript (ES6+)\r\nSyntax: let/const, destructuring, spread/rest, template literals, arrow functions.\r\n\r\nClosures, this, prototypal inheritance, modules (ESM).\r\n\r\nAsynchronous model: Promises, async/await, event loop (microtask vs macrotask).\r\n\r\nDOM APIs: event handling, delegation, creation/manipulation, forms API.\r\n\r\nBrowser APIs: fetch, history, localStorage, sessionStorage, IndexedDB, Service Worker basics.\r\n\r\n# Tooling & developer workflow\r\nVersion control: Git fluency (branching strategies, rebasing, PRs, conflict resolution).\r\n\r\nPackage managers: npm, yarn, pnpm \u2014 lockfiles and semantic versioning.\r\n\r\nCode editor: VS Code power features (extensions, settings).\r\n\r\nTask runners & scripts: npm scripts, cross-env.\r\n\r\nLinters & formatters: ESLint, Prettier, stylelint.\r\n\r\nDevTools: Chrome/Firefox DevTools (network, performance profiler, memory snapshots, coverage).\r\n\r\nLocal dev servers & HMR: Vite, Webpack Dev Server, Parcel.\r\n\r\n# Frameworks & libraries (practical recommendations)\r\nChoose one deep, then learn others at a conceptual level.\r\n\r\nReact (most common): JSX, hooks (useState, useEffect, useRef), context, concurrent features, Suspense, component patterns.\r\n\r\nVue: reactivity system, composition API.\r\n\r\nAngular: TypeScript-first, dependency injection, RxJS.\r\n\r\nSvelte: compiler-driven approach, light runtime.\r\n\r\nAlso learn when not to use frameworks: Vanilla JS + progressive enhancement for small widgets.\r\n\r\n# State management & data fetching\r\nLocal state patterns: lift state, composition, derived state.\r\n\r\nGlobal state options: Context (React), Redux, Zustand, Recoil, MobX \u2014 tradeoffs: boilerplate, debug tools, predictability.\r\n\r\nServer-state libraries: React Query / TanStack Query, SWR \u2014 caching, mutation, background refetching.\r\n\r\nGraphQL basics vs REST: schemas, fetching strategies, pagination, caching (Apollo, urql).\r\n\r\nOptimistic updates and cache invalidation patterns.\r\n\r\n# TypeScript & typing\r\nBasic types, interfaces, union/intersection types, generics.\r\n\r\nstrict mode, noImplicitAny, and why they matter.\r\n\r\nType-first design: types as API contracts.\r\n\r\nReact + TypeScript patterns: props typing, FC vs function components, typing hooks.\r\n\r\nMigration strategies from JS to TS.\r\n\r\n# Build tools & bundlers\r\nBundlers: Webpack (advanced configurability), Vite (fast dev), Rollup (libraries).\r\n\r\nTree-shaking, code-splitting (dynamic import()), lazy loading routes/components.\r\n\r\nModule formats: ESM vs CommonJS; publishing libraries (umd/esm).\r\n\r\nAsset pipelines: image loaders, fonts, svgs, CSS extraction.\r\n\r\nModule federation & microfrontends (advanced).\r\n\r\n# Testing & quality\r\nUnit testing: Jest, Vitest.\r\n\r\nComponent testing: React Testing Library (focus on behavior, not internals).\r\n\r\nIntegration/E2E: Cypress, Playwright (end-to-end flows, cross-browser).\r\n\r\nVisual regression: Percy, Chromatic, Playwright snapshots.\r\n\r\nAccessibility testing: axe-core, Lighthouse audits, axe-playwright/cypress.\r\n\r\nTest strategy: small fast unit tests, stable E2E for critical flows, CI gating.\r\n\r\n# Performance engineering\r\nMetrics: FCP, LCP, CLS, TTI, TBT. Use Lighthouse & Web Vitals.\r\n\r\nCritical rendering path: minimize render-blocking CSS/JS, defer nonessential resources.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4673, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c16548b-5780-4920-88e5-86d47e953f6f": {"__data__": {"id_": "0c16548b-5780-4920-88e5-86d47e953f6f", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "ddeac658b24314cce01518f142afc2d0249802c501ebda6c1cfe021017ab4f4d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84905517-e5de-41e9-9b2e-3101069d5c6a", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "ebffb4eef3b3907fe6593d2f79c794b7a9b645b4ce6102f2bf8681e238103bcb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Visual regression: Percy, Chromatic, Playwright snapshots.\r\n\r\nAccessibility testing: axe-core, Lighthouse audits, axe-playwright/cypress.\r\n\r\nTest strategy: small fast unit tests, stable E2E for critical flows, CI gating.\r\n\r\n# Performance engineering\r\nMetrics: FCP, LCP, CLS, TTI, TBT. Use Lighthouse & Web Vitals.\r\n\r\nCritical rendering path: minimize render-blocking CSS/JS, defer nonessential resources.\r\n\r\nImage optimization: responsive images (srcset), WebP/AVIF, lazy loading (loading=\"lazy\"), modern formats.\r\n\r\nFonts: font-display: swap, preload critical fonts, subset fonts.\r\n\r\nCaching & CDN: asset hashing, Cache-Control headers, immutable caching.\r\n\r\nServer-side rendering (SSR) & hydration cost \u2014 when SSR helps (SEO, performance).\r\n\r\nEdge & CDN functions for fast regional responses.\r\n\r\nUse profiling tools: devtools performance, lighthouse-ci, FCP/LCP real-user monitoring (RUM).\r\n\r\n# Accessibility (A11y) \u2014 required for seniors\r\nKeyboard navigation: focus order, tabindex, visible focus styles.\r\n\r\nSemantic HTML basics to support AT (screen readers).\r\n\r\nLandmarks, labels, aria-* best practices and pitfalls.\r\n\r\nAccessible forms & validation messages (aria-live).\r\n\r\nColor contrast, text-size & responsive scaling.\r\n\r\nTesting: screen reader testing, keyboard-only flows, automated checks + manual validation.\r\n\r\n# Security (frontend concerns)\r\nXSS prevention: never inject untrusted HTML, use safe APIs or sanitizers (DOMPurify).\r\n\r\nCSRF basics for frontend \u2014 cookies vs tokens.\r\n\r\nHTTPS & secure cookies; Content Security Policy (CSP).\r\n\r\nSecure storage: avoid storing secrets in client code; prefer ephemeral tokens via secure flows (OAuth PKCE).\r\n\r\nAvoid eval, dynamic script injection, dangerous serialization (unsafe postMessage handling).\r\n\r\n# Progressive Web Apps & modern UX\r\nService Workers: caching strategies (network-first, cache-first), offline-first design.\r\n\r\nApp shell architecture, manifest, push notifications.\r\n\r\nInstallable web apps (PWA) & offline behavior design.\r\n\r\nAccessibility & graceful fallback when offline.\r\n\r\n# Server-side rendering, SSG, Incremental static regeneration\r\nNext.js, Nuxt, Gatsby patterns: SSR, SSG, ISR.\r\n\r\nTradeoffs: SEO, first-load performance vs complexity (hydration cost).\r\n\r\nEdge rendering & serverless functions (Vercel, Netlify, Cloudflare Workers).\r\n\r\n# Browser internals & deep platform knowledge (senior-level)\r\nHow HTML, CSSOM, JS engine, layout, paint, composite interact.\r\n\r\nJank causes: layout thrashing, forced reflow, long tasks.\r\n\r\nMemory model: detached DOM nodes, closures leaking memory.\r\n\r\nResource loading order and preconnect/preload.\r\n\r\nSpec familiarity: event loop details, pointer events, input event coalescing.\r\n\r\n# Advanced architecture & scaling\r\nComponent design systems: tokens, design tokens, theming, Storybook.\r\n\r\nMonorepos & package management: Turborepo, pnpm/workspaces, Lerna.\r\n\r\nMicrofrontends: pros & cons, integration strategies (iframes, module federation, edge composition).\r\n\r\nAPI design & contracts: GraphQL schema ownership, REST versioning, pagination patterns, backpressure handling.\r\n\r\nObservability: client-side logging, feature flags, experiments/A-B testing.\r\n\r\n# WebAssembly & non-JS runtimes (advanced)\r\nWhen to use WASM: CPU-heavy tasks (image processing, codecs), porting existing C/C++ libs.\r\n\r\nInterop costs & memory sharing.\r\n\r\nEcosystem: Rust\u2192WASM via wasm-bindgen, tooling considerations.\r\n\r\n# Soft skills, product & leadership\r\nCommunication: write good RFCs, PR descriptions, and design docs.\r\n\r\nProduct sense: measure & improve key metrics (engagement, conversion).\r\n\r\nMentorship: code reviews that teach, pair-programming, technical growth for juniors.\r\n\r\nRoadmapping & tradeoff decision: evaluate time-to-value and maintainability.\r\n\r\nStakeholder management: translate technical constraints into product tradeoffs.\r\n\r\n# Career path & roles\r\nTypical ladder: Junior \u2192 Mid \u2192 Senior \u2192 Staff/Principal \u2192 Engineering Manager / Architect.\r\n\r\nSenior expectations: ownership of features/systems, mentoring, design reviews, reliability & performance leadership.\r\n\r\nStaff/Principal: cross-team systems, architecture, high-level technical strategy.\r\n\r\nManager path: focus shifts toward people management, hiring, project prioritization.\r\n\r\n# Portfolio, resume & job hunt practicals\r\nBuild 3\u20135 polished projects showcasing depth: a production-ready web app with SSR, a component library with Storybook, a PWA with offline support, a high-performance dashboard with charts.\r\n\r\nGitHub: clean repos, CI badges, README with live demo, deployment link (Netlify/Vercel), clear setup instructions.\r\n\r\nBlog/medium posts: explain technical choices, performance work, architecture tradeoffs \u2014 shows communication and depth.\r\n\r\nOpen-source contributions: small PRs, bugfixes to libraries you use \u2014 emphasise code quality & collaboration.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4840, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bbf061b9-8b1d-40e7-a362-2e4c6cc10482": {"__data__": {"id_": "bbf061b9-8b1d-40e7-a362-2e4c6cc10482", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea87b8a4-6a74-4fc5-bcf8-e14a50b1eb43", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "ddeac658b24314cce01518f142afc2d0249802c501ebda6c1cfe021017ab4f4d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c16548b-5780-4920-88e5-86d47e953f6f", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\frontend-roadmap.txt", "file_name": "frontend-roadmap.txt", "file_type": "text/plain", "file_size": 12704, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "97e9072fa18fc37afe4f6bd8f2724d1e7a54d1e64d87fee00896089e67f8b8e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "GitHub: clean repos, CI badges, README with live demo, deployment link (Netlify/Vercel), clear setup instructions.\r\n\r\nBlog/medium posts: explain technical choices, performance work, architecture tradeoffs \u2014 shows communication and depth.\r\n\r\nOpen-source contributions: small PRs, bugfixes to libraries you use \u2014 emphasise code quality & collaboration.\r\n\r\nInterview prep: coding problems, system design for frontends (how to design large-scale client app, deploy, handle failures), behavioral stories (STAR format).\r\n\r\n# Interview & senior-level topics checklist\r\nCore JS: closures, prototypes, event loop, hoisting.\r\n\r\nDOM & browser APIs: event handling, memory leaks, performance profiling.\r\n\r\nReact or chosen framework internals: reconciliation, hooks rules, concurrency model.\r\n\r\nTypeScript typing & design patterns.\r\n\r\nArchitecture: componentization, state handling, SSR vs CSR, microfrontends.\r\n\r\nTesting strategy & examples: unit test a UI component; write an integration test for routing; show E2E test flow.\r\n\r\nReal-world debugging examples: explain a past performance bug and remediation (or write a postmortem-style explanation).\r\n\r\nSystem design for frontends: how to architect a dashboard that loads in <1s across regions.\r\n\r\n# Practical learning routes & timelines\r\nOn-ramp (0\u20133 months) \u2014 fundamentals\r\nLearn HTML5 semantics, CSS basics, responsive layouts (Flexbox + Grid).\r\n\r\nJavaScript basics: closures, async/await, DOM.\r\n\r\nBuild small projects: landing page, blog template, responsive card grid.\r\n\r\nTools: Git, VS Code, npm.\r\n\r\nDeliverable: deploy a responsive landing page (Netlify/Vercel) with a contact form.\r\n\r\nFoundation (3\u20136 months) \u2014 framework & tooling\r\nPick a framework (React/Vue) \u2014 learn routing, state, component patterns.\r\n\r\nTypeScript basics + migrate a small project.\r\n\r\nTesting basics: Jest + React Testing Library.\r\n\r\nProject: small SPA with authentication (mocked) and REST API.\r\n\r\nDeliverable: SPA with auth, unit tests, CI workflow.\r\n\r\nIntermediate (6\u201312 months) \u2014 product & production\r\nAdvanced state management and server-state (React Query).\r\n\r\nSSR / SSG with Next.js or framework equivalent.\r\n\r\nPerformance profiling, Lighthouse fixes, accessibility audits.\r\n\r\nBuild a PWA with offline support and service worker.\r\n\r\nDeliverable: E2E tested PWA deployed with CI, logging & basic monitoring.\r\n\r\nAdvanced (1\u20133 years) \u2014 systems & scale\r\nComponent library + Storybook, design tokens, theming.\r\n\r\nMicrofrontends/monorepo patterns, module federation.\r\n\r\nObservability & client-side performance measurement (RUM).\r\n\r\nBuild production features with A/B testing & telemetry.\r\n\r\nDeliverable: Component library + large app migration plan; production monitoring.\r\n\r\nMastery (3\u201310 years)\r\nArchitect cross-team frontend systems, global performance initiatives.\r\n\r\nMentoring, design reviews, ownership of frontend platform.\r\n\r\nInnovate: adopt edge rendering, WASM for hotspots, advanced offline-first patterns.\r\n\r\n# Sample 12-week study plan (practical)\r\nWeek 1\u20132: HTML & CSS fundamentals, build static landing page.\r\nWeek 3\u20134: Advanced CSS (Grid, Flexbox), responsive design, accessibility basics.\r\nWeek 5\u20136: JavaScript core + small interactive widgets (modal, dropdown).\r\nWeek 7\u20138: React fundamentals + hooks; build small SPA.\r\nWeek 9: TypeScript intro & migration.\r\nWeek 10: Testing: unit tests & component tests.\r\nWeek 11: Performance & Lighthouse fixes; lazy loading images & code split.\r\nWeek 12: Deploy app with CI, write README, prepare portfolio.\r\n\r\n# Suggested projects (progression)\r\nBeginner: Personal portfolio site (HTML/CSS/vanilla JS).\r\n\r\nIntermediate: Todo app with persistence (localStorage) and tests.\r\n\r\nIntermediate+: Blog with markdown support and SSG (Next.js/Gatsby).\r\n\r\nAdvanced: E-commerce cart + SSR + payments integration + analytics + A/B tests.\r\n\r\nPro: Component library (design tokens) + Storybook + publishable npm package.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3881, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45faa1dd-da6d-44bc-af05-483bc9eec234": {"__data__": {"id_": "45faa1dd-da6d-44bc-af05-483bc9eec234", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c453913ca8e2c5d6bbfb2aa0ea7d94d6f9fe0bc05117483597fec751ea283697", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Designs, trains/tunes, evaluates, and productionizes generative models and the systems around them. That includes:\r\n\r\nprompt engineering & prompt/system design,\r\n\r\nretrieval-augmented generation (RAG) & knowledge ingestion,\r\n\r\nfine-tuning and parameter-efficient tuning (LoRA/PEFT/QLoRA),\r\n\r\nmodel infra (serving, scaling, latency/cost tradeoffs),\r\n\r\nevaluation, safety, and monitoring (hallucinations, bias, misuse),\r\n\r\ntooling and MLOps for repeatability and governance.\r\n\r\nHigh-level learning flow (compact)\r\nFoundations \u2192 Model Fundamentals \u2192 Practical Gen-AI (APIs & LLMs) \u2192 RAG + Retrieval \u2192 Fine-tuning & PEFT \u2192 Evaluation & Safety \u2192 Production + MLOps \u2192 Scale & Research.\r\n\r\nBEGINNER (0 \u2192 2 months) \u2014 learn the foundations, get hands-on fast\r\nGoal: Understand basic ML/NLP concepts, call LLM APIs, build simple RAG chatbot, learn tooling.\r\n\r\nCore knowledge & skills\r\nProgramming: solid Python (virtualenv/venv, packages, typing basics).\r\n\r\nML basics: supervised learning, loss, gradients \u2014 intuition only.\r\n\r\nNLP basics: tokens, tokenization, embedding idea, seq \u2192 label concept.\r\n\r\nPrompting & API usage: how to call an LLM (system + user prompts), temperature, max_tokens, top_p, stop sequences, simple few-shot prompting.\r\n\r\nData handling: text cleaning, chunking/segmentation, simple metadata.\r\n\r\nEmbeddings & retrieval: concept of embedding vectors and nearest-neighbor retrieval.\r\n\r\nVector stores (conceptual): what a vector DB does (store/query by embedding) \u2014 e.g., local FAISS / in-memory vs hosted solutions.\r\n\r\nTools & libs to install & try\r\nPython, pip, requests/httpx, Jupyter/Colab.\r\n\r\nHugging Face transformers & diffusers (for experimentation).\r\n\r\nSentence-transformers (for embeddings) and FAISS or a simple in-memory vector store.\r\n\r\nTry a hosted LLM API (OpenAI/Anthropic/Cohere/Hugging Face Inference) for quick prototyping.\r\n\r\nFirst practical project (weekend)\r\nTiny RAG chat assistant\r\n\r\nIngest a handful of docs (PDF/text).\r\n\r\nChunk docs into ~1\u20132k token pieces, generate embeddings, index in FAISS.\r\n\r\nFor a query: embed query \u2192 top-k search \u2192 stitch top docs into a prompt template \u2192 call LLM and return answer.\r\n\r\nMinimal pseudo-code sketch (high-level):\r\n\r\npython\r\nCopy\r\nEdit\r\n# 1) embed docs (with sentence-transformers or API embeddings)\r\n# 2) index into FAISS\r\n# 3) on query:\r\nq_emb = embed(query)\r\nids, scores = faiss_index.search(q_emb, k=5)\r\ncontext = \"\\n\\n\".join(docs[i] for i in ids)\r\nprompt = f\"Use the following docs to answer:\\n\\n{context}\\n\\nQ: {query}\"\r\nanswer = llm_api.call(prompt)\r\nBeginner deliverables\r\nWorking RAG chatbot on localhost or Colab.\r\n\r\nShort write-up: dataset description, chunking strategy, prompt templates used, failure cases observed.\r\n\r\nINTERMEDIATE (2 \u2192 8 months) \u2014 deep practical skillset & reproducible workflows\r\nGoal: fine-tune & customize models, build robust retrieval pipelines, evaluation metrics, simple production deployment.\r\n\r\nCore areas to learn & practice\r\nTransformers internals (practical):\r\n\r\ntokenizers, attention basics, encoder vs decoder vs seq2seq.\r\n\r\nhow context length affects design and cost (chunking strategies, sliding windows).\r\n\r\nEmbeddings and Vector DBs:\r\n\r\nvector DB options & tradeoffs (FAISS/Annoy/chroma/Pinecone/Weaviate/Milvus): latency, persistence, scaling, metadata filtering (MMS/filters).\r\n\r\nembedding quality matters \u2014 try sentence-transformers vs API embeddings.\r\n\r\nRAG patterns & pipelines:\r\n\r\nRetriever + Reader architecture, dense retrievers vs hybrid (sparse + dense).\r\n\r\nRetrieval augmentation: rerankers, citation/attribution strategies, provenance tracking, retrieval prompts.\r\n\r\nFine-tuning & PEFT:\r\n\r\nFull fine-tuning vs parameter-efficient approaches (LoRA/PEFT), QLoRA for memory-efficient finetune on large models.\r\n\r\nData preparation: instruction tuning, formatting dialogs, deduplication, quality labeling, dataset balancing.\r\n\r\nEvaluation & human-in-the-loop:\r\n\r\nAutomated signals: perplexity, ROUGE/BLEU for some tasks (limited), answer overlap metrics; embedding-based similarity and faithfulness metrics.\r\n\r\nHuman eval: rubric design, A/B testing, red-team tests to elicit harmful outputs.\r\n\r\nCalibration & confidence: when to abstain or escalate to human.\r\n\r\nModel safety & filtering:\r\n\r\nInput sanitization, prompt injection awareness, output filters, content moderation layers, rate limits and access controls.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4347, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "604e711a-856b-4297-9b82-aa683d59377f": {"__data__": {"id_": "604e711a-856b-4297-9b82-aa683d59377f", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c453913ca8e2c5d6bbfb2aa0ea7d94d6f9fe0bc05117483597fec751ea283697", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45faa1dd-da6d-44bc-af05-483bc9eec234", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "80ad598a66249237577cb0ce32f810a83007048fabcd7d4b9e3a01ec4c5958ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Evaluation & human-in-the-loop:\r\n\r\nAutomated signals: perplexity, ROUGE/BLEU for some tasks (limited), answer overlap metrics; embedding-based similarity and faithfulness metrics.\r\n\r\nHuman eval: rubric design, A/B testing, red-team tests to elicit harmful outputs.\r\n\r\nCalibration & confidence: when to abstain or escalate to human.\r\n\r\nModel safety & filtering:\r\n\r\nInput sanitization, prompt injection awareness, output filters, content moderation layers, rate limits and access controls.\r\n\r\nServing & lightweight productionization:\r\n\r\nCreate an inference API (FastAPI/uvicorn), simple batching/caching, rate limiting.\r\n\r\nConsider a simple managed solution for inference or containerized model with local GPU if using open models.\r\n\r\nIntermediate projects (practical & measurable)\r\nProject: Domain-specific QA\r\n\r\nBuild a RAG stack for a domain (legal docs, product manuals).\r\n\r\nAdd provenance (which doc, which chunk) and generate citations in the answer.\r\n\r\nAdd automated evaluation: sample QA pairs, compute retrieval recall@k, and track answer factuality via overlap or human grading.\r\n\r\nProject: Instruction fine-tuned assistant\r\n\r\nCollect ~1k\u201310k instruction/response pairs (synthetic + human).\r\n\r\nUse PEFT/LoRA to fine-tune a base model; measure improvement on domain tasks.\r\n\r\nDeploy small inference endpoint and measure latency/cost.\r\n\r\nExample sketch: LoRA/PEFT pipeline (conceptual)\r\nTokenize instruction/response pairs into conversational format.\r\n\r\nLoad a base model with quantized/8-bit loading if memory constrained.\r\n\r\nWrap model with PEFT adapters (LoRA), train with low learning rate.\r\n\r\nEvaluate on held-out set and conduct small human checks.\r\n\r\nReproducibility & tooling\r\nUse experiment tracking (MLflow/Weights & Biases) to log datasets, seeds, metrics, artifacts.\r\n\r\nContainerize training runs (Docker) or use accelerate/deepspeed for multi-GPU.\r\n\r\nUse dataset versioning (DVC or dataset snapshots) and seeded splits.\r\n\r\nIntermediate deliverables\r\nA domain RAG system with: retrieval metrics (recall@k), answer quality checks, deployed inference endpoint, CI to run unit/integration tests for pipelines.\r\n\r\nADVANCED (8+ months \u2192 2+ years) \u2014 scale, research, systems & safety\r\nGoal: design, optimize and operate large Gen-AI systems at scale; lead architecture and safety efforts.\r\n\r\nAdvanced technical topics\r\nScaling & infra\r\n\r\nmodel sharding (tensor/pipeline/model parallelism), inference optimizations, batching strategies, dynamic batching, autoscaling GPU pods.\r\n\r\ninference engines: optimized runtimes (TensorRT/ONNX Runtime/Triton/DeepSpeed Inference) and tradeoffs.\r\n\r\nquantization & compression: 8/4/2-bit quantization, activation quantization, and effects on accuracy.\r\n\r\nmemory & cost optimization: offloading, caching logits/embeddings, hybrid cloud/edge strategies.\r\n\r\nAdvanced fine-tuning & alignment\r\n\r\nRLHF pipeline: reward model training, preference data collection, PPO or safer alternatives; managing the instability of RL.\r\n\r\ninstruction-tuning at scale, safety alignment strategies, and guardrails (scoring, monitoring).\r\n\r\nRobust evaluation & continuous validation\r\n\r\nBuild automated eval suites: adversarial tests, domain stress tests, truthfulness checks, calibration.\r\n\r\nContinuous monitoring: hallucination rates, latency, drift in input distribution, concept drift in knowledge bases.\r\n\r\nGovernance, ethics & compliance\r\n\r\ndataset documentation (datasheets), model cards, audits, privacy-preserving techniques (DP, secure aggregation, federated training).\r\n\r\naccess controls, rate limits, logging & audit trails for queries/responses.\r\n\r\nResearch & innovation\r\n\r\nKeep current with model architectures, new pretraining objectives, retrieval paradigms, multi-modal models (text+image+audio+video).\r\n\r\nPrototype novel ideas: retrieval as memory, retrieval augmentation for chain-of-thought, multimodal fusion.\r\n\r\nAdvanced projects (impactful & production)\r\nProject: Global RAG platform\r\n\r\nMulti-tenant RAG with per-tenant vector DBs and policy isolation, metrics/observability, real-time indexing pipelines, hot/cold storage tiers, and robust SLOs.\r\n\r\nProject: Low-latency assistant service\r\n\r\nUse quantized models + optimized inference stack to achieve sub-200ms tail latency for short responses at 95th percentile; implement fallback to larger model for complex queries.\r\n\r\nProject: RLHF & alignment pipeline\r\n\r\nBuild preference collection workflows, reward model lifecycle, safe deployment of policy updates with canary/rollout strategy.\r\n\r\nLeadership & system ops\r\nDefine SLO/SLAs, incident runbooks, responsible update processes.\r\n\r\nCreate red-team and bug bounty practices for model misuse testing.\r\n\r\nLead cross-functional governance (legal/compliance/ops) for deployment.\r\n\r\nCross-cutting engineering checklist (apply at every level)\r\nData quality: dedupe, provenance, schema checks, label audits.\r\n\r\nReproducibility: seed + deterministic pipelines when possible; log all config.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "988709bd-2347-47e6-b24e-ae2bc04b5bfe": {"__data__": {"id_": "988709bd-2347-47e6-b24e-ae2bc04b5bfe", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c453913ca8e2c5d6bbfb2aa0ea7d94d6f9fe0bc05117483597fec751ea283697", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "604e711a-856b-4297-9b82-aa683d59377f", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "7cccc1711e5aaaa801a0996e6c7cf49528f31de947c214e475bda10930f09cb4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Leadership & system ops\r\nDefine SLO/SLAs, incident runbooks, responsible update processes.\r\n\r\nCreate red-team and bug bounty practices for model misuse testing.\r\n\r\nLead cross-functional governance (legal/compliance/ops) for deployment.\r\n\r\nCross-cutting engineering checklist (apply at every level)\r\nData quality: dedupe, provenance, schema checks, label audits.\r\n\r\nReproducibility: seed + deterministic pipelines when possible; log all config.\r\n\r\nTesting: unit tests for components, integration tests for pipelines, smoke tests for endpoints, and regression tests for model metrics.\r\n\r\nObservability: logs, traces, metrics; publish dashboards for model quality (hallucination rate, distribution shift).\r\n\r\nSecurity: input validation, prompt injection mitigation, rate limiting, monitoring for abuse.\r\n\r\nCost controls: monitor token usage, model choice, caching & batching to reduce spend.\r\n\r\nCore skills matrix (compact)\r\nProgramming & infra\tML & modeling\tNLP & LLM-specific\tSafety & eval\tMLOps\r\nPython, Docker, FastAPI\tPyTorch, JAX basics\ttokenization, embeddings\tcontent filtering\tCI/CD, experiment tracking\r\nAsync I/O, system design\tTransformers, Hugging Face\tRAG, rerankers, prompt templates\thuman eval, red-teaming\tdeployment, autoscaling\r\nCloud infra (AWS/GCP/Azure)\tfine-tuning, PEFT\tevaluation metrics for gen tasks\tprivacy & governance\tmonitoring & cost analysis\r\n\r\nRecommended study path & sample timeline (intensive / self-paced)\r\nWeeks 0\u20132: Python + small ML refresher; get Hugging Face transformers and a hosted LLM API call working.\r\n\r\nWeeks 3\u20136: Build beginner RAG chatbot; experiment with embeddings & FAISS.\r\n\r\nWeeks 7\u201312: Learn fine-tuning basics + PEFT; do a small LoRA fine-tune on domain dataset. Track experiments.\r\n\r\nMonths 4\u20138: Productionize RAG with a vector DB, add provenance, build automated eval. Add monitoring.\r\n\r\nMonths 9\u201318+: Dive into scaling & infra, RLHF basics, alignment topics, advanced quantization & inference engineering.\r\n\r\nPractical code patterns & short examples\r\n1) Simple retrieval + prompt (conceptual)\r\npython\r\nCopy\r\nEdit\r\n# embed query -> search vector DB -> build prompt -> call LLM\r\nq_emb = embed(query)                       # use sentence-transformers or API embeddings\r\nids = vector_db.query(q_emb, top_k=5)      # returns doc ids + metadata\r\nctx = \"\\n\\n\".join([docs[i] for i in ids])\r\nprompt = f\"Context:\\n{ctx}\\n\\nAnswer concisely: {query}\"\r\nanswer = call_llm(prompt)\r\n2) Minimal FastAPI inference endpoint\r\npython\r\nCopy\r\nEdit\r\nfrom fastapi import FastAPI\r\napp = FastAPI()\r\n\r\n@app.post(\"/qa\")\r\nasync def qa(body: dict):\r\n    q = body[\"query\"]\r\n    ctx = retrieve_context(q)\r\n    prompt = f\"Context:\\n{ctx}\\n\\nQ: {q}\"\r\n    resp = llm_api(prompt)\r\n    return {\"answer\": resp}\r\n3) PEFT/LoRA fine-tuning sketch (conceptual)\r\npython\r\nCopy\r\nEdit\r\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments\r\nfrom peft import LoraConfig, get_peft_model\r\n\r\ntokenizer = AutoTokenizer.from_pretrained(base_model)\r\nmodel = AutoModelForCausalLM.from_pretrained(base_model, low_cpu_mem_usage=True)\r\nlora_config = LoraConfig(r=8, lora_alpha=32, target_modules=[\"q_proj\",\"v_proj\"])\r\nmodel = get_peft_model(model, lora_config)\r\n# prepare dataset, Trainer, and train (small lr, gradient accumulation)\r\n(Use framework docs / accelerate for large models and multi-GPU.)\r\n\r\nEvaluation, metrics & human review (practice)\r\nRetrieval metrics: recall@k, MRR for retrieval quality.\r\n\r\nAnswer quality metrics: human score (precision-like scales), automated heuristics (overlap, factuality signals), consistency checks (ask rephrasing).\r\n\r\nSafety metrics: incidents per thousand queries, rate of outputs flagged by filters, red-team success rate.\r\n\r\nBusiness metrics: task completion rate, user satisfaction, fallbacks to human operator.\r\n\r\nResponsible AI & safety checklist (production)\r\nDataset documentation (sources, licenses, sampling bias).\r\n\r\nModel card describing intended use, limitations, and evaluation results.\r\n\r\nAccess controls and rate limits by user tier.\r\n\r\nContent moderation & escalation path for harmful outputs.\r\n\r\nPrivacy & PII handling rules; minimize logging of raw user content; redact or encrypt PII in logs; follow local laws.\r\n\r\nRecommended projects (by level) \u2014 concrete deliverables\r\nBeginner: RAG FAQ bot for a website (FAISS + simple prompt).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4333, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1cfe1e31-fb0c-4f43-84f9-8d43c18bbc04": {"__data__": {"id_": "1cfe1e31-fb0c-4f43-84f9-8d43c18bbc04", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c79cdb7e-13e9-4aaa-95c5-e585cc45bce0", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c453913ca8e2c5d6bbfb2aa0ea7d94d6f9fe0bc05117483597fec751ea283697", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "988709bd-2347-47e6-b24e-ae2bc04b5bfe", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\genai-roadmap.txt", "file_name": "genai-roadmap.txt", "file_type": "text/plain", "file_size": 14466, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "6b3a6a8fd2df4651fa19d9da9d24361f37159e24b087aab54a29d44a51b4b89d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Model card describing intended use, limitations, and evaluation results.\r\n\r\nAccess controls and rate limits by user tier.\r\n\r\nContent moderation & escalation path for harmful outputs.\r\n\r\nPrivacy & PII handling rules; minimize logging of raw user content; redact or encrypt PII in logs; follow local laws.\r\n\r\nRecommended projects (by level) \u2014 concrete deliverables\r\nBeginner: RAG FAQ bot for a website (FAISS + simple prompt).\r\n\r\nIntermediate: Domain assistant (legal/medical/product docs) with fine-tuned LLM, provenance, and CI that runs retrieval/answer tests.\r\n\r\nAdvanced: Multi-tenant RAG platform (tenant isolation, streaming indexing, SLOs, observability, cost controls) + RLHF or alignment experiments on internal data.\r\n\r\nInterview prep checklist for Gen-AI engineer roles\r\nExplain transformer attention and tokenizer issues (OOM & context length tradeoffs).\r\n\r\nDescribe RAG architecture and failure modes (retrieval misses, hallucinations).\r\n\r\nWalk through a fine-tuning or PEFT pipeline and tradeoffs (compute, data volume, forgetting).\r\n\r\nShow how to profile and reduce inference latency or cost (quantization, batching, caching, model choice).\r\n\r\nDiscuss safety: prompt injection, privacy, and mitigation strategies.\r\n\r\nWhiteboard: design a scalable chatbot architecture with multi-model fallback and monitoring.\r\n\r\nCareer paths & roles you\u2019ll grow into\r\nGenAI Engineer / ML Engineer (build models + productionize).\r\n\r\nMLOps / Platform Engineer (infrastructure for training/serving).\r\n\r\nResearch Engineer (prototype new model ideas and publish).\r\n\r\nSafety/Alignment Engineer (red-team, alignment pipelines, policy).\r\n\r\nLead / Architect (design multi-model systems, governance).\r\n\r\nCommon pitfalls & how to avoid them\r\nRelying on token counts as proxy for cost \u2014 measure end-to-end costs (embedding + retrieval + LLM).\r\n\r\nIgnoring retrieval provenance \u2014 always surface the source of retrieved content.\r\n\r\nPoor dataset hygiene \u2014 bad data creates persistent model biases.\r\n\r\nNo automated eval \u2014 without continuous checks you\u2019ll regress silently.\r\n\r\nNot monitoring user queries \u2014 rare/abusive inputs can break models in production.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2138, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8e3e35fe-0c33-46da-a6d8-4a545836e180": {"__data__": {"id_": "8e3e35fe-0c33-46da-a6d8-4a545836e180", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef468583-d539-4770-880b-c426c78c263a", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "2e148b8b602901b60ff01aa6bd57960a24b2e8cff05e0eafbeb34847ff4cde58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "A Java developer builds maintainable, performant, and secure server-side and client-side (desktop/Android/back-end) applications. Java is used across enterprise systems, cloud services, microservices, mobile (Android), big data, and embedded systems. The roadmap below focuses on becoming a professional backend/full-stack Java developer plus advanced platform expertise (JVM & performance).\r\n\r\nHigh-level road map (one-line)\r\nBeginner: Master Java syntax, OOP, basics of the JDK, and simple apps.\r\nIntermediate: Build web services, databases, testing, containers, and CI.\r\nAdvanced: Master JVM internals, performance, distributed systems, observability, and system architecture.\r\n\r\nBeginner (0\u20133 months) \u2014 fundamentals & velocity\r\nGoal: become fluent in Java syntax, OOP, the JDK standard library, build small apps, and use an IDE.\r\n\r\nCore skills\r\nJava language basics: types, operators, control flow, arrays.\r\n\r\nOOP fundamentals: classes, objects, constructors, inheritance, polymorphism, interfaces, encapsulation.\r\n\r\nCollections API: List, Set, Map, iterators, Comparator, Collections utilities.\r\n\r\nException handling: checked vs unchecked, try-with-resources.\r\n\r\nBasic I/O: java.nio.file.Path, Files, streams, text vs binary IO.\r\n\r\nBasic concurrency: Thread, Runnable, synchronized, volatile (concept overview).\r\n\r\nUse the JDK: javac, java, javadoc, jar.\r\n\r\nBuild tools intro: Maven or Gradle basics (create simple pom.xml or build.gradle).\r\n\r\nIDE: IntelliJ IDEA (Community), or Eclipse/VS Code \u2014 learn debugging, breakpoints, and refactorings.\r\n\r\nVersion control: Git basics (clone, branch, commit, push, basic PR flow).\r\n\r\nPractical tasks & small projects\r\nHello world + small console utilities (CSV processor, text analyzer).\r\n\r\nBuild a CLI TODO app that persists to a JSON file or SQLite (using JDBC).\r\n\r\nSolve algorithmic puzzles (arrays, strings) to strengthen problem solving.\r\n\r\nCommands & snippets\r\nCompile and run:\r\n\r\nbash\r\nCopy\r\nEdit\r\njavac Hello.java\r\njava Hello\r\nMaven quick run (after mvn archetype:generate or a simple project):\r\n\r\nbash\r\nCopy\r\nEdit\r\nmvn clean package\r\njava -jar target/myapp.jar\r\nBeginner \u201cdone\u201d checklist\r\nCan write and debug Java programs in an IDE.\r\n\r\nUnderstand and use collections and streams-of-control.\r\n\r\nKnow how to create a simple Maven/Gradle build and run tests with JUnit.\r\n\r\nIntermediate (3\u201312 months) \u2014 real apps & professional craft\r\nGoal: build web APIs, data access, automated tests, dockerized apps, CI pipelines, and write production-ready code.\r\n\r\nCore skills\r\nModern Java features: lambdas, streams, Optional, var (local inference), records, text blocks (depending on your JDK version). (Learn ES-style features introduced since Java 8.)\r\n\r\nDeep collections usage and functional operations with Stream.\r\n\r\nWeb frameworks: Spring Boot (most common), and familiarity with Jakarta EE / Micronaut / Quarkus as alternatives.\r\n\r\nREST API design: controllers, DTOs, status codes, content negotiation, error handling.\r\n\r\nPersistence:\r\n\r\nJDBC basics for low-level SQL.\r\n\r\nJPA / Hibernate: entities, relationships, lazy vs eager fetching, transaction boundaries.\r\n\r\nDatabase migrations: Flyway or Liquibase.\r\n\r\nData stores: PostgreSQL (relational), basics of a NoSQL store (Redis for cache, MongoDB).\r\n\r\nTesting:\r\n\r\nUnit testing with JUnit 5.\r\n\r\nMocking with Mockito.\r\n\r\nIntegration tests using Testcontainers (Docker-backed DB) or in-memory DB for fast feedback.\r\n\r\nConcurrency & parallelism:\r\n\r\nExecutorService, futures, CompletableFuture patterns.\r\n\r\nThread-safety concerns, concurrent collections.\r\n\r\nSecurity: basic auth flows, JWT, password hashing (bcrypt), OWASP awareness (SQL injection, XSS in web UIs, CSRF).\r\n\r\nPackaging & deployment:\r\n\r\nBuild fat JARs (Spring Boot), Dockerize the app, run with a container locally.\r\n\r\nBasic CI with GitHub Actions / GitLab CI \u2014 run tests and build images on PR.\r\n\r\nIntermediate projects (deployable)\r\nRESTful Task Manager: Spring Boot API, PostgreSQL, Docker, simple React or Thymeleaf front-end, JWT auth, unit+integration tests, CI pipeline.\r\n\r\nBatch CSV Processor: scheduled job with Spring Boot, read CSVs, write to DB, integration tests, configuration via environment variables.\r\n\r\nCaching experiment: add Redis caching for expensive endpoints, invalidate cache correctly.\r\n\r\nTooling & workflow\r\nUse Maven or Gradle wrapper (./mvnw / ./gradlew) for reproducible builds.\r\n\r\nIDE: use live templates, refactorings, and code inspections.\r\n\r\nLogging: structured logs with Logback/SLF4J, externalize logging config.\r\n\r\nLocal dev: Docker Compose for multi-service dev (DB + app + Redis).\r\n\r\nContinuous integration: tests, static analysis (SpotBugs, SonarLint), dependency checks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4673, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "acebcc30-9af9-4538-ac34-ccc1a1f654dc": {"__data__": {"id_": "acebcc30-9af9-4538-ac34-ccc1a1f654dc", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef468583-d539-4770-880b-c426c78c263a", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "2e148b8b602901b60ff01aa6bd57960a24b2e8cff05e0eafbeb34847ff4cde58", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e3e35fe-0c33-46da-a6d8-4a545836e180", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "c968686ed5e3318ada7bc1194c88a85abb375d9726dc61fad9e0d99f2ce6c3af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Tooling & workflow\r\nUse Maven or Gradle wrapper (./mvnw / ./gradlew) for reproducible builds.\r\n\r\nIDE: use live templates, refactorings, and code inspections.\r\n\r\nLogging: structured logs with Logback/SLF4J, externalize logging config.\r\n\r\nLocal dev: Docker Compose for multi-service dev (DB + app + Redis).\r\n\r\nContinuous integration: tests, static analysis (SpotBugs, SonarLint), dependency checks.\r\n\r\nIntermediate \u201cdone\u201d checklist\r\nCan design and implement a REST API with persistence, tests, and CI.\r\n\r\nUnderstand transactional boundaries and how ORM fetching works.\r\n\r\nAble to containerize app and deploy it to a simple environment (Heroku, AWS ECS, or a cloud VM).\r\n\r\nAdvanced (12+ months) \u2014 systems, JVM mastery, scale & leadership\r\nGoal: own high-scale systems, optimize JVM performance, lead design, and mentor others.\r\n\r\nCore advanced skills\r\nJVM internals & performance\r\nClassloading, bytecode basics, HotSpot architecture, interpreter vs JIT, tiered compilation.\r\n\r\nMemory layout: heap regions (young/old), metaspace, stack frames, native memory.\r\n\r\nGarbage collectors: G1, ZGC, Shenandoah \u2014 strengths and tuning knobs (pause time vs throughput).\r\n\r\nProfiling & tooling:\r\n\r\nJava Flight Recorder (JFR) + Java Mission Control (JMC).\r\n\r\nVisualVM, async-profiler, YourKit, jcmd, jmap, jstack.\r\n\r\nGC tuning, allocation patterns, escape analysis, object pooling tradeoffs.\r\n\r\nConcurrency & modern threading models\r\nAdvanced concurrency constructs: java.util.concurrent toolkit (Locks, Semaphores, Phaser, ConcurrentHashMap).\r\n\r\nLock-free programming patterns, memory visibility, and the Java Memory Model.\r\n\r\nReactive & non-blocking programming: Reactor / Project Reactor, RxJava, WebFlux, and reactive drivers (R2DBC, reactive Mongo).\r\n\r\nProject Loom & virtual threads (if available on your JDK): model differences, when to use virtual threads vs event loops.\r\n\r\nArchitecture & distributed systems\r\nMicroservices patterns: service discovery, API gateway, circuit breaker (resilience4j), bulkhead, rate limiting, health checks.\r\n\r\nObservability: structured logging, correlation IDs, tracing (OpenTelemetry/Jaeger), metrics (Micrometer \u2192 Prometheus + Grafana).\r\n\r\nMessage-driven systems: Kafka, RabbitMQ \u2014 exactly-once vs at-least-once semantics, partitioning strategy, consumer groups, offsets.\r\n\r\nData architectures: caching, CQRS, event sourcing basics, database partitioning, sharding strategies.\r\n\r\nDeployment at scale: container orchestration (Kubernetes), Helm charts, service meshes (Istio/Linkerd), autoscaling strategies.\r\n\r\nCloud infra: managed DBs, IAM, networking NATs, load balancers, VPCs, secrets management.\r\n\r\nAdvanced ops & reliability\r\nCI/CD at scale: multi-stage pipelines, artifact repositories, canary/blue-green deployments, chaos testing.\r\n\r\nSLO/SLI/SLA: define availability and latency objectives.\r\n\r\nIncident response: runbooks, blameless postmortems, observability runbooks.\r\n\r\nLow-level optimization & native images\r\nProfiling-guided optimization, hotspots elimination, JVM flags tuning.\r\n\r\nGraalVM native-image: AOT builds for faster startup and smaller memory footprints (tradeoffs: reflection/config complexity).\r\n\r\nAdvanced projects (real-world complexity)\r\nEvent-driven order processing system: microservices, Kafka streams, idempotency guarantees, transactional outbox, metrics, and tracing; deploy on k8s.\r\n\r\nHigh-throughput API: stress test, profile, optimize GC and thread pools, introduce circuit breakers and backpressure, monitor performance under load.\r\n\r\nLibrary / framework contribution: build or contribute to an open-source library (e.g., a Spring Boot starter, or an instrumentation agent) and publish artifacts (Maven Central).\r\n\r\nAdvanced \u201cdone\u201d checklist\r\nDiagnose and fix production performance issues using profiling and JFR.\r\n\r\nArchitect scalable distributed services with observability and fault tolerance.\r\n\r\nLead design reviews and mentor others in architecture and operational best practices.\r\n\r\nCross-cutting skills (applies to all levels)\r\nClean code & design patterns: SOLID principles, factory, strategy, builder, dependency injection (Spring).\r\n\r\nTesting culture: unit, integration, contract tests (Pact), fuzz / property-based testing where useful.\r\n\r\nDocumentation: javadocs, well-written README, architecture docs and RFCs.\r\n\r\nSecurity hygiene: dependency scanning, secret scanning, secure defaults, threat modeling.\r\n\r\nSoft skills: communication, writing design docs, code review, mentorship, estimating.\r\n\r\nSuggested learning timelines & sample plans\r\n12-week focused plan\r\n\r\nWeeks 1\u20134: Java core + OOP + Collections + basic concurrency. Small CLI projects.\r\n\r\nWeeks 5\u20138: Spring Boot basics, REST API, JPA + Postgres. Dockerize.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4696, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9de92264-9892-4ae5-b780-f02ebcc4cd18": {"__data__": {"id_": "9de92264-9892-4ae5-b780-f02ebcc4cd18", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef468583-d539-4770-880b-c426c78c263a", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "2e148b8b602901b60ff01aa6bd57960a24b2e8cff05e0eafbeb34847ff4cde58", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acebcc30-9af9-4538-ac34-ccc1a1f654dc", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\java-developer-roadmap.txt", "file_name": "java-developer-roadmap.txt", "file_type": "text/plain", "file_size": 12476, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "b164430c445ccaa084c872efa92bb1ef6a1b617748a8fb74e993101f129f4f4d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security hygiene: dependency scanning, secret scanning, secure defaults, threat modeling.\r\n\r\nSoft skills: communication, writing design docs, code review, mentorship, estimating.\r\n\r\nSuggested learning timelines & sample plans\r\n12-week focused plan\r\n\r\nWeeks 1\u20134: Java core + OOP + Collections + basic concurrency. Small CLI projects.\r\n\r\nWeeks 5\u20138: Spring Boot basics, REST API, JPA + Postgres. Dockerize.\r\n\r\nWeeks 9\u201312: Testing (JUnit), CI setup, simple k8s/Heroku deploy, add monitoring.\r\n\r\n6\u201312 month career plan\r\n\r\nMonths 1\u20133: finish several intermediate projects and deploy.\r\n\r\nMonths 4\u20136: learn JVM internals basics, profiling, and GC tuning. Contribute to an OSS project.\r\n\r\nMonths 7\u201312: architect and deploy a microservice, implement tracing/metrics, learn Kubernetes basics.\r\n\r\nProject templates & example structure\r\nSimple Spring Boot service (typical layout)\r\ncss\r\nCopy\r\nEdit\r\nmy-service/\r\n\u251c\u2500 src/main/java/com/example/myservice/\r\n\u2502   \u251c\u2500 MyServiceApplication.java\r\n\u2502   \u251c\u2500 controller/\r\n\u2502   \u251c\u2500 service/\r\n\u2502   \u251c\u2500 repository/\r\n\u2502   \u2514\u2500 model/\r\n\u251c\u2500 src/test/java/...\r\n\u251c\u2500 src/main/resources/application.yml\r\n\u251c\u2500 Dockerfile\r\n\u251c\u2500 pom.xml (or build.gradle)\r\n\u2514\u2500 README.md\r\nMinimal REST controller (Spring Boot)\r\njava\r\nCopy\r\nEdit\r\n@RestController\r\n@RequestMapping(\"/api/tasks\")\r\npublic class TaskController {\r\n    private final TaskService svc;\r\n    public TaskController(TaskService svc) { this.svc = svc; }\r\n\r\n    @GetMapping\r\n    public List<TaskDto> list() { return svc.listAll(); }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<TaskDto> create(@RequestBody CreateTaskRequest req) {\r\n        TaskDto t = svc.create(req);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(t);\r\n    }\r\n}\r\nInterview preparation checklist (by seniority)\r\nBeginner\r\nJava basics: loops, arrays, OOP, simple algorithms.\r\n\r\nBasic collections and string manipulations.\r\n\r\nSimple unit test (JUnit).\r\n\r\nIntermediate\r\nREST API design, SQL queries, transactions, JPA basics.\r\n\r\nConcurrency basics and common pitfalls (race conditions).\r\n\r\nBuild & CI basics; containerization.\r\n\r\nData structures & algorithms (hashmaps, trees, sorting, complexity).\r\n\r\nAdvanced\r\nJVM internals (garbage collectors, classloading), profiling, memory leak diagnosis.\r\n\r\nDistributed systems patterns (consensus, idempotency, retries, circuit breaker).\r\n\r\nSystem design for scale: design a high-availability service, database sharding, caching strategies.\r\n\r\nSecurity threats and mitigations.\r\n\r\nCommon pitfalls & how to avoid them\r\nN+1 queries with ORM \u2014 use eager fetching carefully or batch queries; measure SQL.\r\n\r\nIgnoring profiling \u2014 always measure before optimizing (use JFR, async-profiler).\r\n\r\nBlocking I/O in reactive stacks \u2014 avoid blocking calls in event loops; use non-blocking clients.\r\n\r\nPremature microservices \u2014 start monolith or modular monolith; split after clear needs.\r\n\r\nPoor test coverage \u2014 prioritize meaningful tests and integration tests for critical flows.\r\n\r\nRecommended books & resources\r\nEffective Java \u2014 best-practice idioms.\r\n\r\nJava Concurrency in Practice \u2014 concurrency fundamentals and pitfalls.\r\n\r\nClean Code \u2014 engineering craft for maintainable code.\r\n\r\nOfficial Oracle/OpenJDK docs and JEP pages for language/runtime changes.\r\n\r\nCommunity sites: Baeldung, InfoQ, DZone, and the Spring documentation.\r\n\r\nCareer growth & practical advice (from a senior perspective)\r\nBuild and maintain a portfolio of deployed projects (GitHub + live demo).\r\n\r\nWrite small design docs and postmortems to show your thought process.\r\n\r\nContribute to open-source or internal libraries \u2014 shows practical impact.\r\n\r\nMentor juniors and participate in architecture discussions; soft skills scale your influence.\r\n\r\nKeep learning: JVM internals, cloud-native ops, and distributed systems are long-term differentiators.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3784, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fbbcd86c-e9f6-4c37-b866-9497aed7c341": {"__data__": {"id_": "fbbcd86c-e9f6-4c37-b866-9497aed7c341", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fc83925-7212-411a-a019-d68c8b498218", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "d4807cd2579c0fbd2f4d571d92ee463aad590ddb5a683ce9950e57686e168fdc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Beginner (0 \u2192 ~3 months) \u2014 Foundation & velocity\r\nGoal: learn Python syntax, core libraries, basic tooling, and ship small projects.\r\n\r\nCore skills\r\nPython syntax & REPL: variables, types, control flow, functions, modules.\r\n\r\nBuilt-in data structures: list, tuple, set, dict.\r\n\r\nI/O & file handling: open, context managers (with).\r\n\r\nBasic OOP: classes, __init__, methods, simple inheritance.\r\n\r\nExceptions: try/except/finally.\r\n\r\nStandard library essentials: os, sys, pathlib, json, datetime, collections, itertools.\r\n\r\nVirtual environments: python -m venv venv and activating it.\r\n\r\npip + requirements.txt (installing packages).\r\n\r\nBasic Git workflows (clone \u2192 branch \u2192 commit \u2192 PR).\r\n\r\nReadability & style: PEP8 basics \u2014 use black and flake8.\r\n\r\nRecommended timeline\r\nWeeks 1\u20132: syntax, types, and small scripts (calculator, file parser).\r\n\r\nWeeks 3\u20134: functions, modules, OOP basics \u2014 write small classes.\r\n\r\nWeeks 5\u20138: standard library, virtualenv, pip, basic package use (requests).\r\n\r\nWeeks 9\u201312: one polished project + GitHub repo + README.\r\n\r\nStarter projects (build & deploy)\r\nProject A: CLI TODO app\r\n\r\nFeatures: add/list/remove tasks, save to JSON file, mark as done.\r\n\r\nMilestones: basic CLI \u2192 tests \u2192 help/usage docs.\r\n\r\nProject B: File processor\r\n\r\nRead CSV/JSON, transform data, write output.\r\n\r\nMilestones: parsing \u2192 validation \u2192 small CLI options (argparse).\r\n\r\nTools & commands you\u2019ll use\r\nbash\r\nCopy\r\nEdit\r\npython -m venv venv\r\nsource venv/bin/activate   # or venv\\Scripts\\activate on Windows\r\npip install requests\r\npip freeze > requirements.txt\r\nTesting:\r\n\r\nbash\r\nCopy\r\nEdit\r\npip install pytest\r\npytest\r\nBeginner checklist (what \u201cdone\u201d looks like)\r\nUse virtualenv for projects.\r\n\r\nRepo with README, license, simple tests.\r\n\r\nAble to debug with print & basic pdb.\r\n\r\nUnderstand basic Git and push a PR.\r\n\r\nIntermediate (3 \u2192 12 months) \u2014 Real apps, good practices, and tooling\r\nGoal: build web apps / APIs, write clean tests, use databases, and operate local dev workflows.\r\n\r\nCore skills\r\nWeb frameworks: Flask (micro) or FastAPI (async-first) or Django (full-stack).\r\n\r\nHTTP & web fundamentals: status codes, headers, query params, REST principles.\r\n\r\nDatabases: SQL basics, use PostgreSQL (psycopg / SQLAlchemy), simple migrations (Alembic).\r\n\r\nORMs: SQLAlchemy (core/ORM) or Django ORM.\r\n\r\nAsynchronous Python: async/await basics, asyncio event loop; when to use async.\r\n\r\nPackaging & dependency management: pyproject.toml, poetry (or pip + requirements).\r\n\r\nTesting: pytest with fixtures, mocking, integration tests.\r\n\r\nLogging & config: structured logging (logging), environment config patterns (12-factor).\r\n\r\nAPIs: design REST endpoints, return JSON, input validation (pydantic for FastAPI).\r\n\r\nDocker basics: Dockerfile for app, container run/test.\r\n\r\nCI basics: GitHub Actions or similar to run tests and lint on PRs.\r\n\r\nType hints: start adding typing annotations, run mypy optionally.\r\n\r\nSecurity basics: avoid pickle on untrusted data, sanitize inputs, simple auth flows.\r\n\r\nIntermediate projects (purposeful & deployable)\r\nProject C: URL Shortener (Flask/FastAPI + Postgres)\r\n\r\nFeatures: create short links, redirect, simple analytics (click count).\r\n\r\nMilestones: API endpoints \u2192 DB schema \u2192 tests \u2192 Dockerfile \u2192 deploy to Heroku/Vercel-compatible backend.\r\n\r\nProject D: Task manager with Web UI\r\n\r\nFull-stack: React or plain HTML + server templates (Django), API for tasks, authentication.\r\n\r\nMilestones: server API \u2192 client UI \u2192 secure auth (JWT/session) \u2192 file uploads.\r\n\r\nDev & infra skills\r\nDocker commands: docker build -t app ., docker run -p 8000:8000 app.\r\n\r\nLocal Postgres with Docker: docker run -e POSTGRES_PASSWORD=pass -p 5432:5432 postgres.\r\n\r\nCI pipeline: automatically run tests, lint, build docker image on PR.\r\n\r\nTesting strategy\r\nUnit tests for pure functions.\r\n\r\nIntegration tests for DB/API (use test DB or fixtures).\r\n\r\nWrite a small set of E2E tests with Playwright or simple curl checks.\r\n\r\nIntermediate checklist\r\nProjects have tests with CI passing.\r\n\r\nApp can be containerized and deployed.\r\n\r\nTyping introduced in core modules.\r\n\r\nBasic async knowledge and when not to use it.\r\n\r\nAdvanced (12 months \u2192 years) \u2014 Production, scale, architecture & performance\r\nGoal: design secure, scalable systems; optimize performance; mentor others and own design decisions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4321, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58c00a9a-4e41-4f4c-83b0-4ce4de92f14d": {"__data__": {"id_": "58c00a9a-4e41-4f4c-83b0-4ce4de92f14d", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fc83925-7212-411a-a019-d68c8b498218", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "d4807cd2579c0fbd2f4d571d92ee463aad590ddb5a683ce9950e57686e168fdc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbbcd86c-e9f6-4c37-b866-9497aed7c341", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "279a1719582b94f51e75cbd646bfe002f9866e048e4d7cd4b70bc4af9476cadc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Integration tests for DB/API (use test DB or fixtures).\r\n\r\nWrite a small set of E2E tests with Playwright or simple curl checks.\r\n\r\nIntermediate checklist\r\nProjects have tests with CI passing.\r\n\r\nApp can be containerized and deployed.\r\n\r\nTyping introduced in core modules.\r\n\r\nBasic async knowledge and when not to use it.\r\n\r\nAdvanced (12 months \u2192 years) \u2014 Production, scale, architecture & performance\r\nGoal: design secure, scalable systems; optimize performance; mentor others and own design decisions.\r\n\r\nCore skills & deep topics\r\nAdvanced Python internals: memory model, reference counting, garbage collection (gc), how the GIL works and implications.\r\n\r\nPerformance: profiling (cProfile, py-spy), optimizing hot paths, using asyncio effectively, batching I/O, connection pooling.\r\n\r\nConcurrency & parallelism: threads vs processes vs asyncio vs worker pools; concurrent.futures and multiprocessing; worker systems (Celery, RQ).\r\n\r\nC extensions & speedups: Cython, Numba, writing CPython extensions, or using Rust with PyO3 for critical code.\r\n\r\nType system mastery: large-codebase typing strategies, generics, typing patterns, gradual typing tradeoffs.\r\n\r\nAdvanced packaging & distribution: publish packages to PyPI, build wheels, use auditwheel/manylinux.\r\n\r\nObservability & SRE practices: distributed tracing (OpenTelemetry), metrics (Prometheus), log aggregation, structured logs, dashboards & alerts.\r\n\r\nSecurity at scale: threat modeling, OWASP mitigation, secrets management, dependency scanning in CI.\r\n\r\nSystems design with Python: microservices, event-driven architectures, idempotency, retries/backoff, data contracts.\r\n\r\nCloud & infra: Kubernetes, autoscaling, managed DBs, serverless patterns (Lambda with containers, API Gateway).\r\n\r\nData engineering & ML ops (optional but valuable): streaming (Kafka), ETL pipelines, data versioning (DVC), model serving (TorchServe/TF Serving), inference scaling.\r\n\r\nArchitectural leadership: API design at scale, multi-team contracts, migration strategies, rollout patterns (canary, blue/green).\r\n\r\nAdvanced projects (impactful & portfolio-grade)\r\nProject E: Scalable event-driven service\r\n\r\nIngest stream (Kafka), process messages with idempotency guarantees, store to DB, expose metrics & tracing.\r\n\r\nMilestones: local dev stack with Docker Compose \u2192 worker autoscaling \u2192 tracing setup \u2192 deployment to k8s cluster.\r\n\r\nProject F: Production ML inference pipeline\r\n\r\nTrain small model locally, wrap as API with batching and caching, measure latency, deploy to serverless or k8s, add monitoring for model drift.\r\n\r\nProject G: Build & publish a Python library\r\n\r\nProper packaging, CI for tests & publishing, documentation, semantic versioning, and maintainability.\r\n\r\nTools & infra\r\nKubernetes basics: manifests, deployments, services, ingress, secrets, configmaps.\r\n\r\nCI/CD best practices: build pipelines, artifact immutability, automated canary rollouts.\r\n\r\nObservability stack: Prometheus/Grafana, Loki/ELK for logs, Jaeger for traces.\r\n\r\nSecurity & compliance tooling: SAST, SCA, secret scanning.\r\n\r\nAdvanced checklist (what excellence looks like)\r\nAble to profile and reduce 99th percentile latency by >X% (measure baseline).\r\n\r\nDesigns services with clear contracts, retries, backpressure handling.\r\n\r\nProduction-grade deployment: CI/CD, rollbacks, monitoring, runbooks.\r\n\r\nMentoring & code review culture: enforce testing, help design docs, drive architecture decisions.\r\n\r\nCross-cutting best practices (all levels)\r\nWrite tests early. Tests reduce fear of change.\r\n\r\nAutomate everything: CI runs tests & linters, deploys on merge, and checks security.\r\n\r\nUse type hints progressively \u2014 they help with refactors.\r\n\r\nModel & log metrics: collect basic app metrics (request latency, error rate) from day one.\r\n\r\nKeep secrets secret: never commit creds; use env vars or secret managers.\r\n\r\nDocument assumptions: README, API docs (OpenAPI), design decisions, and migration notes.\r\n\r\nInterview & hiring checklist (by level)\r\nBeginner: explain basic constructs, write a function confidently, use lists/dicts, basics of OOP, simple unit test.\r\n\r\nIntermediate: design a REST endpoint, SQL joins, ORM tradeoffs, containerize an app, write pytest tests, basic async knowledge.\r\n\r\nAdvanced: system design for scale, profiling and performance fixes, concurrency traps (GIL), distributed tracing, security threat modeling.\r\n\r\nLearning paths & sample 6/12/24-month plan (concise)\r\n6-month focused plan (if you can devote ~10\u201315 hrs/week)\r\nMonths 0\u20131: Python basics + CLI tools + small scripts.\r\n\r\nMonths 2\u20133: Web dev with Flask or FastAPI; DB integration; build & deploy one app.\r\n\r\nMonths 4\u20135: Docker + CI + unit/integration tests + some async patterns.\r\n\r\nMonth 6: Build a production-ready project with monitoring & a README showing architecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4795, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f3174ecc-dc75-49df-9f86-6928eefdcedd": {"__data__": {"id_": "f3174ecc-dc75-49df-9f86-6928eefdcedd", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fc83925-7212-411a-a019-d68c8b498218", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "d4807cd2579c0fbd2f4d571d92ee463aad590ddb5a683ce9950e57686e168fdc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58c00a9a-4e41-4f4c-83b0-4ce4de92f14d", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\python-developer-roadmap.txt", "file_name": "python-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11123, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "b4387a3f5789161d6f6426f66cd3d0624e77f2e6610550a92aed545f9a4fff06", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Months 2\u20133: Web dev with Flask or FastAPI; DB integration; build & deploy one app.\r\n\r\nMonths 4\u20135: Docker + CI + unit/integration tests + some async patterns.\r\n\r\nMonth 6: Build a production-ready project with monitoring & a README showing architecture.\r\n\r\n12-month mastery plan\r\nFirst 6 months as above.\r\n\r\nMonths 7\u20139: Advanced architecture (message queues, caching), optimizations & profiling.\r\n\r\nMonths 10\u201312: Kubernetes basics, package a library, publish to PyPI, add SLOs/observability.\r\n\r\n24-month to senior-level\r\nBeyond 12 months: design cross-service systems, lead a migration, drive infra work (CI/CD/k8s), mentor team, write design docs, and measure business impact.\r\n\r\nConcrete project roadmap example: \u201cTaskFlow\u201d (from beginner \u2192 advanced)\r\nPhase 1 (Beginner): CLI Taskflow app\r\n\r\nCRUD tasks, save JSON, simple tests.\r\n\r\nPhase 2 (Intermediate): Web Taskflow\r\n\r\nFastAPI backend + SQLite/Postgres, React frontend, JWT auth, Dockerfile, CI pipeline.\r\n\r\nPhase 3 (Advanced): Scalable Taskflow\r\n\r\nMigrate DB to Postgres with replicas, add Celery worker for heavy jobs, Kafka for events, Kubernetes deployment, Prometheus metrics, tracing with OpenTelemetry, automated canary deployment.\r\n\r\nAt each phase, add measurable acceptance criteria (tests passing, LCP < X, error rate < Y).\r\n\r\nCommon pitfalls & how to avoid them\r\nPremature optimization: measure first (profile), then optimize.\r\n\r\nIgnoring tests: leads to brittle code. Automate tests in CI.\r\n\r\nN+1 DB queries: watch ORM patterns; use joins/batch queries.\r\n\r\nBlocking I/O in async code: don\u2019t call blocking libs in async loop (use threadpool or async equivalents).\r\n\r\nUnbounded memory/growth: set limits, watch queues, and monitor heap.\r\n\r\nPoor observability: instrument basic metrics and errors from day one.\r\n\r\nBooks & resources (recommended)\r\nAutomate the Boring Stuff \u2014 practical beginner projects.\r\n\r\nFluent Python \u2014 deeper language mastery.\r\n\r\nEffective Python \u2014 pragmatic patterns.\r\n\r\nDesigning Data-Intensive Applications \u2014 system design (non-Python specific but essential).\r\n\r\nOfficial Python docs & PEPs for language changes.\r\n\r\nOnline: Real Python, Full Stack Python, official FastAPI/Flask/Django docs.\r\n\r\nFinal practical advice (from the viewpoint of an experienced coach)\r\nShip and measure. Build small things and put them in front of users \u2014 feedback accelerates learning.\r\n\r\nWork on code you care about (your own projects or OSS) \u2014 ownership teaches operational realities.\r\n\r\nWrite READMEs & postmortems. Explaining failures teaches more than success.\r\n\r\nInvest in fundamentals first. Understand algorithms, networking basics, and databases \u2014 frameworks change, fundamentals do not.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2661, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8bb1640e-c28b-4c7c-ae35-b0600d35f9b3": {"__data__": {"id_": "8bb1640e-c28b-4c7c-ae35-b0600d35f9b3", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faac2a9d-906a-461e-ad8f-53521de60526", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "f4741f6e6ca335bb93e6a66bfdc3b674983a3c30cd498e7a63a094a0110e475e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Below is a complete, structured roadmap for becoming a strong web developer (full-stack). It\u2019s organized as a learning path plus concrete skills, tools, projects, and career advice \u2014 the sort of roadmap a senior engineer would hand a mentee. Read straight through or jump to any section you need.\r\n\r\n1) Top-level flow (quick view)\r\nFoundations \u2192 Frontend \u2192 Backend \u2192 Data & Storage \u2192 DevOps / Deployment \u2192 Testing & Observability \u2192 Security \u2192 Scale & Architecture \u2192 Career / Projects.\r\n\r\n2) Foundations (never skip)\r\nWhy: Every good web engineer must own the basics \u2014 the rest builds on these.\r\n\r\nHTML: semantic markup, accessibility basics (alt, headings, forms, landmarks), document metadata.\r\n\r\nCSS: box model, cascade & specificity, Flexbox, Grid, responsive design (mobile-first), CSS variables, performance (avoid layout thrash).\r\n\r\nJavaScript (ES6+): let/const, arrow functions, promises, async/await, modules, closures, event loop basics.\r\n\r\nVersion control: git workflows (feature branches, rebasing vs merge, PR reviews).\r\n\r\nBrowser & HTTP fundamentals: request/response, headers, status codes, CORS, cookies, sessions, TLS basics.\r\n\r\nDevTools: network, performance, memory, element inspector, Lighthouse.\r\n\r\n3) Frontend (what to master and why)\r\nGoal: build robust, maintainable, accessible, and fast user interfaces.\r\n\r\nCore topics:\r\n\r\nFrameworks: React (incl. hooks + concurrent concepts), Vue, Svelte \u2014 pick one deeply (React is most common).\r\n\r\nRouting & rendering models: client-side routing, SSR (server-side rendering), SSG (static generation), incremental/edge rendering.\r\n\r\nState management: local state, Context, React Query / TanStack Query (server-state), Redux / Zustand / Recoil (global patterns) \u2014 know tradeoffs.\r\n\r\nStyling: CSS Modules, Tailwind/utility-first, Styled Components, design tokens, component theming.\r\n\r\nAccessibility (A11y): keyboard navigation, ARIA roles only when necessary, semantic HTML, color contrast & screen reader testing.\r\n\r\nTesting: unit (Jest/Vitest), component/behavior (React Testing Library), E2E (Playwright / Cypress).\r\n\r\nPerformance: code-splitting, lazy loading, image optimization (srcset/modern formats), preconnect/preload, critical CSS, Web Vitals (LCP, FID/TBT, CLS).\r\n\r\nPWA & Offline: service workers, caching strategies, manifest, app shell pattern.\r\n\r\nAdvanced UI: animations (transform/opacity), virtualization for long lists, accessibility of custom widgets (modals, dialogs).\r\n\r\nTooling: bundlers (Vite, Webpack), linters & formatters (ESLint + Prettier), Storybook for component libraries.\r\n\r\n4) Backend fundamentals (server-side skills)\r\nGoal: design and operate reliable server-side systems, APIs, auth, and data access.\r\n\r\nCore topics:\r\n\r\nLanguages & frameworks (pick 1+): Node.js (Express, Fastify, Nest), Python (Django, Flask, FastAPI), Go, Java (Spring Boot), .NET. Learn idioms, deployment story, and ecosystem.\r\n\r\nAPI design:\r\n\r\nRESTful design, status codes, resource modeling.\r\n\r\nGraphQL: schema design, pagination, caching, N+1 problems.\r\n\r\ngRPC for high-performance RPC.\r\n\r\nAuthentication & authorization: sessions, JWT, OAuth2 / OpenID Connect (PKCE for SPAs), role-based access control, secure token storage.\r\n\r\nData modeling: relational (Postgres/MySQL) vs NoSQL (MongoDB, DynamoDB) tradeoffs.\r\n\r\nCaching: Redis, in-memory caches, cache invalidation strategies.\r\n\r\nBackground processing: queues (RabbitMQ, Kafka), workers, scheduled jobs.\r\n\r\nFile & media storage: S3-compatible storage, presigned URLs, CDN integration.\r\n\r\nTesting & API contracts: unit tests, integration tests, contract testing (Pact), Postman collections.\r\n\r\nObservability: structured logging, distributed tracing (OpenTelemetry), metrics (Prometheus), error tracking (Sentry).\r\n\r\n5) Databases, search & storage patterns\r\nRelational DBs: schema design, normalization vs denormalization, indexes, transactions, migrations (Flyway, Alembic).\r\n\r\nNoSQL: document modeling patterns, eventual consistency, partition keys.\r\n\r\nFull-text search: Elasticsearch/OpenSearch, query design, relevance tuning.\r\n\r\nAnalytical stores: columnar formats, OLAP patterns (ClickHouse, BigQuery).\r\n\r\nData pipelines: batch vs streaming (Kafka, Kinesis), idempotency, data schema versioning.\r\n\r\n6) DevOps & deployment (production readiness)\r\nGoal: deliver code reliably and operate services.\r\n\r\nContainers: Docker basics \u2014 images, layers, multi-stage builds, healthchecks.\r\n\r\nOrchestration: Kubernetes basics \u2014 pods, services, ingress, configmaps, secrets, deployments, autoscaling.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "025ae9aa-6cd2-4fb0-95f0-c95a57035c08": {"__data__": {"id_": "025ae9aa-6cd2-4fb0-95f0-c95a57035c08", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faac2a9d-906a-461e-ad8f-53521de60526", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "f4741f6e6ca335bb93e6a66bfdc3b674983a3c30cd498e7a63a094a0110e475e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8bb1640e-c28b-4c7c-ae35-b0600d35f9b3", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "f682a5d0faedcf1d05a306953b7f3dd5ce9d3941efa4afd79b9e670ef10cecbe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Analytical stores: columnar formats, OLAP patterns (ClickHouse, BigQuery).\r\n\r\nData pipelines: batch vs streaming (Kafka, Kinesis), idempotency, data schema versioning.\r\n\r\n6) DevOps & deployment (production readiness)\r\nGoal: deliver code reliably and operate services.\r\n\r\nContainers: Docker basics \u2014 images, layers, multi-stage builds, healthchecks.\r\n\r\nOrchestration: Kubernetes basics \u2014 pods, services, ingress, configmaps, secrets, deployments, autoscaling.\r\n\r\nCI/CD: GitHub Actions / GitLab CI / CircleCI \u2014 pipelines for build/test/deploy. Blue/green & canary deployments.\r\n\r\nInfrastructure as Code: Terraform, CloudFormation. Manage infra reproducibly.\r\n\r\nDeployment targets: cloud (AWS/GCP/Azure), serverless (Lambda/Cloud Functions), edge (Cloudflare Workers, Vercel).\r\n\r\nSecrets & config: Vault, AWS Secrets Manager, environment-based config strategies.\r\n\r\nObservability in prod: logs aggregation, dashboards, alerting (Prometheus+Alertmanager or Datadog).\r\n\r\nCost & runtime optimization: right-sizing instances, caching, CDN use.\r\n\r\n7) Security (must-have knowledge)\r\nOWASP Top 10: injection, broken auth, XSS, CSRF, insecure deserialization, etc.\r\n\r\nSecure coding: input validation, least privilege, proper error handling (no leaks).\r\n\r\nTransport & secrets: HTTPS, HSTS, secure cookies, CORS best practices, token rotation.\r\n\r\nDependency security: SCA tools (snyk, dependabot), lockfile hygiene, CI scanning.\r\n\r\nThreat modeling: think like an attacker \u2014 identify critical assets and mitigations.\r\n\r\n8) Testing, reliability & QA\r\nTesting pyramid: smaller fast unit tests \u2192 integration tests \u2192 slower E2E tests.\r\n\r\nAutomated testing: test coverage targets, CI gating.\r\n\r\nContract tests: ensure API changes don\u2019t break consumers.\r\n\r\nChaos engineering basics: resiliency testing (time permitting in advanced roles).\r\n\r\nBackup & recovery: DB backups, DR plans, runbooks.\r\n\r\n9) Performance & scalability (design patterns)\r\nCaching layers: browser cache, CDN, edge caching, server caches.\r\n\r\nCDN strategy: asset hosting, dynamic caching rules.\r\n\r\nLoad balancing & autoscaling: stateless app design, sticky sessions caveats.\r\n\r\nQueueing & backpressure: rate limits, retries, circuit breakers.\r\n\r\nDatabase scaling: read replicas, sharding patterns, partitioning, connection pooling.\r\n\r\nProfiling & bottleneck identification: flame graphs, CPU/memory profiling, RUM.\r\n\r\n10) Advanced topics & trends\r\nServerless & edge compute for low-latency regional responses.\r\n\r\nMicroservices & service mesh (Istio/Linkerd).\r\n\r\nWebAssembly (WASM) \u2014 heavy compute at client or portable modules.\r\n\r\nRealtime: WebSockets, Server-Sent Events, WebRTC.\r\n\r\nMachine learning inference at edge (TensorFlow.js, ONNX).\r\n\r\nPrivacy-preserving techniques: differential privacy, federated learning (if ML adjacent).\r\n\r\nEmerging platform APIs: WebGPU, WebAuthn.\r\n\r\n11) Soft skills & career progression\r\nCommunication: explain tradeoffs to product & non-technical stakeholders.\r\n\r\nArchitecture & design docs: write clear RFCs and design proposals.\r\n\r\nMentorship & code reviews: make reviews teachable, not just gatekeeping.\r\n\r\nMeasuring impact: define success metrics and instrument features.\r\n\r\nLeadership paths: IC progression (Senior \u2192 Staff \u2192 Principal) vs management track.\r\n\r\n12) Real projects you should build (by stage)\r\nBeginner\r\n\r\nResponsive portfolio site + deploy (Netlify/Vercel).\r\n\r\nTodo app with localStorage + basic tests.\r\n\r\nIntermediate\r\n\r\nFull-stack blog: Next.js + Postgres (or Headless CMS), authentication, markdown editor, image uploads, SSR/SSG.\r\n\r\nE-commerce cart: product pages, checkout flow (mock payments), cart persistence, test suite.\r\n\r\nAdvanced\r\n\r\nSocial feed with real-time updates (WebSocket/GraphQL subscriptions), scalable APIs, moderation tools.\r\n\r\nMulti-service system: microservices (user, product, payments), event-driven architecture, CI/CD, monitoring dashboards.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3873, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f19ed60-711a-4de9-9cd9-b333128f8092": {"__data__": {"id_": "7f19ed60-711a-4de9-9cd9-b333128f8092", "embedding": null, "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faac2a9d-906a-461e-ad8f-53521de60526", "node_type": "4", "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "f4741f6e6ca335bb93e6a66bfdc3b674983a3c30cd498e7a63a094a0110e475e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "025ae9aa-6cd2-4fb0-95f0-c95a57035c08", "node_type": "1", "metadata": {"file_path": "data\\roadmaps\\web-developer-roadmap.txt", "file_name": "web-developer-roadmap.txt", "file_type": "text/plain", "file_size": 11096, "creation_date": "2025-08-11", "last_modified_date": "2025-08-11"}, "hash": "5a6b6094867c919c5429fb33e521b609697cfd5523ac4b3bc6493d8bfd0298f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Intermediate\r\n\r\nFull-stack blog: Next.js + Postgres (or Headless CMS), authentication, markdown editor, image uploads, SSR/SSG.\r\n\r\nE-commerce cart: product pages, checkout flow (mock payments), cart persistence, test suite.\r\n\r\nAdvanced\r\n\r\nSocial feed with real-time updates (WebSocket/GraphQL subscriptions), scalable APIs, moderation tools.\r\n\r\nMulti-service system: microservices (user, product, payments), event-driven architecture, CI/CD, monitoring dashboards.\r\n\r\n13) Project structure examples (full-stack app)\r\nbash\r\nCopy\r\nEdit\r\nproject/\r\n\u251c\u2500 infra/                 # terraform / k8s manifests\r\n\u251c\u2500 services/\r\n\u2502  \u251c\u2500 api/                # backend (Node/Python/Go)\r\n\u2502  \u2502  \u251c\u2500 src/\r\n\u2502  \u2502  \u251c\u2500 Dockerfile\r\n\u2502  \u2502  \u2514\u2500 tests/\r\n\u2502  \u2514\u2500 worker/             # background jobs\r\n\u251c\u2500 web/                   # frontend (React/Vite/Next)\r\n\u2502  \u251c\u2500 src/\r\n\u2502  \u251c\u2500 public/\r\n\u2502  \u251c\u2500 Dockerfile\r\n\u2502  \u2514\u2500 storybook/\r\n\u251c\u2500 scripts/               # dev helpers (db seeds)\r\n\u251c\u2500 .github/workflows/     # CI/CD pipelines\r\n\u2514\u2500 README.md\r\n14) Realistic learning timelines (example)\r\n0\u20133 months (Foundations): HTML/CSS/vanilla JS, git, small static projects.\r\n\r\n3\u20136 months (Frontend & Tooling): framework (React), state & routing, TypeScript basics, basic testing. Deploy projects.\r\n\r\n6\u201312 months (Backend + Full-stack): Node or other backend, databases, authentication, building full-stack apps, CI pipelines.\r\n\r\n12\u201324 months (Production & Scale): Docker, Kubernetes basics, observability, advanced testing, styling systems, SSR, performance optimization.\r\n\r\n2+ years (Mastery): architecture, team/organizational impact, mentoring, cross-team ownership.\r\n\r\nAdjust pacing to your available weekly hours.\r\n\r\n15) Interview & hiring checklist (what employers care about)\r\nCore knowledge: JS fundamentals, HTTP, browsers.\r\n\r\nApplied skills: built & deployed apps, handled performance/scale issues.\r\n\r\nSystem design: design a scalable web app, tradeoffs, caching & data flows.\r\n\r\nTesting & CI: test coverage, meaningful E2E tests, pipelines.\r\n\r\nBehavioral: collaboration, ownership examples, postmortem or bug story.\r\n\r\nCode exercise: clean, readable code, edge cases, tests.\r\n\r\n16) Common mistakes & how to avoid them\r\nOver-engineering early \u2014 start simple, measure.\r\n\r\nPremature optimizations before profiling.\r\n\r\nNeglecting accessibility and mobile users.\r\n\r\nNot instrumenting telemetry (you can\u2019t improve what you don\u2019t measure).\r\n\r\nStoring secrets in repos or client code.\r\n\r\nIgnoring dependency updates & security alerts.\r\n\r\n17) Resources (selected, high-signal)\r\nDocs & learning\r\n\r\nMDN Web Docs (HTML/CSS/JS) \u2014 canonical.\r\n\r\n\u201cYou Don\u2019t Know JS\u201d (book series) \u2014 deep JS.\r\n\r\nFrontend Masters / Egghead / Wes Bos courses \u2014 practical.\r\n\r\nFree resources: freeCodeCamp, The Odin Project.\r\n\r\nBooks\r\n\r\nDesigning Data-Intensive Applications \u2014 system design & data patterns.\r\n\r\nEloquent JavaScript \u2014 good JS fundamentals.\r\n\r\nWeb Performance in Action or High Performance Browser Networking \u2014 performance.\r\n\r\nTools to learn\r\n\r\nGitHub Actions, Docker, Kubernetes (minikube/kind), Terraform, Prometheus/Grafana, Sentry, Playwright/Cypress, Vite/Next.js/Remix.\r\n\r\n18) 30/60/90 plan for getting hired as a web dev\r\nFirst 30 days: learn team stack, get dev environment working, fix small bugs, add tests.\r\n60 days: own a feature, improve CI or docs, reduce a small performance bug.\r\n90 days: propose and implement a non-trivial improvement (feature refactor, performance gain, process/observability). Demonstrate ownership.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}